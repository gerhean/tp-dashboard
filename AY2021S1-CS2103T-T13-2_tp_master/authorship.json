[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "# QuickCache"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103T-T13-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-2/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "This is a desktop application called **QuickCache**. \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**QuickCache** is a flashcard knowledge bank where students can add their content by questions and test themselves afterwards. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Students can monitor their performance and progress over time using **QuickCache** as well. \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**QuickCache** contains a Graphical User Interface (GUI) but has been optimized to enable user interaction mostly via the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* [User Guide](https://github.com/AY2021S1-CS2103T-T13-2/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* [Developer Guide](https://github.com/AY2021S1-CS2103T-T13-2/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* [About Us](https://github.com/AY2021S1-CS2103T-T13-2/tp/blob/master/docs/AboutUs.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 14,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "mainClassName \u003d \u0027quickcache.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    archiveName \u003d \u0027quickcache.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 5,
      "-": 69
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Josiah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cimg src\u003d\"images/josiahkhoo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[github](https://github.com/josiahkhoo)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[portfolio](team/josiah.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Francis Hodianto"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003cimg src\u003d\"images/fh-30.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[github](https://github.com/FH-30)] "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[portfolio](team/francis.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "### Joshua Tan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\u003cimg src\u003d\"images/joshtyf.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "[[github](http://github.com/joshtyf)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "[[portfolio](team/joshua.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Gilbert Tan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "\u003cimg src\u003d\"images/gilberttan19.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[github](https://github.com/GilbertTan19)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[portfolio](team/gilbert.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "### Xingjian Chen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003cimg src\u003d\"images/chenxj98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[github](https://github.com/ChenXJ98)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "[[portfolio](team/xingjian.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* Responsibilities: GitHub Integration"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "joshtyf": 5,
      "ChenXJ98": 2,
      "FH-30": 1,
      "-": 35,
      "GilbertTan19": 15
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* stores the quick cache flashcard data."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFlashcard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### \\[Proposed\\] Tags"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "The proposed tags mechanism is facilitated by `Flashcard` upon creation. It is stored internally as an `Set\u003cTag\u003e` inside the `flashcard` object."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Given below is an example usage scenario and how the tag mechanism behaves at each step."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Step 1. The user launches the application for the first time. The `QuickCache` will be initialized with the initial QuickCache state."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Step 2. The user executes `add q/ question... t/tag` command to add a flashcard with tag. The `add` command will cause the addition of a flashcard with a tag inside the QuickCache. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Step 3. The user executes `edit 1 t/tag` to edit the tag in the first flashcard of the list. The edit command will change the internal structure of flashcard such that the `Set\u003cTag\u003e` is updated."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not be saved in the QuickCache, so the flashcard inside the QuickCache will not be updated."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "##### Aspect: How tag executes"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Alternative 1 (current choice):** Tag is saved upon creation."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Cons: May be complicated as there will be too many fields in the `add` command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Alternative 2:** Individual command knows how to tag by"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Pros: Will be less complicated."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Cons: There may be too many commands which can be combined to one."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* Students with many modules who want to memorize points"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* wants to monitor his/her progress"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "**Value proposition**: manage flashcards faster than a typical mouse/GUI driven app with "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "a test feature and track the progress later."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                    |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* * *`  | new user                                   | have a get started             | see the features available in the app                                     |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* * *`  | new user                                   | have a sample data             | explore more about the app                                                |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* * *`  | new user                                   | purge all current data         | delete the sample data for exploring the app                              |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* * *`  | user                                       | add a new flashcard            |                                                                           |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* * *`  | user                                       | delete a flashcard             | remove flashcards that I no longer need                                   |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | find a flashcard by name       | locate details of flashcards without having to go through the entire list |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | edit a flashcard               |                                                                           |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | quiz myself                    | memorize things better                                                    |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | organize my flashcard          |                                                                           |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | categorize my flashcards       | easily find the flashcard associated with the category                    |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | import a set of flashcard      | easily add new category of flashcard                                      |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `* *`    | user                                       | export a set of flashcard      | easily transfer a category of flashcard                                   |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `*`      | user who has created a lot of flashcard    | delete a category of flashcard | easily transfer a category of flashcard                                   |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `*`      | user with many flashcards in the list      | specify the importance         |                                                                           |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `*`      | user                                       | randomize the question         | test myself better                                                        |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `*`      | user                                       | get the statistic of quiz      | get a visualisation form of my performance                                |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "| `*`      | user                                       | track the progress             | know what I have done when using the app                                  |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "FH-30"
        },
        "content": "(For all use cases below, the **System** is the `QuickCache` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC01 - Explore QuickCache**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FH-30"
        },
        "content": "1.  User double clicks on QuickCache.jar"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "FH-30"
        },
        "content": "2.  QuickCache opens and shows a list of flashcards"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "FH-30"
        },
        "content": "3.  User plays around with QuickCache features to familiarize with them"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "FH-30"
        },
        "content": "4.  User purges all \"get started\" data"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* 1a. Error message indicating that QuickCache.jar cannot be opened pops up."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 1a1. User opens up CLI in the directory containing QuickCache and runs `java -jar QuickCache.jar`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* 3a. User wants to know all the available commands present in QuickCache."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 3a1. User requests for all the instructions available in QuickCache."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 3a2. QuickCache displays all available commands."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* 3b. User quits QuickCache while trying out quiz feature."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 3b1. When opening QuickCache again, quiz resumes from where the User left off."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* *a. User dislikes the GUI."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * *a1. User quits and deletes QuickCache."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC02 - View Statistics**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Preconditions: User has QuickCache open.**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "FH-30"
        },
        "content": "1.  User requests for statistics"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "FH-30"
        },
        "content": "2.  QuickCache displays statistics"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "FH-30"
        },
        "content": "3.  User completes a quiz and requests for statistics"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "FH-30"
        },
        "content": "4.  QuickCache displays updated statistics"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* 1a. User has not done any quiz on QuickCache."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 1a1. QuickCache shows an error message."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC03 - Delete a flashcard**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Preconditions: User has QuickCache open.**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "1.  User requests to list flashcards"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "FH-30"
        },
        "content": "2.  QuickCache shows a list of flashcards"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "3.  User requests to delete a specific flashcard in the list"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "FH-30"
        },
        "content": "4.  QuickCache deletes the flashcard"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "5.  QuickCache updates flashcard save file (UC07)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 3a1. QuickCache shows an error message."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC04 - Create a flashcard**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Preconditions: User has QuickCache open.**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "1.  User requests to add a flashcard"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "FH-30"
        },
        "content": "2.  QuickCache adds it to the list"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "3.  QuickCache updates flashcard save file (UC07)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "4.  User requests to list flashcards"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "5.  QuickCache shows the list of flashcards including the recently added flashcard"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* 1a. The question is empty."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 1a1. QuickCache shows an error message."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* 1b. The answer is empty."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 1b1. QuickCache shows an error message."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**System: QuickCache**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC05 - Test a single flashcard**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "1. User requests to list flashcards"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "2. QuickCache shows a list of flashcards"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "3. User requests to test a specific flashcard in the list with a specific answer"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "4. QuickCache displays whether the answer is correct"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**System: QuickCache**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC06 - Test a set of flashcards by category**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "1. User requests to list categories"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "2. QuickCache shows a list of categories"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "3. User requests to test a specific category in the list"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "4. User tests each flashcard on the list (UC06)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "5. QuickCache shows the number of successful questions at the end"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * 3a1. QuickCache shows an error message."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 3b. The user specifies a time limit."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * 3b1. QuickCache starts a timer."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Use case resumes from step 4."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 3c. The user specifies to randomly sort the questions."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * 3c1. QuickCache randomizes the flashcards from the category."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Use case resumes from step 4."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 4a. The user answers the question."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * 4a1. QuickCache shows the next question to answer."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * Step 4a. is repeated until all questions in the category is answered."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Use case resumes from step 5."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 4b. The user cancels the test midway."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * Use case resumes from step 5."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 4c. The user runs out of time midway."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  * Use case resumes from step 5."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* 4d. The user closes QuickCache"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC07 - Update flashcard save file**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Actor: QuickCache**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "1. QuickCache accepts update request"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "2. QuickCache updates save file"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* 2a. No save file."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  * 3a1. QuickCache creates new save file."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* 2b. Save file corrupted."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  * 2b1. QuickCache shows an error message."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  * 2b2. QuickCache creates new save file."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC08 - Import flashcard data file**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "1. User requests to import data file"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "2. QuickCache requests for the file location"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "3. User specifies the file location"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "4. QuickCache imports the file"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* 3a. File not found."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  * 3a1. QuickCache shows an error message."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* 3b. Data file corrupted"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  * 3b1. QuickCache shows an error message."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC09 - Add tags during creation of a Flashcard**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "1. User creates a flashcard."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "2. QuickCache shows a list of existing tags."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "3. QuickCache asks the user to type in the tags one by one."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "4. User types in the tags one by one."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "5. User signals that he is finished."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "6. QuickCache adds the tags to the flashcard."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* 3a. User wishes to remove a tag that he entered."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "  * 3a1. User inputs the remove command to remove the tag."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* 5a. Some of the tags are new tags"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "  * 5a1. QuickCache stores and remembers the tags."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC10 - Deleting a tag category**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "1. User wants to remove a tag category."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "2. User enters the delete tag command and the name of the tag to be deleted."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "3. QuickCache asks for a confirmation before deleting."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "4. User gives the confirmation."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "5. QuickCache deletes the tag from every Flashcard."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use cased ends."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* 4a. User does not give confirmation"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "  * 4a1. QuickCache does not delete anything."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC11 - Edit tags on an existing Flashcard**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "1. User wants to add tags on an existing Flashcard"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "2. QuickCache asks for the name of the new tag to be added."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "3. User enters the new tag name"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "4. QuickCache adds the tag onto the Flashcard"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* 1a. User wants to remove a tag"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1a1. User asks QuickCache to list out all the tags"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1a2. QuickCache lists out all the tags"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1a3. User enters the name of the tag to be removed"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1a4. QuickCache removes the tag from the Flashcard"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "* 1b. User wants to edit a tag"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1b1. User asks QuickCache to rename a tag"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1b2. QuickCache asks for the new name of the tag"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1b3. User enters the new name"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "  "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "\t* 1b4. QuickCache updates the tag with it\u0027s new name.  "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "**Use case: UC12 - Search for Flashcards based on Tags**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "**Actor: User**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "1. User enters the name of the tag he wants to search"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "2. QuickCache filters through all existing Flashcards based on the tag and returns a list of Flashcards."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Use case: UC13 - Open a single flashcard**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "FH-30"
        },
        "content": "1. User double clicks on QuickCache.jar"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "FH-30"
        },
        "content": "2. QuickCache opens and shows a list of flashcards"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "FH-30"
        },
        "content": "3. User forgets the options of a question"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "FH-30"
        },
        "content": "4. User requests to open a specific flashcard in the list"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "FH-30"
        },
        "content": "5. QuickCache opens the flashcard and displays the options"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\tUse case ends."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \tUse case ends."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* 4a. The given index is invalid."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  * 4a1. QuickCache shows an error message."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "****"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "2.  Should be able to hold up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "FH-30"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "1. Deleting a flashcard while all flashcards are being shown"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "   1. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "      Expected: First flashcard is deleted from the list. Details of the deleted flashcard shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "      Expected: No flashcard is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "FH-30"
        },
        "content": "1. _{ more test cases … }_"
      }
    ],
    "authorContributionMap": {
      "joshtyf": 89,
      "ChenXJ98": 93,
      "josiahkhoo": 79,
      "FH-30": 94,
      "-": 325,
      "GilbertTan19": 78
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "   1. Run the `Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "   e.g. `LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 35
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "QuickCache is a **desktop app for managing flashcards, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, QuickCache can get your flashcard management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "1. Download the latest `quickcache.jar` from [here](https://github.com/AY2021S1-CS2103T-T13-2/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your QuickCache."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "   * **`list`** : Lists all FlashCards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   * **`open`**`1` : Opens the 1st question shown in the current list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   * **`add`**`q/Plants give out ___ when they photosynthesise? ans/Oxygen t/Biology` :  Adds a open ended question `Plants give out ___ when they photosynthesise?` with answer `Oxygen` and tagged to `Biology`. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   * **`addmcq`**`q/Plants give out ___ when they photosynthesise? ans/1 c/Oxygen c/Carbon c/Carbon dioxide` :  Adds a multiple choice question `Plants give out ___ when they photosynthesise?` with 3 options `Oxygen`, `Carbon`, `Carbon dioxide` and with answer `Oxygen`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "   * **`test`**`1 ans/Example answer` : Tests the 1st question shown in the current list with `Example answer` as the answer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "   * **`find`** `find t/MCQ q/What CS2103T q/is t/GoodQuestion` : Finds all Flashcards tagged to the tag `MCQ` and `GoodQuestion` and has keywords `What`, `CS2103T` and `is` in question."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   * **`stats`**`1` : Show stats of the 1st question shown in the current list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd flashcard shown in the current list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "   * **`clear`** : Deletes all FlashCards."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "   * **`export`**`science-questions.json` : Exports current list of flashcard to a file named `science-questions.json` in the `export` folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "   * **`clearstats`**`1` : Clears the statistics of the 1st flashcard shown in the current list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  e.g. in `add n/ANSWER`, `ANSWER` is a parameter which can be used as `add n/Oxygen`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  e.g. if the command specifies `n/QUESTION p/ANSWER`, `p/ANSWER n/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Open a flashcard: `open`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Opens a specified flashcard from the list ."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `open INDEX`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Opens the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* `list` followed by `open 2` opens the 2nd flashcard in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Adding a flashcard with open ended question: `add`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "Adds a new flashcard to the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Format: `add q/QUESTION ans/ANSWER`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* `add q/Plants give out ___ when they photosynthesise? ans/Oxygen`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Adding a flashcard with multiple choice question: `addmcq`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Adds a new flashcard to the application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Format: `addmcq q/QUESTION ans/ANSWER c/first choice c/second choice ..`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* `addmcq q/Plants give out ___ when they photosynthesise? ans/1 c/Oxygen c/Carbon c/Carbon dioxide`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Edit a flashcard: `edit`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Edit a flashcard."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Format: `edit INDEX q/QUESTION ans/ANSWER c/first choice c/second choice ..`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* `edit 1 q/Plants give out ___ when they photosynthesise? ans/2 c/Oxygen c/Carbon c/Carbon dioxide`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "### Testing a flashcard : `test`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "Tests a specified flashcard from the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "#### Containing an open-ended question"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Format: `test INDEX ans/ANSWER`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* Tests the flashcard at the specified `INDEX`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index **must be a positive integer**  1, 2, 3, …"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* The `ANSWER` is case-insensitive."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* `list` followed by `test 1 a/Example answer` tests the 1st flashcard in the list with `Example answer` as the answer."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "#### Containing a multiple choice question"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Format: `test INDEX o/OPTION` "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* Tests the flashcard at the specified `INDEX`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index **must be a positive integer**  1, 2, 3, …"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* `CHOICE`(s) are displayed in the displayed choices list of the flashcard after `open INDEX` command is performed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* The `OPTION` refers to the index number of the specified `CHOICE`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The `OPTION` **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* `list` followed by `test 1 o/2` tests the 1st flashcard in the list with `OPTION 2` corresponding to the 2nd choice in the choices of the multiple choice question as the answer."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Displaying statistics for a Flashcard: `stats`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Shows the Pie Chart for a specified Flashcard in the list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Statistics include:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The number of times and the percentage the user answers the question associated with the flashcard correctly."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The number of times and the percentage the user answers the question associated with the flashcard incorrectly."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `stats INDEX`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Displays the statistics of a flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "### Listing all flashcards : `list`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Shows a list of all flashcards currently created."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Finding Flashcards by their tags and/or question: `find`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Finds all Flashcards based on their tags and/or question."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `find t/TAG1 t/TAG2 .. q/KEYWORD1 q/KEYWORD2 ..`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Do not need to use both `t/` and `q/` when finding a flashcard."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Tags are case-sensitive."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Words in spaced keywords will be treated as individual keywords. Example, the keyword `what is` will be treated as two keywords: `what` and `is`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Keywords do not need to match exact word. Example, the keyword `Wha` will pick up questions containing `What` as a word."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Example: `find t/MCQ q/What CS2103T q/is t/GoodQuestion` where `MCQ` and `GoodQuestion` are tags and `What`, `CS2103T` and `is` are keywords."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "### Deleting a flashcard : `delete`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "Deletes the specified flashcard from the list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* Deletes the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd flashcard in the list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Clearing a flashcard\u0027s statistics : `clearstats`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Clears the specified flashcard\u0027s statistics."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `clearstats INDEX`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* Clears the statistics of the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* `list` followed by `clearstats 2` clears the statistics of the 2nd flashcard in the list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Clears all entries from QuickCache."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "### Exporting a set of flashcards : `export`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Exports the current list of flashcard into a file."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Format: `export FILE_NAME`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* Exports the previously shown list of flashcards."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* The output file follows the name specified in `FILE_NAME`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "* The output file can be found in the `export` folder."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FH-30"
        },
        "content": "QuickCache data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous QuickCache home folder."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Open**| `open INDEX` \u003cbr\u003e e.g., `open 3`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "**Add** | `add q/QUESTION ans/ANSWER` \u003cbr\u003e e.g., `add q/Plants give out ___ when they photosynthesise? ans/Oxygen`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "**Addmcq** | `addmcq q/Plants give out ___ when they photosynthesise? ans/1 c/Oxygen c/Carbon c/Carbon dioxide`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**Test** | `test INDEX ans/ANSWER` (open-ended question)\u003cbr\u003e e.g., `test 2 a/lorem ipsum` \u003cbr\u003e `test INDEX o/OPTION` (multiple choice question)\u003cbr\u003e e.g., `test 3 o/1`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**stats** | `stats INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**ClearStats** | `clearstats INDEX`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FH-30"
        },
        "content": "**Find** | `find t/TAG1 t/TAG2 .. q/KEYWORD1 q/KEYWORD2 ..` \u003cbr\u003e e.g., `find t/MCQ q/What CS2103T q/is t/GoodQuestion`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "**Export** | `export FILE_NAME` \u003cbr\u003e e.g., `export science-questions.json`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 31,
      "ChenXJ98": 20,
      "joshtyf": 1,
      "FH-30": 63,
      "-": 123,
      "GilbertTan19": 20
    }
  },
  {
    "path": "docs/team/francis.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "title: Francis\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 46
    }
  },
  {
    "path": "docs/team/gilbert.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "title: Gilbert\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 46
    }
  },
  {
    "path": "docs/team/joshua.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "title: Joshua\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 46
    }
  },
  {
    "path": "docs/team/josiah.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "title: Josiah\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 46
    }
  },
  {
    "path": "docs/team/xingjian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "title: Xing Jian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 46
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "Simply add the following to [`FlashcardDisplay`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 391
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 248,
      "GilbertTan19": 1
    }
  },
  {
    "path": "src/main/java/quickcache/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/quickcache/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/quickcache/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.JsonQuickCacheStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.QuickCacheStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing QuickCache ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuickCacheStorage quickCacheStorage \u003d new JsonQuickCacheStorage(userPrefs.getQuickCacheFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        storage \u003d new StorageManager(quickCacheStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Optional\u003cReadOnlyQuickCache\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ReadOnlyQuickCache initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            addressBookOptional \u003d storage.readQuickCache();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample QuickCache\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleQuickCache);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty QuickCache\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            initialData \u003d new QuickCache();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty QuickCache\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            initialData \u003d new QuickCache();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty QuickCache\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        logger.info(\"Starting QuickCache \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping QuickCache ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 27,
      "FH-30": 14,
      "-": 144
    }
  },
  {
    "path": "src/main/java/quickcache/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/quickcache/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/quickcache/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 110
    }
  },
  {
    "path": "src/main/java/quickcache/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d flashcards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "ChenXJ98": 1,
      "-": 10,
      "GilbertTan19": 1
    }
  },
  {
    "path": "src/main/java/quickcache/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 19,
      "-": 98
    }
  },
  {
    "path": "src/main/java/quickcache/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 11,
      "-": 43
    }
  },
  {
    "path": "src/main/java/quickcache/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/quickcache/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/quickcache/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/quickcache/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/quickcache/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/quickcache/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/quickcache/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "-": 138
    }
  },
  {
    "path": "src/main/java/quickcache/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Ignores case, and full word match is not required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //not necessarily a full word match"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static boolean containsWordAsSubsetIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        //Solution below adapted from https://stackoverflow.com/questions/86780"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .anyMatch(wordInPreppedSentence -\u003e Pattern.compile(Pattern.quote(preppedWord),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        Pattern.CASE_INSENSITIVE).matcher(wordInPreppedSentence).find());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "FH-30": 30,
      "-": 66
    }
  },
  {
    "path": "src/main/java/quickcache/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the QuickCache."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @see Model#getQuickCache()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    ReadOnlyQuickCache getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of flashcards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 13,
      "FH-30": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/quickcache/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.QuickCacheParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final QuickCacheParser quickCacheParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCacheParser \u003d new QuickCacheParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Command command \u003d quickCacheParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            storage.saveQuickCache(model.getQuickCache());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ReadOnlyQuickCache getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return model.getQuickCache();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return model.getQuickCacheFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 13,
      "FH-30": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/AddMultipleChoiceQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddMultipleChoiceQuestionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmcq\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to QuickCache. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + PREFIX_QUESTION + \"Question \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + PREFIX_ANSWER + \"Answer \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"[\" + PREFIX_CHOICE + \"Choices]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in QuickCache\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public AddMultipleChoiceQuestionCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                || (other instanceof AddMultipleChoiceQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMultipleChoiceQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 9,
      "FH-30": 3,
      "GilbertTan19": 47
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/AddOpenEndedQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddOpenEndedQuestionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + PREFIX_QUESTION + \"Question \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + PREFIX_ANSWER + \"Answer \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in QuickCache\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public AddOpenEndedQuestionCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                || (other instanceof AddOpenEndedQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddOpenEndedQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 11,
      "FH-30": 1,
      "-": 32,
      "GilbertTan19": 13
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        model.setQuickCache(new QuickCache());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "FH-30": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/ClearStatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ClearStatsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearstats\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \": Clears the statistics of the flashcard identified by the index number \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"used in the displayed flashcard list.\\nParameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_CLEAR_STATISTICS_FLASHCARD_SUCCESS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \"Cleared statistics of Flashcard %d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ClearStatsCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcardToClearStatistics \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard updatedFlashcard \u003d flashcardToClearStatistics.getFlashcardAfterClearStatistics();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        model.setFlashcard(flashcardToClearStatistics, updatedFlashcard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_STATISTICS_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || (other instanceof ClearStatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClearStatsCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 54
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Feedback feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final boolean changeWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean changeWindow) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.feedbackToUser \u003d new Feedback(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.changeWindow \u003d changeWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields including {@code question} and {@code isCorrect}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean changeWindow,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                         Question question, Boolean isCorrect) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(feedbackToUser, showHelp, exit, changeWindow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.feedbackToUser.setQuestion(question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.feedbackToUser.setCorrect(isCorrect);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * {@code question}, {@code isCorrect}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult(String feedbackToUser, Question question, Boolean isCorrect, boolean changeWindow) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(feedbackToUser, false, false, changeWindow, question, isCorrect);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * {@code question}, {@code isCorrect}, {@code statistics}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult(String feedbackToUser, Question question, Statistics statistics) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(feedbackToUser, false, false, true, question, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.feedbackToUser.setStatistics(statistics);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return feedbackToUser.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Feedback getFeedback() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isChangeWindow() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return changeWindow;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 changeWindow \u003d\u003d otherCommandResult.changeWindow;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, changeWindow);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 32,
      "FH-30": 34,
      "-": 57
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "-": 40,
      "GilbertTan19": 7
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.OpenEndedQuestion;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"[\" + PREFIX_CHOICE + \"CHOICE]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + PREFIX_QUESTION + \"New Question \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + PREFIX_ANSWER + \"New Answer\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This Flashcard already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_DIFFERENT_TYPE \u003d \"The question do not have choices\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditCommand.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param editFlashcardDescriptor details to edit the person with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditCommand(Index index, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Creates and returns a {@code Flashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private static Flashcard createEditedFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isMcq \u003d flashcardToEdit.getQuestion() instanceof MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Statistics statistics \u003d flashcardToEdit.getStatistics();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question previousQuestion \u003d flashcardToEdit.getQuestion();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer updatedAnswer \u003d editFlashcardDescriptor.getAnswer()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                .orElse(flashcardToEdit.getAnswerOrIndex());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String updatedQuestion \u003d editFlashcardDescriptor.getQuestion()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                .orElse(flashcardToEdit.getQuestion().getValue());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Choice[] updatedChoices;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question finalQuestion;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (isMcq) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            updatedChoices \u003d editFlashcardDescriptor.getChoices()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    .orElse(flashcardToEdit.getQuestion().getChoices().get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            int ans;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ans \u003d Integer.parseInt(updatedAnswer.getValue());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                if (ans \u003e updatedChoices.length) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    throw new CommandException(\"Answer must be smaller than number of choices\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                logger.info(\"Answer is not integer\" + updatedAnswer.getValue());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                throw new CommandException(\"Answer must be integer\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Answer finalAnswer \u003d new Answer(updatedChoices[ans - 1].getValue());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            finalQuestion \u003d new MultipleChoiceQuestion(updatedQuestion, finalAnswer, updatedChoices);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            finalQuestion \u003d new OpenEndedQuestion(updatedQuestion, updatedAnswer);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new Flashcard(finalQuestion, updatedTags, statistics);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedFlashcard \u003d createEditedFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (flashcardToEdit.isSameFlashcard(editedFlashcard) || model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            logger.info(\"Edited flashcard is already inside the QuickCache\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        model.updateFilteredFlashcardList(Model.PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        private String question;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        private Choice[] choices;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public EditFlashcardDescriptor() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            setChoices(toCopy.choices);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return CollectionUtil.isAnyNonNull(answer, question, choices, tags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public Optional\u003cString\u003e getQuestion() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void setQuestion(String question) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         * Returns an unmodifiable String array."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code choices} is null."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        public Optional\u003cChoice[]\u003e getChoices() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return (choices !\u003d null) ? Optional.of(choices) : Optional.empty();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         * Sets {@code choices} to this object\u0027s {@code choices}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setChoices(Choice[] choices) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.choices \u003d choices;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (!(other instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            EditFlashcardDescriptor e \u003d (EditFlashcardDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    \u0026\u0026 getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    \u0026\u0026 getChoices().equals(e.getChoices())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 54,
      "joshtyf": 2,
      "FH-30": 1,
      "-": 98,
      "GilbertTan19": 101
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.JsonQuickCacheStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.QuickCacheStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Saves the last shown flashcard list into a specified file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        + \": Exports the last opened set of flashcards to specified file. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        + \"Parameters: FILE_NAME\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" CS2103_Flashcards.json\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_EXPORT_FLASHCARDS_SUCCESS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        \"Flashcards exported to: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_EXPORT_FLASHCARDS_FAILURE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        \"Flashcards were unable to be exported to: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExportCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final QuickCacheStorage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Instantiates an export command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param path Path representation of the destination to save last shown flashcard list to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public ExportCommand(Path path) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.storage \u003d new JsonQuickCacheStorage(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Instantiates an export command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param path Path representation of the destination to save last shown flashcard list to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param storage Storage class to use for saving operations."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public ExportCommand(Path path, QuickCacheStorage storage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Initialize storage at user defined file name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuickCache lastShownQuickCache \u003d new QuickCache();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        lastShownQuickCache.setFlashcards(lastShownList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            storage.saveQuickCache(lastShownQuickCache);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EXPORT_FLASHCARDS_SUCCESS, path));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            logger.info(\"Error saving into \" + path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EXPORT_FLASHCARDS_FAILURE, path));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (this \u003d\u003d object) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (object \u003d\u003d null || getClass() !\u003d object.getClass()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand that \u003d (ExportCommand) object;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Objects.equals(path, that.path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 88
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/Feedback.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class Feedback {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Boolean isCorrect;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private String body;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Feedback(String body) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Optional\u003cStatistics\u003e getStatistics() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Optional.ofNullable(statistics);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cString\u003e getBody() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Optional.ofNullable(body);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setBody(String body) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cBoolean\u003e isCorrect() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Optional.ofNullable(isCorrect);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void setCorrect(Boolean correct) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        isCorrect \u003d correct;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (this \u003d\u003d object) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (object \u003d\u003d null || getClass() !\u003d object.getClass()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Feedback feedback \u003d (Feedback) object;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return isCorrect \u003d\u003d feedback.isCorrect"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u0026\u0026 Objects.equals(body, feedback.body)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u0026\u0026 Objects.equals(question, feedback.question);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Objects.hash(isCorrect, body, question);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 67,
      "FH-30": 8
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Finds and lists all flashcards in QuickCache with tags equivalent to any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards whose question \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"and tags respectively contains all of\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"KEYWORD]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \" and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + PREFIX_QUESTION + \"What \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + PREFIX_TAG + \"CS2100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final FlashcardPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FindCommand(FlashcardPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "joshtyf": 31,
      "ChenXJ98": 1,
      "FH-30": 14
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Lists all flashcards in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        model.updateFilteredFlashcardList(Model.PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "FH-30": 20
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \": Opens the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_OPEN_FLASHCARD_SUCCESS \u003d \"Opened Flashcard: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public OpenCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcardToOpen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Question question \u003d flashcardToOpen.getQuestion();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_FLASHCARD_SUCCESS, flashcardToOpen), question,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                null, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "FH-30": 45
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/StatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \": Displays the statistics of the flashcard identified by the index number \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"used in the displayed flashcard list.\\nParameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_DISPLAY_STATISTICS_FLASHCARD_SUCCESS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \"Displayed statistics of Flashcard:\\n%1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public StatsCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcardToDisplayStatistics \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Question question \u003d flashcardToDisplayStatistics.getQuestion();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Statistics statistics \u003d flashcardToDisplayStatistics.getStatistics();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DISPLAY_STATISTICS_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                flashcardToDisplayStatistics), question, statistics);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || (other instanceof StatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StatsCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "FH-30": 47
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/TestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.nonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.OpenEndedQuestion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Option;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class TestCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Tests the specified question \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"by the index number used in the displayed question list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"[\" + PREFIX_OPTION + \"OPTION] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + PREFIX_ANSWER + \"Oxygen \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + PREFIX_OPTION + \" 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_FORMAT \u003d \"Expected Answer: %1$s\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"Your Answer: %2$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_NO_OPTION_PROVIDED \u003d \"An option must be chosen for \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"the multiple choice question.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_NO_ANSWER_PROVIDED \u003d \"An answer must be chosen for the open ended question.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_NO_OPTION_OR_ANSWER_PROVIDED \u003d \"An option or answer must be specified.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final TestAnswerDescriptor testAnswerDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Instantiates a test command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param index of the question in the filtered question list to test."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param testAnswerDescriptor details to test the question with."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public TestCommand(Index index, TestAnswerDescriptor testAnswerDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(testAnswerDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.testAnswerDescriptor \u003d testAnswerDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Creates a string output of the test result based on whether it is correct."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param correctAnswer of the question."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param userAnswer that is given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @return string output of the test result."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static String getTestResult(Answer correctAnswer, Answer userAnswer) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return String.format(MESSAGE_FORMAT, correctAnswer, userAnswer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcardToTest \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Question question \u003d flashcardToTest.getQuestion();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (question instanceof MultipleChoiceQuestion \u0026\u0026 testAnswerDescriptor.getOption().isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new CommandException(MESSAGE_NO_OPTION_PROVIDED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (question instanceof OpenEndedQuestion \u0026\u0026 testAnswerDescriptor.getAnswer().isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new CommandException(MESSAGE_NO_ANSWER_PROVIDED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (question instanceof MultipleChoiceQuestion) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            MultipleChoiceQuestion mcq \u003d (MultipleChoiceQuestion) question;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Option option \u003d testAnswerDescriptor.getOption().get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Index index \u003d option.getIndex();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            answer \u003d mcq.getAnswerFromIndex(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } else if (question instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            OpenEndedQuestion openEndedQuestion \u003d (OpenEndedQuestion) question;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            answer \u003d testAnswerDescriptor.getAnswer().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        boolean isCorrect \u003d flashcardToTest.checkAnswer(answer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Initialize an updated flashcard"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard updatedFlashcard;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            updatedFlashcard \u003d flashcardToTest.getFlashcardAfterTestSuccess();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            updatedFlashcard \u003d flashcardToTest.getFlashcardAfterTestFailure();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Updates the flashcardToTest with the new updatedFlashCard (with incremented test count)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assert nonNull(updatedFlashcard);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assert !flashcardToTest.equals(updatedFlashcard);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        model.setFlashcard(flashcardToTest, updatedFlashcard);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new CommandResult(getTestResult("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                flashcardToTest.getAnswer(), answer), question, isCorrect, true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (!(other instanceof TestCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand e \u003d (TestCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u0026\u0026 testAnswerDescriptor.equals(e.testAnswerDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Stores the details to test the question with. Can be used for both open ended and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * multiple choice questions."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static class TestAnswerDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        private Option option;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public TestAnswerDescriptor() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public Optional\u003cOption\u003e getOption() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return Optional.ofNullable(option);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setOption(Option option) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.option \u003d option;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            TestAnswerDescriptor that \u003d (TestAnswerDescriptor) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return Objects.equals(answer, that.answer)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    \u0026\u0026 Objects.equals(option, that.option);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return Objects.hash(answer, option);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public boolean isAnyFieldPresent() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return answer !\u003d null || option !\u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 182,
      "FH-30": 7
    }
  },
  {
    "path": "src/main/java/quickcache/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/AddMultipleChoiceQuestionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddMultipleChoiceQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddMultipleChoiceQuestionCommandParser implements Parser\u003cAddMultipleChoiceQuestionCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public AddMultipleChoiceQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_CHOICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    AddMultipleChoiceQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice[] choicesList \u003d ParserUtil.parseChoices(argMultimap.getAllValues(PREFIX_CHOICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String questionInString \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question question \u003d ParserUtil.parseMultipleChoiceQuestion("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                questionInString, argMultimap.getValue(PREFIX_ANSWER).get(), choicesList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new AddMultipleChoiceQuestionCommand(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 21,
      "joshtyf": 1,
      "GilbertTan19": 37
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/AddOpenEndedQuestionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddOpenEndedQuestionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddOpenEndedQuestionCommandParser implements Parser\u003cAddOpenEndedQuestionCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public AddOpenEndedQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    AddOpenEndedQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String questionInString \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question question \u003d ParserUtil.parseOpenEndedQuestion(questionInString,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new AddOpenEndedQuestionCommand(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 19,
      "-": 26,
      "GilbertTan19": 14
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 145
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/ClearStatsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.ClearStatsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Parses input arguments and creates a new ClearStatsCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ClearStatsCommandParser implements Parser\u003cClearStatsCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearStatsCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * and returns a ClearStatsCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ClearStatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new ClearStatsCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ClearStatsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 29
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"ans/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final Prefix PREFIX_CHOICE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Prefix PREFIX_OPTION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "-": 10,
      "GilbertTan19": 3
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "-": 22
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_ANSWER, CliSyntax.PREFIX_QUESTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        CliSyntax.PREFIX_CHOICE, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand.EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditCommand.EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            editFlashcardDescriptor.setQuestion("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    ParserUtil.parseQuestion(argMultimap.getValue(CliSyntax.PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            editFlashcardDescriptor.setAnswer("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    ParserUtil.parseAnswer(argMultimap.getValue(CliSyntax.PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_TAG)).ifPresent(editFlashcardDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        parseChoicesForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_CHOICE)).ifPresent("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                editFlashcardDescriptor::setChoices);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new EditCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e choices} into a {@code String[]} if {@code choices} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * If {@code choicess} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code String[]} containing zero choices."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    private Optional\u003cChoice[]\u003e parseChoicesForEdit(Collection\u003cString\u003e choices) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assert choices !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (choices.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d choices.size() \u003d\u003d 1 \u0026\u0026 choices.contains(\"\") ? Collections.emptySet() : choices;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return Optional.of(ParserUtil.parseChoices(tagSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 22,
      "joshtyf": 1,
      "-": 35,
      "GilbertTan19": 39
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/ExportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @throws ParseException If the given user input does not conform to the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            fileName \u003d ParserUtil.parseFileName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path path \u003d Paths.get(\"export\", fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new ExportCommand(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 37
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static boolean areSomePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!areSomePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_TAG)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cTag\u003e tagsToMatch \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e questionKeywords \u003d ParserUtil.parseKeywords(argMultimap.getAllValues(PREFIX_QUESTION));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert !(tagsToMatch.isEmpty() \u0026\u0026 questionKeywords.isEmpty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d getFlashcardPredicate(tagsToMatch, questionKeywords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private FlashcardPredicate getFlashcardPredicate(Set\u003cTag\u003e tagsToMatch, List\u003cString\u003e questionKeywords) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ArrayList\u003cPredicate\u003cFlashcard\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!tagsToMatch.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            predicates.add(new FlashcardContainsTagPredicate(tagsToMatch));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!questionKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            predicates.add(new QuestionContainsKeywordsPredicate(questionKeywords));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert !predicates.isEmpty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new FlashcardPredicate(predicates);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 5,
      "joshtyf": 20,
      "FH-30": 50
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new OpenCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "FH-30": 22
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddMultipleChoiceQuestionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.OpenEndedQuestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Option;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_NAME \u003d \"Filename is invalid.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static String parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return trimmedQuestion;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Parses a {@code List} of inputs into a a {@code List} of keywords."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws ParseException if any of the given input in the {@code inputList} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static List\u003cString\u003e parseKeywords(List\u003cString\u003e inputList) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(inputList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(8);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (String input: inputList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (!trimmedInput.matches(\"[^\\\\s].*\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new ParseException(\"Keyword should not be blank\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            keywords.addAll(Arrays.asList(input.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws ParseException if answer is less than choices and question is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static Question parseOpenEndedQuestion(String question, String answer) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!MultipleChoiceQuestion.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(MultipleChoiceQuestion.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer finalAnswer \u003d ParserUtil.parseAnswer(answer);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new OpenEndedQuestion(question, finalAnswer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws ParseException if answer is less than choices and question is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static Question parseMultipleChoiceQuestion(String question, String answer,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                                                       Choice[] choices) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!MultipleChoiceQuestion.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new ParseException(MultipleChoiceQuestion.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer tempAnswer \u003d ParserUtil.parseAnswer(answer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        int ans;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            ans \u003d Integer.parseInt(tempAnswer.getValue());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (ans \u003e choices.length) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                throw new ParseException(\"Answer must be smaller than number of choices\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(\"Answer must be integer\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer finalAnswer \u003d new Answer(choices[ans - 1].getValue());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new MultipleChoiceQuestion(trimmedQuestion, finalAnswer, choices);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public static Choice parseChoice(String choice) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(choice);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String trimmedChoice \u003d choice.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (!Choice.isValidChoice(trimmedChoice)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new ParseException(\"Choices cannot be empty\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return new Choice(trimmedChoice);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public static Choice[] parseChoices(Collection\u003cString\u003e choices) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(choices);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        List\u003cChoice\u003e choicesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        for (String choice : choices) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            choicesList.add(parseChoice(choice));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice[] result \u003d new Choice[choicesList.size()];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (result.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    AddMultipleChoiceQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        choicesList.toArray(result);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Parses {@code String option} into a {@code Option}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @throws ParseException if the given {@code option} is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static Option parseOption(String option) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(option);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String trimmedOption \u003d option.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (!Option.isValidOption(trimmedOption)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(Option.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new Option(trimmedOption);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Parses {@code String fileName} into a {@code String}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @throws ParseException if the given {@code fileName} is invalid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static String parseFileName(String fileName) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String trimmedFileName \u003d fileName.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (trimmedFileName.isEmpty()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILE_NAME);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            // Tries to determine if the file name is valid"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Paths.get(trimmedFileName);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILE_NAME);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return trimmedFileName;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 57,
      "joshtyf": 6,
      "FH-30": 21,
      "-": 52,
      "GilbertTan19": 103
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/QuickCacheParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddMultipleChoiceQuestionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddOpenEndedQuestionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.ClearStatsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class QuickCacheParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        case AddOpenEndedQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new AddOpenEndedQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        case AddMultipleChoiceQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new AddMultipleChoiceQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        case TestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return new TestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        case ClearStatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new ClearStatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 25,
      "joshtyf": 2,
      "FH-30": 15,
      "-": 51,
      "GilbertTan19": 6
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/StatsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * and returns a StatsCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new StatsCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "FH-30": 23
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/TestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Parses input arguments and creates a new EditCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class TestCommandParser implements Parser\u003cTestCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TestCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * and returns an TestCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public TestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ANSWER, PREFIX_OPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    TestCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor testAnswerDescriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            testAnswerDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPTION).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            testAnswerDescriptor.setOption(ParserUtil.parseOption(argMultimap.getValue(PREFIX_OPTION).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (!testAnswerDescriptor.isAnyFieldPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw new ParseException(TestCommand.MESSAGE_NO_OPTION_OR_ANSWER_PROVIDED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new TestCommand(index, testAnswerDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 52
    }
  },
  {
    "path": "src/main/java/quickcache/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/quickcache/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    Path getQuickCacheFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param quickCacheFilePath"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    void setQuickCacheFilePath(Path quickCacheFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns the QuickCache"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    ReadOnlyQuickCache getQuickCache();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param quickCache"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    void setQuickCache(ReadOnlyQuickCache quickCache);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The flashcard must exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code flashcard} must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The Flashcard of {@code editedFlashcard} must not be the same as another existing Flashcard in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 22,
      "FH-30": 10,
      "-": 42,
      "GilbertTan19": 25
    }
  },
  {
    "path": "src/main/java/quickcache/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final QuickCache quickCache;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Initializes a ModelManager with the given quickCache and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ModelManager(ReadOnlyQuickCache quickCache, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CollectionUtil.requireAllNonNull(quickCache, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        logger.fine(\"Initializing with quick cache: \" + quickCache + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.quickCache \u003d new QuickCache(quickCache);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.quickCache.getFlashcardList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(new QuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Path getQuickCacheFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return userPrefs.getQuickCacheFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void setQuickCacheFilePath(Path quickCacheFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(quickCacheFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        userPrefs.setQuickCacheFilePath(quickCacheFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuickCache \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public ReadOnlyQuickCache getQuickCache() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return quickCache;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setQuickCache(ReadOnlyQuickCache quickCache) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.quickCache.resetData(quickCache);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return quickCache.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache.removeFlashcard(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        quickCache.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return quickCache.equals(other.quickCache)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 18,
      "ChenXJ98": 2,
      "FH-30": 22,
      "-": 87,
      "GilbertTan19": 20
    }
  },
  {
    "path": "src/main/java/quickcache/model/QuickCache.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class QuickCache implements ReadOnlyQuickCache {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public QuickCache() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an QuickCache using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public QuickCache(ReadOnlyQuickCache toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Resets the existing data of this {@code QuickCache} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void resetData(ReadOnlyQuickCache newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds a flashcard to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void addFlashcard(Flashcard f) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        flashcards.add(f);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Removes {@code key} from this {@code QuickCache}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || (other instanceof QuickCache // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 flashcards.equals(((QuickCache) other).flashcards));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "FH-30": 14,
      "-": 57,
      "GilbertTan19": 43
    }
  },
  {
    "path": "src/main/java/quickcache/model/ReadOnlyQuickCache.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public interface ReadOnlyQuickCache {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 1,
      "-": 8,
      "GilbertTan19": 2
    }
  },
  {
    "path": "src/main/java/quickcache/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Path getQuickCacheFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/quickcache/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private Path quickCacheFilePath \u003d Paths.get(\"data\", \"quickcache.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        setQuickCacheFilePath(newUserPrefs.getQuickCacheFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Path getQuickCacheFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return quickCacheFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setQuickCacheFilePath(Path quickCacheFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(quickCacheFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.quickCacheFilePath \u003d quickCacheFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u0026\u0026 quickCacheFilePath.equals(o.quickCacheFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Objects.hash(guiSettings, quickCacheFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + quickCacheFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 14,
      "-": 74
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Answer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Represents an Answer in a flashcard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Answer can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Instantiates an Answer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param answer to be set."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        AppUtil.checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.value \u003d normalizeAnswer(answer);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns if a given string is a valid answer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Checks the given userAnswer with the correct answer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * This is done by strictly comparing lower case string equality."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @param userAnswer the user\u0027s answer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return true if the user\u0027s answer is equal to the actual answer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean checkAnswer(Answer userAnswer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return this.equals(userAnswer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Lower cases the answer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param answer to be normalized."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @return lower-cased answer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private String normalizeAnswer(String answer) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return answer.toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Gets the correct value of the answer ."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @return the correct value of the answer ."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (this \u003d\u003d object) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        } else if (object instanceof Answer) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Answer temp \u003d (Answer) object;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return this.toString().equals(temp.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 47,
      "joshtyf": 23,
      "GilbertTan19": 11
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Choice.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Represents a MCQ choice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class Choice {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            \"Choices should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Instantiates a Choice."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param choice to be set."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Choice(String choice) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(choice);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        checkArgument(isValidChoice(choice), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.value \u003d choice;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static boolean isValidChoice(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Gets the value associated with the Choice."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @return the value associated with the Choice."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Compares this choice to the specified object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * The result is true if and only if the argument is not null and is a"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Choice object that has the same contents as this object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @param o the object to compare this Choice against"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return {@code true} if the given object represents a Choice equivalent to this choice, false otherwise"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        if (o instanceof Choice) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            Choice other \u003d (Choice) o;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return value.equals(other.value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 34,
      "joshtyf": 33
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Represents a Flashcard. Each Flashcard will contain one question and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * one answer. In addition, it can have multiple tags."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create flashcard object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param question Question of the flashcard."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tags Tags of the flashcard."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Flashcard(Question question, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * A constructor to create flashcard object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param question Question of the flashcard."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param tags Tags of the flashcard."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param statistics Statistics of the flashcard."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Flashcard(Question question, Set\u003cTag\u003e tags, Statistics statistics) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Gets the question."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return the question."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Checks the given userAnswer with the correct answer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @param userAnswer the user\u0027s answer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return {@code true} if the user\u0027s answer is equal to the actual answer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean checkAnswer(Answer userAnswer) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return question.checkAnswer(userAnswer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Gets the tags of this flashcard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return a list of tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.question.getAnswer();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Answer getAnswerOrIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.question.getAnswerOrIndex();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return String.format(\"Question:\\n%s\\nAnswer:\\n%s\", question.getFormatQuestion(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                question.getAnswer().getValue());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A method to check if otherFlashcard is the same with the current one."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                \u0026\u0026 otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Checks if this flashcard contains all the tags in the given set."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param setOfTags the tags to be checked."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return {@code true} if this flashcard has all the tags in the set."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean containsAllTags(Set\u003cTag\u003e setOfTags) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tags.containsAll(setOfTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A method to check if otherFlashcard is the same with the current one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object otherFlashcard) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (otherFlashcard instanceof Flashcard) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Flashcard other \u003d (Flashcard) otherFlashcard;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return other.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                    \u0026\u0026 other.getTags().equals(getTags())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u0026\u0026 other.getStatistics().equals(getStatistics());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Flashcard getFlashcardAfterClearStatistics() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new Flashcard(question, tags, new Statistics());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Flashcard getFlashcardAfterTestSuccess() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Statistics newStats \u003d statistics.incrementTimesTested().incrementTimesTestedCorrect();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new Flashcard(question, tags, newStats);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Flashcard getFlashcardAfterTestFailure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Statistics newStats \u003d statistics.incrementTimesTested();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new Flashcard(question, tags, newStats);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 29,
      "joshtyf": 41,
      "FH-30": 17,
      "GilbertTan19": 54
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/FlashcardContainsTagPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Tests that the {@code Flashcards}\u0027s {@code Tag}s matches any of the tags given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class FlashcardContainsTagPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Set\u003cTag\u003e tagsToMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardContainsTagPredicate(Set\u003cTag\u003e tagsToMatch) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tagsToMatch \u003d tagsToMatch;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return flashcard.containsAllTags(tagsToMatch);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                || (other instanceof FlashcardContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 tagsToMatch.equals(((FlashcardContainsTagPredicate) other).tagsToMatch)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "joshtyf": 18,
      "FH-30": 9
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/FlashcardPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Compiles all predicates for testing {@code Flashcard}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FlashcardPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final List\u003cPredicate\u003cFlashcard\u003e\u003e predicates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Predicate\u003cFlashcard\u003e predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an an instance of a {@code FLashcardPredicate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param predicates a list of predicates for testing flashcard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardPredicate(List\u003cPredicate\u003cFlashcard\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.predicate \u003d predicates.stream().reduce(Predicate::and).get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return predicate.test(flashcard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || (other instanceof FlashcardPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 predicates.equals(((FlashcardPredicate) other).predicates)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 35
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/MultipleChoiceQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Represents a mcq question."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Options for the mcq will be stored in an array while the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * question itself will be stored as a {@code String}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class MultipleChoiceQuestion implements Question {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String TYPE \u003d \"MCQ\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"MultipleChoiceQuestion can take any values, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    private final Choice[] choices;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create MCQ Question object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public MultipleChoiceQuestion(String question, Answer answer, Choice... choices) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.value \u003d question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        this.choices \u003d choices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * A constructor to create MCQ Question object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public MultipleChoiceQuestion(String question, List\u003cString\u003e choices, Answer answer) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.value \u003d question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        List\u003cChoice\u003e choicesArray \u003d new ArrayList\u003cChoice\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (String c : choices) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            Choice choice \u003d new Choice(c);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            choicesArray.add(choice);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Choice[] newChoicesArray \u003d choicesArray.toArray(new Choice[choices.size()]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (int i \u003d 0; i \u003c choices.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            newChoicesArray[i] \u003d new Choice(choices.get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.choices \u003d newChoicesArray;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Question copyQuestion(String question, Answer answer) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new MultipleChoiceQuestion(question, answer, this.choices);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public Optional\u003cChoice[]\u003e getChoices() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return Optional.ofNullable(this.choices);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Answer getAnswerOrIndex() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        for (int i \u003d 0; i \u003c choices.length; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (this.answer.getValue().toLowerCase().equals(choices[i].getValue().toLowerCase())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return new Answer(String.valueOf(i + 1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean checkAnswer(Answer answer) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.answer.checkAnswer(answer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getFormatQuestion() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(value + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (Choice choice : choices) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            sb.append(i).append(\". \").append(choice.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Retrieves the option from {@code index} as an Answer."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param index to get option from."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @return option as an {@code Answer}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Answer getAnswerFromIndex(Index index) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice \u003d choices[index.getZeroBased()];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new Answer(choice.getValue());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (o instanceof MultipleChoiceQuestion) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            MultipleChoiceQuestion temp \u003d (MultipleChoiceQuestion) o;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return this.toString().equals(temp.toString())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    \u0026\u0026 Arrays.equals(this.getChoices().get(), temp.getChoices().get())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    \u0026\u0026 this.answer.equals(temp.answer);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 25,
      "joshtyf": 17,
      "ChenXJ98": 26,
      "FH-30": 5,
      "GilbertTan19": 57
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/OpenEndedQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Represents an open ended question."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public class OpenEndedQuestion implements Question {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String TYPE \u003d \"OEQ\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"OpenEndedQuestion can take any values, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create OpenEndedQuestion object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public OpenEndedQuestion(String question, Answer answer) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.value \u003d question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Question copyQuestion(String question, Answer answer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getFormatQuestion() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return this.getValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            OpenEndedQuestion temp \u003d (OpenEndedQuestion) o;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return this.toString().equals(temp.toString())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    \u0026\u0026 this.answer.equals(temp.answer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public Optional\u003cChoice[]\u003e getChoices() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Answer getAnswerOrIndex() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean checkAnswer(Answer answer) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.answer.checkAnswer(answer);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 11,
      "joshtyf": 12,
      "ChenXJ98": 6,
      "GilbertTan19": 52
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Option.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.AppUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Represents a numerical option."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Can be transposed into an {@code Index} to index"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * the choice in a multiple choice question."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class Option {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Option should only be numeric, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * A constructor to create an Option."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param option string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Option(String option) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(option);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        AppUtil.checkArgument(isValidOption(option), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.value \u003d option;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static boolean isValidOption(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Option option1 \u003d (Option) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Objects.equals(value, option1.value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return \"Option: \" + value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Transposes the option given into an {@code Index}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @return option in {@code Index}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(value));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 67
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " * Represents a question."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshtyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "public interface Question {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            \"Questions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    String getValue();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    String getFormatQuestion();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    Optional\u003cChoice[]\u003e getChoices();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    Answer getAnswer();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    Answer getAnswerOrIndex();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    boolean checkAnswer(Answer answer);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Question copyQuestion(String question, Answer answer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 5,
      "joshtyf": 7,
      "ChenXJ98": 1,
      "GilbertTan19": 20
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/QuestionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Tests that a {@code Flashcards}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        StringUtil.containsWordAsSubsetIgnoreCase(flashcard.getQuestion().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "FH-30": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * A class to store information of a flashcard\u0027s statistics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String TIMES_TESTED_CONSTRAINTS \u003d \"Times tested should be a positive integer\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String TIMES_TESTED_LESS_THAN_TIMES_TESTED_CORRECT_CONSTRAINT \u003d \"Times tested should be more \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + \"than times tested correctly\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final int timesTested;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final int timesTestedCorrect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * A constructor to create statistics object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.timesTested \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.timesTestedCorrect \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * A constructor to create statistics object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param timesTested Number of times the flashcard is tested."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param timesTestedCorrect Number of times the flashcard is tested correctly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Statistics(int timesTested, int timesTestedCorrect) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (timesTested \u003c 0 || timesTestedCorrect \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new IllegalArgumentException(TIMES_TESTED_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (timesTested \u003c timesTestedCorrect) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new IllegalArgumentException(TIMES_TESTED_LESS_THAN_TIMES_TESTED_CORRECT_CONSTRAINT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.timesTested \u003d timesTested;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.timesTestedCorrect \u003d timesTestedCorrect;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Statistics incrementTimesTested() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new Statistics(timesTested + 1, timesTestedCorrect);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Statistics incrementTimesTestedCorrect() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new Statistics(timesTested, timesTestedCorrect + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public int getTimesTested() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return timesTested;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public int getTimesTestedCorrect() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return timesTestedCorrect;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Get the rate at which the user answers the flashcard\u0027s question correctly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The rate at which the user answers the flashcard\u0027s question correctly."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public double getCorrectRate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (timesTested \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return round(((double) timesTestedCorrect) / timesTested * 100, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // Solution below adapted from https://stackoverflow.com/questions/2808535"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private double round(double value, int places) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (places \u003c 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        BigDecimal bd \u003d BigDecimal.valueOf(value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        bd \u003d bd.setScale(places, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return bd.doubleValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * A method to check if otherStatistics is the same with the current one."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean equals(Object otherStatistics) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (otherStatistics \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (otherStatistics instanceof Statistics) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Statistics other \u003d (Statistics) otherStatistics;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return other.getTimesTested() \u003d\u003d getTimesTested()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u0026\u0026 other.getTimesTestedCorrect() \u003d\u003d getTimesTestedCorrect();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return String.format(\"Times Correct: %d\\nTimes Tested: %d\\nCorrect Rate: %.2f%%\\n\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                timesTestedCorrect, timesTested, getCorrectRate());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "FH-30": 101
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Represents a Tag in QuickCache."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        + \"No spaces allowed. Cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "joshtyf": 2,
      "FH-30": 2,
      "-": 49,
      "GilbertTan19": 3
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * As such, adding and updating of Flashcard uses Flashcard#isSameFlashcard(Flashcard) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * so as to ensure that the person being added or updated is unique"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * in terms of identity in the UniqueFlashcardList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * However, the removal of a Flashcard uses Flashcard#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Replaces the Flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The Flashcard of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 11,
      "ChenXJ98": 6,
      "GilbertTan19": 124
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "GilbertTan19": 10
    }
  },
  {
    "path": "src/main/java/quickcache/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "GilbertTan19": 5
    }
  },
  {
    "path": "src/main/java/quickcache/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Contains utility methods for populating {@code QuickCache} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static Flashcard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice1 \u003d new Choice(\"Software Engineering module for NUS students\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice2 \u003d new Choice(\"A non-compulsory module for NUS Computer Science students\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice3 \u003d new Choice(\"A module that can be S/Ued\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice4 \u003d new Choice(\"A module that doesn\u0027t involve a brown field project\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice5 \u003d new Choice(\"Computer Organization module for NUS students\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice6 \u003d new Choice(\"A non-compulsory module for NUS Computer Science students\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice7 \u003d new Choice(\"A module that can be S/Ued\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice8 \u003d new Choice(\"A module that doesn\u0027t involve assembly language\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice9 \u003d new Choice(\"Introductory module to computer networks for NUS students\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice10 \u003d new Choice(\"A non-compulsory module for NUS Computer Science students\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice11 \u003d new Choice(\"A module that can be S/Ued\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice choice12 \u003d new Choice(\"A module that doesn\u0027t involve TCP\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new Flashcard[]{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new Flashcard(new MultipleChoiceQuestion(\"What is CS2103T?\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    new Answer(\"Software Engineering module for NUS students\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice2,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice3,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice4"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            ), getTagSet(\"MCQ\", \"GoodQuestion\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new Flashcard(new MultipleChoiceQuestion(\"What is CS2100?\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    new Answer(\"Computer Organization module for NUS students\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice5,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice6,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice7,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice8"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            ), getTagSet(\"MCQ\", \"Assembly\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new Flashcard(new MultipleChoiceQuestion(\"What is CS2105?\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    new Answer(\"Introductory module to computer networks for NUS students\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice9,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice10,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice11,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "                choice12"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            ), getTagSet(\"MCQ\", \"TCPforLife\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static ReadOnlyQuickCache getSampleQuickCache() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCache sampleQc \u003d new QuickCache();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (Flashcard sampleFlashcard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            sampleQc.addFlashcard(sampleFlashcard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return sampleQc;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "joshtyf": 24,
      "FH-30": 23,
      "-": 13,
      "GilbertTan19": 6
    }
  },
  {
    "path": "src/main/java/quickcache/storage/JsonAdaptedQuickCache.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.OpenEndedQuestion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class JsonAdaptedQuickCache {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String INVALID_TYPE \u003d \"Invalid flashcard type!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final List\u003cString\u003e choices;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public JsonAdaptedQuickCache(@JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                                 @JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                                 @JsonProperty(\"choices\") List\u003cString\u003e choices,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                                 @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                                 @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                                 @JsonProperty(\"statistics\") Statistics statistics) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.choices \u003d choices;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public JsonAdaptedQuickCache(Flashcard source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (source.getQuestion() instanceof MultipleChoiceQuestion) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.type \u003d MultipleChoiceQuestion.TYPE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (source.getQuestion() instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            this.type \u003d OpenEndedQuestion.TYPE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.type \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.question \u003d source.getQuestion().getValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (source.getQuestion().getChoices().isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.choices \u003d Arrays.stream(source.getQuestion().getChoices().get()).map(Choice::toString)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.choices \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        answer \u003d source.getAnswer().getValue();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tagged.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.statistics \u003d source.getStatistics();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        if (type \u003d\u003d null || ((!(type.equals(MultipleChoiceQuestion.TYPE)))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u0026\u0026 (!(type.equals(OpenEndedQuestion.TYPE))))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (type.equals(MultipleChoiceQuestion.TYPE)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (!MultipleChoiceQuestion.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (choices \u003d\u003d null || choices.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Choice.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            final Question modelQuestion \u003d new MultipleChoiceQuestion(question, choices, modelAnswer);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            final Statistics modelStatistics \u003d statistics;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new Flashcard(modelQuestion, modelTags, modelStatistics);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (type.equals(OpenEndedQuestion.TYPE)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (!OpenEndedQuestion.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            final Question modelQuestion \u003d new OpenEndedQuestion(question, modelAnswer);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            final Statistics modelStatistics \u003d statistics;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new Flashcard(modelQuestion, modelTags, modelStatistics);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_TYPE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 42,
      "ChenXJ98": 64,
      "FH-30": 8,
      "-": 52,
      "GilbertTan19": 10
    }
  },
  {
    "path": "src/main/java/quickcache/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/quickcache/storage/JsonQuickCacheStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * A class to access QuickCache data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class JsonQuickCacheStorage implements QuickCacheStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuickCacheStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public JsonQuickCacheStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Path getQuickCacheFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cReadOnlyQuickCache\u003e readQuickCache() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return readQuickCache(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Similar to {@link #readQuickCache()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cReadOnlyQuickCache\u003e readQuickCache(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Optional\u003cJsonSerializableQuickCache\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                filePath, JsonSerializableQuickCache.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void saveQuickCache(ReadOnlyQuickCache quickCache) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        saveQuickCache(quickCache, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Similar to {@link #saveQuickCache(ReadOnlyQuickCache)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void saveQuickCache(ReadOnlyQuickCache quickCache, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(quickCache);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuickCache(quickCache), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 25,
      "ChenXJ98": 56
    }
  },
  {
    "path": "src/main/java/quickcache/storage/JsonSerializableQuickCache.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * An Immutable QuickCache that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "@JsonRootName(value \u003d \"quickCache\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class JsonSerializableQuickCache {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcards list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final List\u003cJsonAdaptedQuickCache\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Constructs a {@code JsonSerializableQuickCache} with the given flashcards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public JsonSerializableQuickCache(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedQuickCache\u003e flashcards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Converts a given {@code ReadOnlyQuickCache} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableQuickCache}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public JsonSerializableQuickCache(ReadOnlyQuickCache source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        flashcards.addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            source.getFlashcardList().stream().map(JsonAdaptedQuickCache::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Converts this quick cache into the model\u0027s {@code QuickCache} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public QuickCache toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        QuickCache quickCache \u003d new QuickCache();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        for (JsonAdaptedQuickCache jsonAdaptedQuickCache : flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedQuickCache.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (quickCache.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            quickCache.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return quickCache;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 18,
      "ChenXJ98": 20,
      "FH-30": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/quickcache/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "-": 41
    }
  },
  {
    "path": "src/main/java/quickcache/storage/QuickCacheStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a storage for {@link QuickCache}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public interface QuickCacheStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Path getQuickCacheFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns QuickCache data as a {@link ReadOnlyQuickCache}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Optional\u003cReadOnlyQuickCache\u003e readQuickCache() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @see #getQuickCacheFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Optional\u003cReadOnlyQuickCache\u003e readQuickCache(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Saves the given {@link ReadOnlyQuickCache} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @param quickCache cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    void saveQuickCache(ReadOnlyQuickCache quickCache) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @see #saveQuickCache(ReadOnlyQuickCache)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    void saveQuickCache(ReadOnlyQuickCache quickCache, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 15,
      "FH-30": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/quickcache/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public interface Storage extends QuickCacheStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Path getQuickCacheFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    Optional\u003cReadOnlyQuickCache\u003e readQuickCache() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    void saveQuickCache(ReadOnlyQuickCache quickCache) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/quickcache/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Manages storage of QuickCache data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final QuickCacheStorage quickCacheStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code QuickCacheStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public StorageManager(QuickCacheStorage quickCacheStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        this.quickCacheStorage \u003d quickCacheStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuickCache methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Path getQuickCacheFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return quickCacheStorage.getQuickCacheFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cReadOnlyQuickCache\u003e readQuickCache() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return readQuickCache(quickCacheStorage.getQuickCacheFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Optional\u003cReadOnlyQuickCache\u003e readQuickCache(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return quickCacheStorage.readQuickCache(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void saveQuickCache(ReadOnlyQuickCache quickCache) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        saveQuickCache(quickCache, quickCacheStorage.getQuickCacheFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void saveQuickCache(ReadOnlyQuickCache quickCache, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        quickCacheStorage.saveQuickCache(quickCache, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 21,
      "FH-30": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/quickcache/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/java/quickcache/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private List\u003cString\u003e pastCommands;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int pointer \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.pastCommands \u003d new ArrayList\u003c\u003e(16);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        pastCommands.add(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            String input \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            updatePointerAndPastCommandsList(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            commandExecutor.execute(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Handles the updating of past commands and pointer position after executing a particular input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param input The input executed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void updatePointerAndPastCommandsList(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (pointer \u003c pastCommands.size() - 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            pointer \u003d pastCommands.size() - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!input.isBlank()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            this.pastCommands.set(pastCommands.size() - 1, input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            pastCommands.add(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            pointer++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Handles the Up and Down arrow buttons pressed events."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void handleKeyEvent() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            switch(event.getCode()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                decrementPointer();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                incrementPointer();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                // Do Nothing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Move pointer one position front"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void incrementPointer() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (pointer \u003c pastCommands.size() - 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            pointer++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            String textToDisplay \u003d pastCommands.get(pointer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            commandTextField.setText(textToDisplay);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            commandTextField.positionCaret(textToDisplay.length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Move pointer one position back"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void decrementPointer() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (pointer \u003e 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            pointer--;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            String textToDisplay \u003d pastCommands.get(pointer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            commandTextField.setText(textToDisplay);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            commandTextField.positionCaret(textToDisplay.length());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "FH-30": 73,
      "-": 70
    }
  },
  {
    "path": "src/main/java/quickcache/ui/FlashcardDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FlashcardDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String FXML \u003d \"FlashcardDisplay.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on QuickCache level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a {@code FLashCardDisplay} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardDisplay(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        question.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        flashcard.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!(other instanceof FlashcardDisplay)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardDisplay card \u003d (FlashcardDisplay) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 14,
      "-": 52
    }
  },
  {
    "path": "src/main/java/quickcache/ui/FlashcardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a {@code FlashcardListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardDisplay}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                setGraphic(new FlashcardDisplay(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "FH-30": 46
    }
  },
  {
    "path": "src/main/java/quickcache/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 98
    }
  },
  {
    "path": "src/main/java/quickcache/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.Feedback;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private OptionListPanel optionListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private QuestionDisplay questionDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private PieChartDisplay pieChartDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private boolean isOnChangedWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private VBox mainPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private StackPane displayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isOnChangedWindow \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Changes the content of the placeHolders of this window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param feedbackToUser the feedback describing what to display to the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void handleChangeWindow(Feedback feedbackToUser) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Statistics is null if there is no statistics to display to the user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        feedbackToUser.getStatistics().ifPresentOrElse((statistics -\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                changeInnerPartsToStatisticsWindow(feedbackToUser)), () -\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                changeInnerPartsToFlashcardWindow(feedbackToUser));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isOnChangedWindow \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Changes the content of the placeHolders of this window to display the statistics of a flashcard."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param feedbackToUser the feedback describing what to display to the user."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void changeInnerPartsToStatisticsWindow(Feedback feedbackToUser) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        pieChartDisplay \u003d new PieChartDisplay();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().add(pieChartDisplay.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        pieChartDisplay.displayStatistics(feedbackToUser);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Changes the content of the placeHolders of this window to display an opened flashcard."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param feedbackToUser the feedback describing what to display to the user."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void changeInnerPartsToFlashcardWindow(Feedback feedbackToUser) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Optional\u003cQuestion\u003e questionToDisplay \u003d feedbackToUser.getQuestion();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        questionDisplay \u003d new QuestionDisplay();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().add(questionDisplay.getRoot());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // display the question"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        questionDisplay.setQuestion(questionToDisplay.map(Question::getValue)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .orElse(\"There is no question to display\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // initialize question\u0027s options into VBox"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        optionListPanel \u003d new OptionListPanel(questionToDisplay.map(question -\u003e {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (question instanceof MultipleChoiceQuestion) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                return FXCollections.observableList(Arrays.stream(question"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        .getChoices().orElseGet(() -\u003e new Choice[0])).map("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                        Choice::toString).collect(Collectors.toCollection(ArrayList::new)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                return FXCollections.observableArrayList(\"Open Ended Question has no options\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }).get()); // get() will never throw an exception as null will never be returned"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().add(optionListPanel.getRoot());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // isCorrect() is not null only when test command is called"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        feedbackToUser.isCorrect().ifPresent(isCorrect -\u003e {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            questionDisplay.showOutcome(feedbackToUser.toString(), isCorrect);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        });"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Reverse changes to the content of the window\u0027s placeholders to the default content."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void reverseWindowChange() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        listPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isOnChangedWindow \u003d false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardListPanel getFlashcardListPanel() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (commandResult.isChangeWindow()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                handleChangeWindow(commandResult.getFeedback());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else if (isOnChangedWindow) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                reverseWindowChange();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (isOnChangedWindow) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                reverseWindowChange();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 22,
      "FH-30": 111,
      "-": 170
    }
  },
  {
    "path": "src/main/java/quickcache/ui/OptionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * An UI component that displays information of a {@code option}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class OptionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String FXML \u003d \"OptionCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on QuickCache level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public final String option;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Label optionPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a {@code OptionCard} with the given {@code Option} and index to display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public OptionCard(String option, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.option \u003d option;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        optionPlaceholder.setText(option);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!(other instanceof OptionCard)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        OptionCard card \u003d (OptionCard) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u0026\u0026 option.equals(card.option);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "FH-30": 58
    }
  },
  {
    "path": "src/main/java/quickcache/ui/OptionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Panel containing the list of options."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class OptionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String FXML \u003d \"OptionListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OptionListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private ListView\u003cString\u003e optionListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a {@code OptionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public OptionListPanel(ObservableList\u003cString\u003e optionList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        optionListView.setItems(optionList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        optionListView.setCellFactory(listView -\u003e new OptionListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Option} using an {@code OptionCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    class OptionListViewCell extends ListCell\u003cString\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        protected void updateItem(String option, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            super.updateItem(option, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (empty || option \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                setGraphic(new OptionCard(option, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 46
    }
  },
  {
    "path": "src/main/java/quickcache/ui/PieChartDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.Feedback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class PieChartDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String FXML \u003d \"PieChartDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PieChartDisplay.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private PieChart pieChartDisplay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a {@code PieChartDisplay}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public PieChartDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays the statistics of the flashcard to the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param feedbackToUser the feedback to be displayed to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void displayStatistics(Feedback feedbackToUser) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int timesTested \u003d feedbackToUser.getStatistics().map(Statistics::getTimesTested).orElse(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int timesTestedCorrect \u003d feedbackToUser.getStatistics().map(Statistics::getTimesTestedCorrect).orElse(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        double correctRate \u003d feedbackToUser.getStatistics().map(Statistics::getCorrectRate).orElse(0.0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        double incorrectRate \u003d correctRate \u003d\u003d 0.0 ? 0.0 : 100.0 - correctRate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        pieChartDisplay.setTitle(feedbackToUser.getQuestion().map(Object::toString)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .orElseGet(() -\u003e \"No Question to display\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        PieChart.Data correctPie \u003d new PieChart.Data(\"Correct (\" + correctRate + \"%)\", timesTestedCorrect);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        PieChart.Data wrongPie \u003d new PieChart.Data("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"Incorrect (\" + incorrectRate + \"%)\", timesTested - timesTestedCorrect);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e data \u003d FXCollections.observableArrayList(correctPie, wrongPie);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        pieChartDisplay.getData().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        pieChartDisplay.setData(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        correctPie.getNode().setStyle(\"-fx-pie-color: #228C22;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        wrongPie.getNode().setStyle(\"-fx-pie-color: #C62828;\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        //Solution below adapted from https://gist.github.com/jewelsea/1422628"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cNode\u003e items \u003d pieChartDisplay.lookupAll(\"Label.chart-legend-item\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // these colors came from caspian.css .default-color0..4.chart-pie"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Color[] colors \u003d { Color.web(\"#228C22\"), Color.web(\"#C62828\")};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (Node item : items) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Label label \u003d (Label) item;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            final Rectangle rectangle \u003d new Rectangle(10, 10, colors[i]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            label.setGraphic(rectangle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 76
    }
  },
  {
    "path": "src/main/java/quickcache/ui/QuestionDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * A ui for the question window that is displayed at the header of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class QuestionDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String FXML \u003d \"QuestionDisplay.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private VBox displayBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TextArea questionDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TextArea answerDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TextArea outcomeDisplay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a {@code QuestionDisplay}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public QuestionDisplay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(displayBox.getChildren());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tmp.remove(this.answerDisplay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tmp.remove(this.outcomeDisplay);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayBox.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        questionDisplay.setText(\"Question: \" + question);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays the outcome of a test command to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param feedbackToUser the feedback to be displayed to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param isAnswerCorrect displays the answer to be correct if true and vice versa."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showOutcome(String feedbackToUser, boolean isAnswerCorrect) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(displayBox.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tmp.addAll(this.answerDisplay, this.outcomeDisplay);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        displayBox.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        answerDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (isAnswerCorrect) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            outcomeDisplay.setText(\"You are correct!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            outcomeDisplay.setStyle(\"-fx-text-fill: #608a5a;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            outcomeDisplay.setText(\"You are incorrect!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            outcomeDisplay.setStyle(\"-fx-text-fill: #b30000;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 69
    }
  },
  {
    "path": "src/main/java/quickcache/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/quickcache/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/quickcache/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/quickcache/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 26,
      "-": 63
    }
  },
  {
    "path": "src/main/java/quickcache/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 18,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyEvent\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "FH-30": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/FlashcardDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" spacing\u003d\"5.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "FH-30": 8,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "FH-30": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         title\u003d\"QuickCache\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cVBox fx:id\u003d\"mainPlaceholder\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" minWidth\u003d\"50.0\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u003cStackPane fx:id\u003d\"displayPlaceholder\" minHeight\u003d\"180.0\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "FH-30": 7,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/OptionCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" spacing\u003d\"5.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003cLabel fx:id\u003d\"optionPlaceholder\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "FH-30": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/OptionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cListView fx:id\u003d\"optionListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "FH-30": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/PieChartDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003cPieChart fx:id\u003d\"pieChartDisplay\" stylesheets\u003d\"@PieChart.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "FH-30": 6
    }
  },
  {
    "path": "src/main/resources/view/QuestionDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003cVBox fx:id\u003d\"displayBox\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u003cTextArea fx:id\u003d\"questionDisplay\" editable\u003d\"false\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                          prefWidth\u003d\"515.0\" styleClass\u003d\"result-display\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \u003cInsets top\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u003cTextArea fx:id\u003d\"answerDisplay\" editable\u003d\"false\" prefHeight\u003d\"110.0\" prefWidth\u003d\"515.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                          styleClass\u003d\"result-display\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \u003cInsets top\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \u003cTextArea fx:id\u003d\"outcomeDisplay\" editable\u003d\"false\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"20.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                          prefWidth\u003d\"515.0\" styleClass\u003d\"result-display\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \u003cInsets top\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "FH-30": 28
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/quickcache/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/quickcache/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/quickcache/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/quickcache/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        final Index fifthFlashcardIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(fifthFlashcardIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 5,
      "FH-30": 7,
      "-": 49
    }
  },
  {
    "path": "src/test/java/quickcache/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "-": 31
    }
  },
  {
    "path": "src/test/java/quickcache/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "-": 101
    }
  },
  {
    "path": "src/test/java/quickcache/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/quickcache/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/quickcache/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/quickcache/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    //---------------- Tests for containsWordAsSubsetIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void containsWordAsSubsetIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                StringUtil.containsWordAsSubsetIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void containsWordAsSubsetIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", () -\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                StringUtil.containsWordAsSubsetIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void containsWordAsSubsetIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", () -\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                StringUtil.containsWordAsSubsetIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void containsWordAsSubsetIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                StringUtil.containsWordAsSubsetIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - is subset of first word in sentence"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - is subset of last word in sentence"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - is subset of middle word in sentence"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - is subset of multiple words"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void containsWordAsSubsetIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(StringUtil.containsWordAsSubsetIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(StringUtil.containsWordAsSubsetIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Partially matches or matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(StringUtil.containsWordAsSubsetIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 9,
      "FH-30": 85,
      "-": 136
    }
  },
  {
    "path": "src/test/java/quickcache/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM8;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.AddOpenEndedQuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.storage.JsonQuickCacheStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        JsonQuickCacheStorage quickCacheStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new JsonQuickCacheStorage(temporaryFolder.resolve(\"quickCache.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StorageManager storage \u003d new StorageManager(quickCacheStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Setup LogicManager with JsonQuickCacheIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        JsonQuickCacheStorage quickCacheStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new JsonQuickCacheIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionQuickCache.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StorageManager storage \u003d new StorageManager(quickCacheStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String addCommand \u003d AddOpenEndedQuestionCommand.COMMAND_WORD + QUESTION_DESC_ONE + ANSWER_DESC_ONE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(RANDOM8).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        expectedModel.addFlashcard(expectedFlashcard);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static class JsonQuickCacheIoExceptionThrowingStub extends JsonQuickCacheStorage {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        private JsonQuickCacheIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public void saveQuickCache(ReadOnlyQuickCache quickCache, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 8,
      "FH-30": 30,
      "-": 121
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/AddMultipleChoiceQuestionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddMultipleChoiceQuestionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddMultipleChoiceQuestionCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] choices \u003d {\"First, Second, Third, Fourth\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().withMultipleChoiceQuestion(\"Sample Question\", choices)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            .withAnswer(\"2\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        CommandResult commandResult \u003d new AddMultipleChoiceQuestionCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(String.format(AddMultipleChoiceQuestionCommand.MESSAGE_SUCCESS, validFlashcard),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] choices \u003d {\"First, Second, Third, Fourth\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().withMultipleChoiceQuestion(\"Sample Question\", choices)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            .withAnswer(\"2\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddMultipleChoiceQuestionCommand addMultipleChoiceQuestionCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            new AddMultipleChoiceQuestionCommand(validFlashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertThrows(CommandException.class, AddOpenEndedQuestionCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            addMultipleChoiceQuestionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] choices \u003d {\"First, Second, Third, Fourth\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard first \u003d new FlashcardBuilder().withMultipleChoiceQuestion(\"Sample one\", choices)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            .withAnswer(\"2\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard second \u003d new FlashcardBuilder().withMultipleChoiceQuestion(\"Sample two\", choices)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            .withAnswer(\"2\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        AddMultipleChoiceQuestionCommand addSampleMcqQuestionOne \u003d new AddMultipleChoiceQuestionCommand(first);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        AddMultipleChoiceQuestionCommand addSampleMcqQuestionTwo \u003d new AddMultipleChoiceQuestionCommand(second);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(addSampleMcqQuestionOne.equals(addSampleMcqQuestionOne));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        AddMultipleChoiceQuestionCommand addSampleMcqQuestionOneCopy \u003d new AddMultipleChoiceQuestionCommand(first);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(addSampleMcqQuestionOne.equals(addSampleMcqQuestionOneCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(addSampleMcqQuestionOne.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(addSampleMcqQuestionOne.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(addSampleMcqQuestionOne.equals(addSampleMcqQuestionTwo));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public Path getQuickCacheFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public void setQuickCacheFilePath(Path quickCacheFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public ReadOnlyQuickCache getQuickCache() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setQuickCache(ReadOnlyQuickCache newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public ReadOnlyQuickCache getQuickCache() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new QuickCache();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 14,
      "FH-30": 15,
      "GilbertTan19": 176
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/AddOpenEndedQuestionCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddOpenEndedQuestionCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        model \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute_newFlashcard_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        expectedModel.addFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertCommandSuccess(new AddOpenEndedQuestionCommand(validFlashcard), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            String.format(AddOpenEndedQuestionCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcardInList \u003d model.getQuickCache().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertCommandFailure(new AddOpenEndedQuestionCommand(flashcardInList),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            model, AddOpenEndedQuestionCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 9,
      "FH-30": 3,
      "-": 25,
      "GilbertTan19": 9
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/AddOpenEndedQuestionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddOpenEndedQuestionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddOpenEndedQuestionCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        CommandResult commandResult \u003d new AddOpenEndedQuestionCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(String.format(AddOpenEndedQuestionCommand.MESSAGE_SUCCESS, validFlashcard),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddOpenEndedQuestionCommand addOpenEndedQuestionCommand \u003d new AddOpenEndedQuestionCommand(validFlashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertThrows(CommandException.class, AddOpenEndedQuestionCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            addOpenEndedQuestionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard sampleQuestionOne \u003d new FlashcardBuilder().withQuestion(\"sample question\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard sampleQuestionTwo \u003d new FlashcardBuilder().withQuestion(\"sample question 2\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddOpenEndedQuestionCommand addSampleOneCommand \u003d new AddOpenEndedQuestionCommand(sampleQuestionOne);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddOpenEndedQuestionCommand addSampleTwoCommand \u003d new AddOpenEndedQuestionCommand(sampleQuestionTwo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertTrue(addSampleOneCommand.equals(addSampleOneCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        AddOpenEndedQuestionCommand addSampleOneCommandCopy \u003d new AddOpenEndedQuestionCommand(sampleQuestionOne);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(addSampleOneCommand.equals(addSampleOneCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertFalse(addSampleOneCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertFalse(addSampleOneCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertFalse(addSampleOneCommand.equals(addSampleTwoCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public Path getQuickCacheFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public void setQuickCacheFilePath(Path quickCacheFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public ReadOnlyQuickCache getQuickCache() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void setQuickCache(ReadOnlyQuickCache newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        public ReadOnlyQuickCache getQuickCache() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new QuickCache();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 14,
      "FH-30": 8,
      "-": 111,
      "GilbertTan19": 63
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_emptyQuickCache_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_nonEmptyQuickCache_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model model \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setQuickCache(new QuickCache());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 28,
      "FH-30": 2
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/ClearStatsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ClearStatsCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ClearStatsCommand clearStatsCommand \u003d new ClearStatsCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(ClearStatsCommand.MESSAGE_CLEAR_STATISTICS_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandSuccess(clearStatsCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        showFlashcardAtIndex(model, TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.VERY_BIG_INDEX_FLASHCARD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(outOfBoundIndex.getZeroBased() \u003c model.getQuickCache().getFlashcardList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ClearStatsCommand clearStatsCommand \u003d new ClearStatsCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandFailure(clearStatsCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 44
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.OpenEndedQuestion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                true, false, false)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                false, true, false)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer answer \u003d new Answer(\"answer\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question question \u003d new OpenEndedQuestion(\"question\", answer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        commandResult \u003d new CommandResult(\"feedback\", question, true, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", question,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                true, false)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", question,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                true, false)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                 false, false, question, true)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                 false, question, true)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 16,
      "FH-30": 25,
      "-": 48,
      "GilbertTan19": 3
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_QUESTION_ONE \u003d \"Question One\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_QUESTION_TWO \u003d \"Question Two\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_QUESTION_THREE \u003d \"Question Three\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_ANSWER_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_ANSWER_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_ANSWER_THREE \u003d \"3\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_OPTION_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_OPTION_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_OPTION_THREE \u003d \"3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_TAG_LSM1301 \u003d \"LSM1301\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String VALID_TAG_MODULE \u003d \"Module\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String CHOICE_DESC \u003d \" \" + CliSyntax.PREFIX_CHOICE + \"First\" + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        + CliSyntax.PREFIX_CHOICE + \"Second\" + \" \" + CliSyntax.PREFIX_CHOICE + \"Third\" + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        + CliSyntax.PREFIX_CHOICE + \"Fourth\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String QUESTION_DESC_ONE \u003d \" \" + CliSyntax.PREFIX_QUESTION + VALID_QUESTION_ONE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String QUESTION_DESC_TWO \u003d \" \" + CliSyntax.PREFIX_QUESTION + VALID_QUESTION_TWO;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String QUESTION_DESC_THREE \u003d \" \" + CliSyntax.PREFIX_QUESTION + VALID_QUESTION_THREE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String ANSWER_DESC_ONE \u003d \" \" + CliSyntax.PREFIX_ANSWER + VALID_ANSWER_ONE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String ANSWER_DESC_TWO \u003d \" \" + CliSyntax.PREFIX_ANSWER + VALID_ANSWER_TWO;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String ANSWER_DESC_THREE \u003d \" \" + CliSyntax.PREFIX_ANSWER + VALID_ANSWER_THREE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String OPTION_DESC_ONE \u003d \" \" + CliSyntax.PREFIX_OPTION + VALID_OPTION_ONE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String OPTION_DESC_TWO \u003d \" \" + CliSyntax.PREFIX_OPTION + VALID_OPTION_TWO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final String OPTION_DESC_THREE \u003d \" \" + CliSyntax.PREFIX_OPTION + VALID_OPTION_THREE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // empty string not allowed for questions, answers and options"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + CliSyntax.PREFIX_QUESTION + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + CliSyntax.PREFIX_ANSWER + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String INVALID_OPTION_DESC \u003d \" \" + CliSyntax.PREFIX_OPTION + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final String INVALID_OPTION_NON_ALPHANUMERIC_DESC \u003d \" \" + CliSyntax.PREFIX_OPTION + \"abc\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_TWO;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_THREE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DESC_TWO \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_TWO)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withAnswer(VALID_ANSWER_TWO).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DESC_THREE \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_THREE)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withAnswer(VALID_ANSWER_THREE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                                            Model expectedModel, Question expectedQuestion,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                                            Boolean expectedIsCorrect, boolean isChangeWindow) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, expectedQuestion,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            expectedIsCorrect, isChangeWindow);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                                            Model expectedModel, Question expectedQuestion,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                                            Statistics expectedStatistics) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, expectedQuestion,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            expectedStatistics);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * - the quick cache, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCache expectedQuickCache \u003d new QuickCache(actualModel.getQuickCache());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(expectedQuickCache, actualModel.getQuickCache());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * {@code model}\u0027s QuickCache."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        final String[] splitName \u003d flashcard.getQuestion().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        model.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[1])));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 30,
      "FH-30": 59,
      "-": 62,
      "GilbertTan19": 3
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcardToDelete \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            model.getFilteredFlashcardList().get(TypicalIndexes.INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.showFlashcardAtIndex(model, TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcardToDelete \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            model.getFilteredFlashcardList().get(TypicalIndexes.INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        showNoFlashcard(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.showFlashcardAtIndex(model, TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.VERY_BIG_INDEX_FLASHCARD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of quick cache list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(outOfBoundIndex.getZeroBased() \u003c model.getQuickCache().getFlashcardList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different delete command -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void showNoFlashcard(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        model.updateFilteredFlashcardList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 27,
      "FH-30": 40,
      "-": 39,
      "GilbertTan19": 2
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * and unit tests for EditCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_allFieldsSpecifiedForOpenEndedUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new QuickCache(model.getQuickCache()), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_allFieldsSpecifiedForMultipleChoiceUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String[] choices \u003d {\"First\", \"Second\", \"Third\", \"Fourth\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            .withMultipleChoiceQuestion(\"Multiple Choice Question\", choices).withAnswer(\"2\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedMultipleChoice \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            .withMultipleChoiceQuestion(\"Multiple Choice Question\", choices).withAnswer(choices[1]).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_SEVENTH_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedMultipleChoice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new QuickCache(model.getQuickCache()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(6), editedMultipleChoice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcardInFilteredList \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            model.getFilteredFlashcardList().get(TypicalIndexes.INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedFlashcard \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new FlashcardBuilder(flashcardInFilteredList).withQuestion(CommandTestUtil.VALID_QUESTION_THREE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new EditFlashcardDescriptorBuilder().withQuestion(CommandTestUtil.VALID_QUESTION_THREE).build());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new QuickCache(model.getQuickCache()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            CommandTestUtil.DESC_TWO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand.EditFlashcardDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new EditCommand.EditFlashcardDescriptor(CommandTestUtil.DESC_TWO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_SECOND_FLASHCARD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            CommandTestUtil.DESC_TWO)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            CommandTestUtil.DESC_THREE)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 100,
      "FH-30": 6
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/EditFlashcardDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.DESC_THREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.DESC_TWO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_THREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_THREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class EditFlashcardDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        EditFlashcardDescriptor descriptorWithSameValues \u003d new EditFlashcardDescriptor(DESC_TWO);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(DESC_TWO.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(DESC_TWO.equals(DESC_TWO));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(DESC_TWO.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(DESC_TWO.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(DESC_TWO.equals(DESC_THREE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        EditFlashcardDescriptor editedDescTwo \u003d new EditFlashcardDescriptorBuilder(DESC_TWO)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withQuestion(VALID_QUESTION_THREE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(DESC_TWO.equals(editedDescTwo));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        editedDescTwo \u003d new EditFlashcardDescriptorBuilder(DESC_TWO).withAnswer(VALID_ANSWER_THREE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(DESC_TWO.equals(editedDescTwo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "FH-30": 15,
      "GilbertTan19": 29
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 18
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/ExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.storage.JsonQuickCacheStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class ExportCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final String TEST_FILE_NAME \u003d \"test_export.json\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_unfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Checks that command executed properly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path testFilePath \u003d TestUtil.getFilePathInSandboxFolder(TEST_FILE_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(testFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_FLASHCARDS_SUCCESS, testFilePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandSuccess(exportCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Checks that json exported is the same as that in current filtered flashcard list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        JsonQuickCacheStorage jsonQuickCacheStorage \u003d new JsonQuickCacheStorage(testFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e readBack \u003d jsonQuickCacheStorage.readQuickCache().get().getFlashcardList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e original \u003d expectedModel.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Checks that command executed properly"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.showFlashcardAtIndex(model, TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.updateFilteredFlashcardList((flashcard -\u003e flashcard.equals(TypicalFlashcards.RANDOM1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path testFilePath \u003d TestUtil.getFilePathInSandboxFolder(TEST_FILE_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(testFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_FLASHCARDS_SUCCESS, testFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandSuccess(exportCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Checks that json exported is the same as that in current filtered flashcard list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        JsonQuickCacheStorage jsonQuickCacheStorage \u003d new JsonQuickCacheStorage(testFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e readBack \u003d jsonQuickCacheStorage.readQuickCache().get().getFlashcardList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e original \u003d expectedModel.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Setup with JsonQuickCacheIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path invalidTestFilePath \u003d temporaryFolder.resolve(\"ioExceptionQuickCache.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        JsonQuickCacheStorage quickCacheStorage \u003d new JsonQuickCacheIoExceptionThrowingStub(invalidTestFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Execute export command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(invalidTestFilePath, quickCacheStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_FLASHCARDS_FAILURE, invalidTestFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandFailure(exportCommand, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String fileNameSecond \u003d \"non_test_export.json\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path testFilePathFirst \u003d TestUtil.getFilePathInSandboxFolder(TEST_FILE_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path testFilePathSecond \u003d TestUtil.getFilePathInSandboxFolder(fileNameSecond);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand exportFirstCommand \u003d new ExportCommand(testFilePathFirst);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand exportSecondCommand \u003d new ExportCommand(testFilePathSecond);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ExportCommand exportFirstCommandCopy \u003d new ExportCommand(testFilePathFirst);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(exportFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(exportFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different path -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(exportFirstCommand.equals(exportSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static class JsonQuickCacheIoExceptionThrowingStub extends JsonQuickCacheStorage {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        private JsonQuickCacheIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void saveQuickCache(ReadOnlyQuickCache quickCache, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        public void saveQuickCache(ReadOnlyQuickCache quickCache) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 126
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate firstPredicate \u003d preparePredicate(prepareTagSet(\"LSM1301\"), prepareKeywordList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate secondPredicate \u003d preparePredicate(prepareTagSet(\"CS2101\"), prepareKeywordList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_oneTag_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                preparePredicate(prepareTagSet(\"LSM1301\"), prepareKeywordList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFlashcards.RANDOM1, TypicalFlashcards.RANDOM2),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_oneQuestionKeyword_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                preparePredicate(prepareTagSet(), prepareKeywordList(\"information\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFlashcards.RANDOM6, TypicalFlashcards.RANDOM7),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_oneQuestionKeywordAndOneTag_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                preparePredicate(prepareTagSet(\"CS2100\"), prepareKeywordList(\"What\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFlashcards.RANDOM3, TypicalFlashcards.RANDOM4),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Set\u003cTag\u003e prepareTagSet(String... tags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        HashSet\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (String tag: tags) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            tagSet.add(new Tag(tag));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private List\u003cString\u003e prepareKeywordList(String... keywords) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Arrays.asList(keywords);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Parses {@code Set} of {@code Tag} and {@code List} of keywords into a {@code FlashcardPredicate}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private FlashcardPredicate preparePredicate(Set\u003cTag\u003e tagsToMatch, List\u003cString\u003e questionKeywords) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ArrayList\u003cPredicate\u003cFlashcard\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!tagsToMatch.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            predicates.add(new FlashcardContainsTagPredicate(tagsToMatch));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!questionKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            predicates.add(new QuestionContainsKeywordsPredicate(questionKeywords));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new FlashcardPredicate(predicates);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 122
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "-": 12
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        model \u003d new ModelManager(TypicalFlashcards.getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandTestUtil.showFlashcardAtIndex(model, TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 35,
      "FH-30": 1
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/OpenCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.VERY_BIG_INDEX_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class OpenCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcardToOpen \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Question question \u003d flashcardToOpen.getQuestion();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(OpenCommand.MESSAGE_OPEN_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            flashcardToOpen);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandSuccess(openCommand, model, expectedMessage, model, question, null, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index outOfBoundIndex \u003d VERY_BIG_INDEX_FLASHCARD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(outOfBoundIndex.getZeroBased() \u003c model.getQuickCache().getFlashcardList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandFailure(openCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 15,
      "FH-30": 34
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/StatsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcardToDisplayStatistics \u003d model.getFilteredFlashcardList()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            .get(TypicalIndexes.INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Question question \u003d flashcardToDisplayStatistics.getQuestion();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        StatsCommand statsCommand \u003d new StatsCommand(TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(StatsCommand.MESSAGE_DISPLAY_STATISTICS_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            flashcardToDisplayStatistics);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandSuccess(statsCommand, model, expectedMessage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            model, question, null, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        showFlashcardAtIndex(model, TypicalIndexes.INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.VERY_BIG_INDEX_FLASHCARD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(outOfBoundIndex.getZeroBased() \u003c model.getQuickCache().getFlashcardList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        StatsCommand statsCommand \u003d new StatsCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandFailure(statsCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 50
    }
  },
  {
    "path": "src/test/java/quickcache/logic/commands/TestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_MCQ_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Option;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class TestCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_answerSpecifiedOpenEndedUnfilteredListCorrect_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard expectedFlashcard \u003d flashcard.getFlashcardAfterTestSuccess();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // updates tested flashcard with new flashcard state"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(flashcard, expectedFlashcard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Question question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer userAnswer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        descriptor.setAnswer(answer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(TestCommand.MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            answer, userAnswer);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandSuccess(testCommand, model, expectedMessage, expectedModel, question, true, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_answerSpecifiedOpenEndedUnfilteredListWrong_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard expectedFlashcard \u003d flashcard.getFlashcardAfterTestFailure();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // updates tested flashcard with new flashcard state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(flashcard, expectedFlashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Question question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer userAnswer \u003d model.getFilteredFlashcardList().get(1).getAnswer();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        descriptor.setAnswer(userAnswer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(TestCommand.MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            answer, userAnswer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandSuccess(testCommand, model, expectedMessage, model, question, false, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_optionSpecifiedMcqUnfilteredListCorrect_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_MCQ_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard expectedFlashcard \u003d flashcard.getFlashcardAfterTestSuccess();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // updates tested flashcard with new flashcard state"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(flashcard, expectedFlashcard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        MultipleChoiceQuestion mcq \u003d (MultipleChoiceQuestion) flashcard.getQuestion();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Index correctIndex \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer userAnswer \u003d mcq.getAnswerFromIndex(correctIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        descriptor.setOption(new Option(String.valueOf(correctIndex.getOneBased())));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand(INDEX_FIRST_MCQ_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(TestCommand.MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            answer, userAnswer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandSuccess(testCommand, model, expectedMessage, model, mcq, true, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_optionSpecifiedMcqUnfilteredListWrong_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalQuickCache(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_MCQ_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard expectedFlashcard \u003d flashcard.getFlashcardAfterTestFailure();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // updates tested flashcard with new flashcard state"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedModel.setFlashcard(flashcard, expectedFlashcard);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        MultipleChoiceQuestion mcq \u003d (MultipleChoiceQuestion) flashcard.getQuestion();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Index incorrectIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer userAnswer \u003d mcq.getAnswerFromIndex(incorrectIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        descriptor.setOption(new Option(String.valueOf(incorrectIndex.getOneBased())));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand(INDEX_FIRST_MCQ_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String expectedMessage \u003d String.format(TestCommand.MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            answer, userAnswer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertCommandSuccess(testCommand, model, expectedMessage, model, mcq, false, true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_answerUnspecifiedOpenEndedUnfilteredListCorrect_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Question question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer userAnswer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d TestCommand.MESSAGE_NO_ANSWER_PROVIDED;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandFailure(testCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void execute_optionUnspecifiedMcqUnfilteredListCorrect_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_MCQ_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Question question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer userAnswer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand(INDEX_FIRST_MCQ_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d TestCommand.MESSAGE_NO_OPTION_PROVIDED;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertCommandFailure(testCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 137,
      "FH-30": 10
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/AddMultipleChoiceQuestionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_TWO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.CHOICE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_THREE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_TWO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_ONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddMultipleChoiceQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class AddMultipleChoiceQuestionCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final AddMultipleChoiceQuestionCommandParser parser \u003d new AddMultipleChoiceQuestionCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String[] choices \u003d {\"First\", \"Second\", \"Third\", \"Fourth\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder().withMultipleChoiceQuestion(\"Question One\", choices)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withAnswer(\"First\").withTags().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            PREAMBLE_WHITESPACE + QUESTION_DESC_ONE + ANSWER_DESC_ONE + CHOICE_DESC,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new AddMultipleChoiceQuestionCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // multiple questions - last question accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            QUESTION_DESC_TWO + QUESTION_DESC_ONE + ANSWER_DESC_ONE + CHOICE_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new AddMultipleChoiceQuestionCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            QUESTION_DESC_ONE + ANSWER_DESC_TWO + ANSWER_DESC_ONE + CHOICE_DESC,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new AddMultipleChoiceQuestionCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            AddMultipleChoiceQuestionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_QUESTION_ONE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + ANSWER_DESC_ONE + CHOICE_DESC,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, QUESTION_DESC_ONE + VALID_ANSWER_ONE + CHOICE_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing Choices prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, QUESTION_DESC_ONE + ANSWER_DESC_ONE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_QUESTION_ONE + VALID_ANSWER_ONE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid Question"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, ANSWER_DESC_ONE + INVALID_QUESTION_DESC + CHOICE_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid Answer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, QUESTION_DESC_THREE + INVALID_ANSWER_DESC + CHOICE_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_QUESTION_DESC + INVALID_ANSWER_DESC + CHOICE_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_ONE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + ANSWER_DESC_ONE + CHOICE_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                AddMultipleChoiceQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 72,
      "FH-30": 21,
      "GilbertTan19": 3
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/AddOpenEndedQuestionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_THREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_THREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_THREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_THREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddOpenEndedQuestionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class AddOpenEndedQuestionCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final AddOpenEndedQuestionCommandParser parser \u003d new AddOpenEndedQuestionCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            AddOpenEndedQuestionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_QUESTION_THREE + ANSWER_DESC_THREE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, QUESTION_DESC_THREE + VALID_ANSWER_THREE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_QUESTION_THREE + VALID_ANSWER_THREE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid Question"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, ANSWER_DESC_THREE + INVALID_QUESTION_DESC,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid Answer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, QUESTION_DESC_THREE + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_QUESTION_DESC + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_THREE + ANSWER_DESC_THREE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOpenEndedQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 45,
      "FH-30": 10,
      "GilbertTan19": 3
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/ClearStatsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.ClearStatsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ClearStatsCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final ClearStatsCommandParser parser \u003d new ClearStatsCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_validArgs_returnsOpenCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ClearStatsCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ClearStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 25
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "FH-30": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_THREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_TWO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_THREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.QUESTION_DESC_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_THREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_THREE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_TWO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // invalid question followed by valid answer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + ANSWER_DESC_TWO,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // valid answer followed by invalid question. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"1\" + QUESTION_DESC_THREE + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_THREE + ANSWER_DESC_THREE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withQuestion(VALID_QUESTION_THREE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withAnswer(VALID_ANSWER_THREE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_THREE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withQuestion(VALID_QUESTION_THREE)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // question"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_TWO;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withQuestion(VALID_QUESTION_TWO).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_TWO;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withAnswer(VALID_ANSWER_TWO).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_TWO + ANSWER_DESC_TWO"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            + ANSWER_DESC_THREE + QUESTION_DESC_THREE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withQuestion(VALID_QUESTION_THREE).withAnswer(VALID_ANSWER_THREE)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_QUESTION_DESC + ANSWER_DESC_THREE + QUESTION_DESC_THREE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withAnswer(VALID_ANSWER_THREE).withQuestion(VALID_QUESTION_THREE).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_THREE + INVALID_ANSWER_DESC + ANSWER_DESC_THREE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_THREE)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .withAnswer(VALID_ANSWER_THREE).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 13,
      "FH-30": 38,
      "GilbertTan19": 113
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/ExportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class ExportCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String pathString \u003d \"test.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Path path \u003d Paths.get(\"export\", pathString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseSuccess(parser, \"test.json\", new ExportCommand(path));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_noInput_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // no path specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 33
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_emptyTag_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \" t/ t/TagOne\", Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_emptyQuestion_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \" q/ q/KeywordOne\", \"Keyword should not be blank\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_argsContainOnlyQuestionKeywords_returnsFindCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Predicate\u003cFlashcard\u003e keywordPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new QuestionContainsKeywordsPredicate(List.of(\"KeywordOne\", \"KeywordTwo\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d new FlashcardPredicate(List.of(keywordPredicate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \" q/KeywordOne q/KeywordTwo\", expectedFindCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_argsContainOnlyTags_returnsFindCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Predicate\u003cFlashcard\u003e tagPredicate \u003d new FlashcardContainsTagPredicate(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Arrays.asList(new Tag(\"TagOne\"), new Tag(\"TagTwo\"))));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d new FlashcardPredicate(List.of(tagPredicate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \" t/TagOne t/TagTwo\", expectedFindCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_argsContainBothQuestionKeywordsAndTags_returnsFindCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Predicate\u003cFlashcard\u003e tagPredicate \u003d new FlashcardContainsTagPredicate(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Arrays.asList(new Tag(\"TagOne\"), new Tag(\"TagTwo\"))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Predicate\u003cFlashcard\u003e keywordPredicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new QuestionContainsKeywordsPredicate(List.of(\"KeywordOne\", \"KeywordTwo\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d new FlashcardPredicate(List.of(tagPredicate, keywordPredicate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \" q/KeywordOne q/KeywordTwo t/TagOne t/TagTwo\", expectedFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 76
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/OpenCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_validArgs_returnsOpenCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \"1\", new OpenCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 24
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final String INVALID_TAG \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Is this a question?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"yes\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"HardModule\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String expectedQuestion \u003d VALID_QUESTION;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String expectedQuestion \u003d VALID_QUESTION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseFileName_validValueWithoutWhiteSpace_returnsFileName() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedFileName \u003d \"test.json\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String validFileNameInput \u003d expectedFileName;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedFileName, ParserUtil.parseFileName(validFileNameInput));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseFileName_validValueWithWhiteSpace_returnsTrimmedFileName() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expectedFileName \u003d \"test.json\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String validFileNameInput \u003d \" \" + expectedFileName;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedFileName, ParserUtil.parseFileName(validFileNameInput));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseFileName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFileName(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseFileName_empty_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFileName(\"\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseFileName_invalid_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // throws error if null character is part of the file name string"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFileName(\"\\0\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseKeywords_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseKeywords(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseKeywords_collectionWithInvalidKeywords_throwsParseException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_QUESTION, INVALID_QUESTION)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseKeywords_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(ParserUtil.parseKeywords(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseKeywords_collectionWithOneSpacedInput_returnsBrokenDownKeywords() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e inputWithWhiteSpacesInbetween \u003d List.of(VALID_QUESTION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e expectedKeywords \u003d Arrays.asList(VALID_QUESTION.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseKeywords_collectionWithManyNotSpacedInputs_returnsCollectionWithSameContents() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String[] notSpacedInputs \u003d VALID_QUESTION.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e inputsWithNoWhiteSpacesInBetween \u003d List.of(notSpacedInputs[0], notSpacedInputs[1]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(inputsWithNoWhiteSpacesInBetween, ParserUtil.parseKeywords(inputsWithNoWhiteSpacesInBetween));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseKeywords_collectionWithManySpacedInputs_returnsBrokenDownKeywords() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String[] notSpacedInputs \u003d VALID_QUESTION.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e spacedInputs \u003d List.of(notSpacedInputs[0] + \" \" + notSpacedInputs[1],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                notSpacedInputs[2] + \" \" + notSpacedInputs[3]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e expectedKeywords \u003d Arrays.asList(notSpacedInputs);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(expectedKeywords, ParserUtil.parseKeywords(spacedInputs));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 39,
      "FH-30": 44,
      "-": 96,
      "GilbertTan19": 24
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/QuickCacheParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static quickcache.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddOpenEndedQuestionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class QuickCacheParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final QuickCacheParser parser \u003d new QuickCacheParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().withTags().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddOpenEndedQuestionCommand command \u003d (AddOpenEndedQuestionCommand)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            parser.parseCommand(FlashcardUtil.getAddCommand(flashcard));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(new AddOpenEndedQuestionCommand(flashcard), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseCommand_open() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        OpenCommand command \u003d (OpenCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                OpenCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(new OpenCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StatsCommand command \u003d (StatsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                StatsCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(new StatsCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(flashcard).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                + INDEX_FIRST_FLASHCARD.getOneBased() + \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                + FlashcardUtil.getEditFlashcardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \" t/\" + keywords.stream().collect(Collectors.joining(\" t/\")));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cTag\u003e tagsToMatch \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new HashSet\u003c\u003e(keywords.stream().map(Tag::new).collect(Collectors.toCollection(ArrayList::new)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new FlashcardPredicate(List.of(new FlashcardContainsTagPredicate(tagsToMatch)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(new FindCommand(predicate), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseCommand_test() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(parser.parseCommand(TestCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + INDEX_FIRST_FLASHCARD.getOneBased()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + PREFIX_ANSWER"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + RANDOM1.getAnswer()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        ) instanceof TestCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parseCommand_export() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD + \" test.json\") instanceof ExportCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(ParseException.class, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            \"unknownCommand\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 36,
      "FH-30": 50,
      "-": 48,
      "GilbertTan19": 15
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/StatsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final StatsCommandParser parser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_validArgs_returnsOpenCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StatsCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 24
    }
  },
  {
    "path": "src/test/java/quickcache/logic/parser/TestCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.ANSWER_DESC_TWO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_OPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.INVALID_OPTION_NON_ALPHANUMERIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.OPTION_DESC_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_OPTION_TWO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_MCQ_FLASHCARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalIndexes.INDEX_FIRST_OPEN_ENDED_FLASHCARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Option;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class TestCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final TestCommandParser parser \u003d new TestCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_noInput_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // no index and no option/answer specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // no answer specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"1\", TestCommand.MESSAGE_NO_OPTION_OR_ANSWER_PROVIDED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + ANSWER_DESC_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"0\" + ANSWER_DESC_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // empty answer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // empty option"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OPTION_DESC, Option.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // non-alphanumeric option"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OPTION_NON_ALPHANUMERIC_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Option.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void parse_answerField_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_OPEN_ENDED_FLASHCARD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_TWO;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        descriptor.setAnswer(new Answer(VALID_ANSWER_TWO));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand expectedCommand \u003d new TestCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void parse_optionField_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MCQ_FLASHCARD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OPTION_DESC_TWO;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand.TestAnswerDescriptor descriptor \u003d new TestCommand.TestAnswerDescriptor();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        descriptor.setOption(new Option(VALID_OPTION_TWO));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        TestCommand expectedCommand \u003d new TestCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 77,
      "FH-30": 11
    }
  },
  {
    "path": "src/test/java/quickcache/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM_1_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.FlashcardContainsTagPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.QuickCacheBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(new QuickCache(), new QuickCache(modelManager.getQuickCache()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        userPrefs.setQuickCacheFilePath(Paths.get(\"quick/cache/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        userPrefs.setQuickCacheFilePath(Paths.get(\"new/quick/cache/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void setQuickCacheFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setQuickCacheFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void setQuickCacheFilePath_validPath_setsQuickCacheFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Path path \u003d Paths.get(\"quick/cache/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        modelManager.setQuickCacheFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(path, modelManager.getQuickCacheFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_flashcardNotInQuickCache_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(RANDOM1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_flashcardInQuickCache_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        modelManager.addFlashcard(RANDOM1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(RANDOM1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                modelManager.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCache quickCache \u003d new QuickCacheBuilder().withFlashcard(RANDOM1).withFlashcard(RANDOM3).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCache differentQuickCache \u003d new QuickCache();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        modelManager \u003d new ModelManager(quickCache, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(quickCache, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different quickCache -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentQuickCache, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        modelManager.updateFilteredFlashcardList(new FlashcardContainsTagPredicate("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(RANDOM_1_TAG))));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(quickCache, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        modelManager.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        differentUserPrefs.setQuickCacheFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(quickCache, differentUserPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 2,
      "FH-30": 38,
      "-": 94,
      "GilbertTan19": 1
    }
  },
  {
    "path": "src/test/java/quickcache/model/QuickCacheTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_TAG_LSM1301;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.getTypicalQuickCache;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class QuickCacheTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private final QuickCache quickCache \u003d new QuickCache();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(Collections.emptyList(), quickCache.getFlashcardList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e quickCache.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void resetData_withValidReadOnlyQuickCache_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCache newData \u003d getTypicalQuickCache();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(newData, quickCache);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void resetData_withDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Two flashcards with the same question and answer fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withTags(VALID_TAG_LSM1301).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(RANDOM1, editedRandom1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCacheStub newData \u003d new QuickCacheStub(newFlashcards);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e quickCache.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e quickCache.hasFlashcard(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_flashcardNotInQuickCache_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(quickCache.hasFlashcard(RANDOM1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_flashcardInQuickCache_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache.addFlashcard(RANDOM1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(quickCache.hasFlashcard(RANDOM1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void hasFlashcard_flashcardWithSameIdentityFieldsInQuickCache_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache.addFlashcard(RANDOM1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Flashcard editedRandom1 \u003d new FlashcardBuilder(RANDOM1).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(quickCache.hasFlashcard(editedRandom1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void getFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e quickCache.getFlashcardList()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * A stub ReadOnlyQuickCache whose flashcards list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static class QuickCacheStub implements ReadOnlyQuickCache {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuickCacheStub(Collection\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "FH-30": 55,
      "-": 36,
      "GilbertTan19": 6
    }
  },
  {
    "path": "src/test/java/quickcache/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setQuickCacheFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 5,
      "-": 16
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/AnswerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // invalid answers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // valid answers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Photosynthesis\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Cook for a further minute if you \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            + \"like your soft boiled eggs a little firmer.\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void checkAnswer() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // example answers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer1 \u003d new Answer(\"Photosynthesis is good\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer2 \u003d new Answer(\"Photosynthesis is good\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answerLowerCase \u003d new Answer(\"photosynthesis is good\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same answer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(answer1.checkAnswer(answer2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different cased answer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(answer1.checkAnswer(answerLowerCase));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Answer answer1 \u003d new Answer(\"Photosynthesis is good\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(answer1.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 59
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/ChoiceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class ChoiceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Choice(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Choice(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void isValidChoice() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null choice"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Choice.isValidChoice(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // blank choice"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(Choice.isValidChoice(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(Choice.isValidChoice(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(Choice.isValidChoice(\"Magnetic disk 12345!\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(Choice.isValidChoice(\"Main memory!\")); // with punctuation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(Choice.isValidChoice(\"Optical CDs and DVDs 12345\")); // with numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Choice choice \u003d new Choice(\"Main memory!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Choice choiceCopy \u003d new Choice(\"Main memory!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Choice choiceDifferent \u003d new Choice(\"Not main memory!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(choice.equals(choiceCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(choice.equals(choice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(choice.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(choice.equals(5));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different choice -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(choice.equals(choiceDifferent));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 58
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/FlashcardContainsTagPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "class FlashcardContainsTagPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cTag\u003e firstPredicateTagSet \u003d prepareTagSet(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cTag\u003e secondPredicateTagSet \u003d prepareTagSet(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardContainsTagPredicate firstPredicate \u003d new FlashcardContainsTagPredicate(firstPredicateTagSet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardContainsTagPredicate secondPredicate \u003d new FlashcardContainsTagPredicate(secondPredicateTagSet);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardContainsTagPredicate firstPredicateCopy \u003d new FlashcardContainsTagPredicate(firstPredicateTagSet);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_flashcardContainsTags_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardContainsTagPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new FlashcardContainsTagPredicate(prepareTagSet(\"Programming\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d new FlashcardContainsTagPredicate(prepareTagSet(\"Programming\", \"English\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_flashcardDoesNotContainTags_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardContainsTagPredicate predicate \u003d new FlashcardContainsTagPredicate(prepareTagSet(\"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d new FlashcardContainsTagPredicate(prepareTagSet(\"Programming\", \"Carol\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d new FlashcardContainsTagPredicate(prepareTagSet(\"pRogramming\", \"EnGlish\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Set\u003cTag\u003e prepareTagSet(String... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        HashSet\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (String tag: tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            tagSet.add(new Tag(tag));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 74
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/FlashcardPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FlashcardPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d prepareKeywordList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d prepareKeywordList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cTag\u003e firstPredicateTagSet \u003d prepareTagSet(\"first\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Set\u003cTag\u003e secondPredicateTagSet \u003d prepareTagSet(\"first\", \"second\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate firstPredicate \u003d preparePredicate(firstPredicateTagSet, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate secondPredicate \u003d preparePredicate(secondPredicateTagSet, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate firstPredicateCopy \u003d preparePredicate(firstPredicateTagSet, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_encapsulatesQuestionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d preparePredicate(prepareTagSet(), prepareKeywordList(\"CS1101S?\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(), prepareKeywordList(\"What\", \"is\", \"CS1101S?\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(), prepareKeywordList(\"WhAt\", \"iS\", \"Cs1101s?\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(), prepareKeywordList(\"What\", \"CS2103T\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(), prepareKeywordList(\"Carol\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_encapsulatesFlashcardContainsTagsPredicate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d preparePredicate(prepareTagSet(\"Programming\"), prepareKeywordList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"Programming\", \"English\"), prepareKeywordList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"Carol\"), prepareKeywordList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"Programming\", \"Carol\"), prepareKeywordList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"pRogramming\", \"EnGlish\"), prepareKeywordList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_encapsulatesTwoPredicates() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Matching question keyword and tag keyword"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        FlashcardPredicate predicate \u003d preparePredicate(prepareTagSet(\"Programming\"), prepareKeywordList(\"Who\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Who is this?\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Non-matching question keyword and matching tag keyword"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"Programming\"), prepareKeywordList(\"Why\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Who is this?\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Matching question keyword and non-matching tag keyword"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"Carol\"), prepareKeywordList(\"Who\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Who is this?\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Non-matching question keyword and non-matching tag keyword"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d preparePredicate(prepareTagSet(\"Carol\"), prepareKeywordList(\"Why\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Who is this?\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .withTags(\"Programming\", \"English\").build()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Set\u003cTag\u003e prepareTagSet(String... tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        HashSet\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (String tag: tags) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            tagSet.add(new Tag(tag));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private List\u003cString\u003e prepareKeywordList(String... keywords) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Arrays.asList(keywords);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Parses {@code Set} of {@code Tag} and {@code List} of keywords into a {@code FlashcardPredicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private FlashcardPredicate preparePredicate(Set\u003cTag\u003e tagsToMatch, List\u003cString\u003e questionKeywords) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ArrayList\u003cPredicate\u003cFlashcard\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!tagsToMatch.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            predicates.add(new FlashcardContainsTagPredicate(tagsToMatch));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!questionKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            predicates.add(new QuestionContainsKeywordsPredicate(questionKeywords));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new FlashcardPredicate(predicates);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 143
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class FlashcardTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void isSameFlashcard() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.isSameFlashcard(RANDOM1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.isSameFlashcard(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withAnswer(VALID_ANSWER_TWO).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.isSameFlashcard(editedRandom1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withQuestion(VALID_QUESTION_TWO).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.isSameFlashcard(editedRandom1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard random1Copy \u003d new FlashcardBuilder(RANDOM1).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.equals(random1Copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.equals(RANDOM1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.equals(RANDOM2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withAnswer(VALID_ANSWER_TWO).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.equals(editedRandom1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withQuestion(VALID_QUESTION_TWO).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(RANDOM1.equals(editedRandom1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void getFlashcardAfterTestSuccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard updatedRandom1 \u003d new FlashcardBuilder(RANDOM1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withStatistics(new Statistics(1, 1)).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.getFlashcardAfterTestSuccess().isSameFlashcard(updatedRandom1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.getFlashcardAfterTestSuccess().equals(updatedRandom1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void getFlashcardAfterTestFailure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Flashcard updatedRandom1 \u003d new FlashcardBuilder(RANDOM1)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withStatistics(new Statistics(1, 0)).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.getFlashcardAfterTestFailure().isSameFlashcard(updatedRandom1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(RANDOM1.getFlashcardAfterTestFailure().equals(updatedRandom1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 67,
      "FH-30": 10
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/MultipleChoiceQuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class MultipleChoiceQuestionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_listStringChoices_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cString\u003e choicesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        choicesList.add(\"Choice 1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        choicesList.add(\"Choice 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        choicesList.add(\"Choice 3\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String question \u003d \"Which choice is the answer?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer answer \u003d new Answer(\"Choice 1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        MultipleChoiceQuestion multipleChoiceQuestion \u003d new MultipleChoiceQuestion(question, choicesList, answer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(question, multipleChoiceQuestion.getValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(choicesList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            Arrays.stream("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                multipleChoiceQuestion.getChoices().get()).map((Object::toString)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void isValidMultipleChoiceQuestion() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null choice"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MultipleChoiceQuestion.isValidQuestion(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // blank choice"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(MultipleChoiceQuestion.isValidQuestion(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(MultipleChoiceQuestion.isValidQuestion(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(MultipleChoiceQuestion.isValidQuestion(\"How much is the cost of 1 DVD?\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(MultipleChoiceQuestion.isValidQuestion(\"How much is a DVD!\")); // with punctuation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(MultipleChoiceQuestion.isValidQuestion(\"DVDs 12345\")); // with numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 46,
      "GilbertTan19": 2
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/OpenEndedQuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class OpenEndedQuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null choice"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e OpenEndedQuestion.isValidQuestion(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // blank choice"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(OpenEndedQuestion.isValidQuestion(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(OpenEndedQuestion.isValidQuestion(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(OpenEndedQuestion.isValidQuestion(\"How much is the cost of 1 DVD?\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(OpenEndedQuestion.isValidQuestion(\"How much is a DVD!\")); // with punctuation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(OpenEndedQuestion.isValidQuestion(\"DVDs 12345\")); // with numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void getChoices() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        OpenEndedQuestion openEndedQuestion \u003d new OpenEndedQuestion(\"Test question?\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                new Answer(\"Sample Answer\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(openEndedQuestion.getChoices().isEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 31,
      "GilbertTan19": 2
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/OptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class OptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Option option \u003d new Option(\"1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Option optionCopy \u003d new Option(\"1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Option optionDifferent \u003d new Option(\"2\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(option.equals(optionCopy));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(option.equals(option));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(option.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(option.equals(5));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different option -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(option.equals(optionDifferent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String value \u003d \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Option option \u003d new Option(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(option.hashCode(), Objects.hash(value));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String value \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Option option \u003d new Option(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(option.toString(), \"Option: \" + value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 47
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/QuestionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d prepareKeywordList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d prepareKeywordList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_questionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            new QuestionContainsKeywordsPredicate(prepareKeywordList(\"CS1101S?\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(prepareKeywordList(\"What\", \"is\", \"CS1101S?\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(prepareKeywordList(\"WhAt\", \"iS\", \"Cs1101s?\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                new QuestionContainsKeywordsPredicate(prepareKeywordList(\"What\", \"CS2103T\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(prepareKeywordList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is CS1101S?\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private List\u003cString\u003e prepareKeywordList(String... keywords) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Arrays.asList(keywords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 59,
      "FH-30": 16
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/StatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class StatisticsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_negativeTimesTested_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // negative times tested"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new Statistics(-1, 0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // negative times tested correct"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                new Statistics(-1, 0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void constructor_timesTestedLessThanTimesTestedCorrect_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                new Statistics(0, 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void getCorrectRate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics newStatistics \u003d new Statistics();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(newStatistics.getCorrectRate(), 0.0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics updatedStatistics \u003d new Statistics(3, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(updatedStatistics.getCorrectRate(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            round((double) updatedStatistics.getTimesTestedCorrect()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    / updatedStatistics.getTimesTested() * 100, 2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    // Solution below adapted from https://stackoverflow.com/questions/2808535"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private double round(double value, int places) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (places \u003c 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        BigDecimal bd \u003d BigDecimal.valueOf(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        bd \u003d bd.setScale(places, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return bd.doubleValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics newStatistics \u003d new Statistics(5, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics newStatisticsDuplicate \u003d new Statistics(5, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(newStatistics.equals(newStatisticsDuplicate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(newStatistics.equals(newStatistics));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(newStatistics.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(newStatistics.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics differentStatisticsTimesTested \u003d new Statistics(6, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(newStatistics.equals(differentStatisticsTimesTested));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics differentStatisticsTimesTestedCorrect \u003d new Statistics(5, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(newStatistics.equals(differentStatisticsTimesTestedCorrect));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String expected \u003d \"Times Correct: 0\\nTimes Tested: 0\\nCorrect Rate: 0.00%\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(statistics.toString(), expected);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 70,
      "FH-30": 16
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        String tagName \u003d \"ValidTag\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Tag tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(tag.toString(), \"[\" + tagName + \"]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/quickcache/model/flashcard/UniqueFlashcardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.commands.CommandTestUtil.VALID_QUESTION_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.TypicalFlashcards.RANDOM2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(RANDOM1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(RANDOM1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void contains_flashcardWithSameIdentityFieldsInList_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withQuestion(VALID_QUESTION_TWO)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(editedRandom1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(RANDOM1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, RANDOM1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(RANDOM1, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(RANDOM1, RANDOM1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.setFlashcard(RANDOM1, RANDOM1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedUniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        Flashcard editedRandom1 \u003d new FlashcardBuilder(RANDOM1).withQuestion(VALID_QUESTION_TWO)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.setFlashcard(RANDOM1, editedRandom1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedUniqueFlashcardList.add(editedRandom1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.setFlashcard(RANDOM1, RANDOM2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedUniqueFlashcardList.add(RANDOM2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcard(RANDOM1, RANDOM2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void remove_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(RANDOM1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void remove_existingFlashcard_removesFlashcard() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.remove(RANDOM1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedUniqueFlashcardList.add(RANDOM2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.add(RANDOM1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(RANDOM2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        uniqueFlashcardList.setFlashcards(flashcardList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        expectedUniqueFlashcardList.add(RANDOM2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void setFlashcards_listWithDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(RANDOM1, RANDOM1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcards("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            listWithDuplicateFlashcards));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 171
    }
  },
  {
    "path": "src/test/java/quickcache/storage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import static Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import static TypicalFlashcards.RANDOM1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//import quickcache.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//import seedu.address.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    private static final List\u003cString\u003e VALID_QUESTION \u003d RANDOM1.getQuestion().getQuestion();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    private static final String VALID_ANSWER \u003d RANDOM1.getAnswer().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d RANDOM1.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//        JsonAdaptedPerson flashcard \u003d new JsonAdaptedPerson(RANDOM1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//        assertEquals(RANDOM1, flashcard.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//        JsonAdaptedPerson flashcard \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//                new JsonAdaptedPerson(VALID_QUESTION, INVALID_ANSWER, VALID_TAGS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //              VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //              VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //              VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//    //    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 95,
      "josiahkhoo": 3,
      "FH-30": 1,
      "GilbertTan19": 8
    }
  },
  {
    "path": "src/test/java/quickcache/storage/JsonQuickCacheStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import static Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import QuickCache;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyQuickCache\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        QuickCache original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        ReadOnlyQuickCache readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        assertEquals(original, new QuickCache(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        assertEquals(original, new QuickCache(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        assertEquals(original, new QuickCache(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//    private void saveAddressBook(ReadOnlyQuickCache addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new QuickCache(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "FH-30": 8,
      "GilbertTan19": 98
    }
  },
  {
    "path": "src/test/java/quickcache/storage/JsonSerializableQuickCacheTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import static Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import QuickCache;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        QuickCache addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        QuickCache typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "FH-30": 2,
      "GilbertTan19": 41
    }
  },
  {
    "path": "src/test/java/quickcache/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import static Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "GilbertTan19": 119
    }
  },
  {
    "path": "src/test/java/quickcache/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import QuickCache;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import ReadOnlyQuickCache;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "//import UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//import quickcache.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//import quickcache.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        QuickCache original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        ReadOnlyQuickCache retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "//        assertEquals(original, new QuickCache(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "FH-30": 5,
      "GilbertTan19": 61
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/EditFlashcardDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    private final EditCommand.EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor \u003d new EditCommand.EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditCommand.EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditFlashcardDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditFlashcardDescriptorBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor \u003d new EditCommand.EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setQuestion(flashcard.getQuestion().getValue());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setAnswer(flashcard.getAnswer());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (flashcard.getQuestion() instanceof MultipleChoiceQuestion) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            descriptor.setChoices(flashcard.getQuestion().getChoices().get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Sets the {@code question} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditFlashcardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setQuestion(question);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Sets the {@code answer} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditFlashcardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Sets the {@code choices} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withChoices(Choice[] choices) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setChoices(choices);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public EditCommand.EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "GilbertTan19": 75
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Choice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.MultipleChoiceQuestion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.OpenEndedQuestion;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Question 0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Answer 0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"Tag0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final Statistics DEFAULT_STATISTICS \u003d new Statistics();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        question \u003d new OpenEndedQuestion(DEFAULT_QUESTION, new Answer(DEFAULT_ANSWER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(Collections.singletonList(new Tag(DEFAULT_TAG)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        statistics \u003d DEFAULT_STATISTICS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * A constructor for the FlashcardBuilder."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param flashcard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        tags \u003d flashcard.getTags();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        statistics \u003d flashcard.getStatistics();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds a new {@code question} to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer answer \u003d new Answer(this.question.getAnswer().getValue());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question finalQuestion \u003d this.question.copyQuestion(question, answer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.question \u003d finalQuestion;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds a new {@code question} to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public FlashcardBuilder withMultipleChoiceQuestion(String question, String[] choices) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Answer answer \u003d new Answer(this.question.getAnswer().getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        Choice[] choiceArr \u003d new Choice[choices.length];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        for (int i \u003d 0; i \u003c choices.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            choiceArr[i] \u003d new Choice(choices[i]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.question \u003d new MultipleChoiceQuestion(question, answer, choiceArr);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds a new {@code answer} to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String question \u003d this.question.getValue();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Question finalQuestion \u003d this.question.copyQuestion(question, new Answer(answer));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.question \u003d finalQuestion;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Adds a new {@code Tag} to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @param tag the tag to be added."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return the FlashcardBuilder"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    public FlashcardBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(Collections.singletonList(new Tag(tag)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * Adds a few {@code Tag}s to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @param tagArr the array containing the tags."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     * @return the FlashcardBuilder."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardBuilder withTags(String... tagArr) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        List\u003cTag\u003e taglist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        for (String tag : tagArr) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "            taglist.add(new Tag(tag));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taglist);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshtyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshtyf"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Adds a new {@code Statistics} to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FlashcardBuilder withStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return new Flashcard(question, tags, statistics);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 19,
      "joshtyf": 32,
      "FH-30": 8,
      "GilbertTan19": 62
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/FlashcardUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static quickcache.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static quickcache.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.logic.commands.AddOpenEndedQuestionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * A utility class for Flashcard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns an add command string for adding the {@code flashcard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static String getAddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return AddOpenEndedQuestionCommand.COMMAND_WORD + \" \" + getFlashcardDetails(flashcard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static String getFlashcardDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        sb.append(PREFIX_QUESTION + flashcard.getQuestion().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        sb.append(PREFIX_ANSWER + flashcard.getAnswer().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashcardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static String getEditFlashcardDescriptorDetails(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                .append(question).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.getChoices().ifPresent(choice -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            for (int i \u003d 0; i \u003c choice.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                sb.append(PREFIX_CHOICE).append(choice[i].getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        descriptor.getTags().ifPresent(tags -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Tag[] empty \u003d new Tag[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Tag[] temp \u003d tags.toArray(empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            for (int i \u003d 0; i \u003c temp.length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                sb.append(PREFIX_TAG).append(temp[i].getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 7,
      "FH-30": 4,
      "GilbertTan19": 48
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/QuickCacheBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * A utility class to help with building QuickCache objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " *     {@code QuickCache ab \u003d new QuickCacheBuilder().withFlashcard(RANDOM1).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class QuickCacheBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private QuickCache quickCache;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public QuickCacheBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache \u003d new QuickCache();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public QuickCacheBuilder(QuickCache quickCache) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.quickCache \u003d quickCache;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public QuickCacheBuilder withFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        quickCache.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public QuickCache build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return quickCache;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 34
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static Flashcard getFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 4,
      "FH-30": 5,
      "-": 46
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.QuickCache;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import quickcache.model.flashcard.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final Tag[] RANDOM_1_TAG \u003d {new Tag(\"LSM1301\")};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM1 \u003d new FlashcardBuilder().withQuestion(\"Are heparins safe in pregnancy?\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withAnswer(\"Yes, They dont cross the placenta\").withTag(\"LSM1301\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM2 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withQuestion(\"What is the big downside for LMWH, direct thrombin and anti Xa inhibitors?\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withAnswer(\"No reversal agent\").withTag(\"LSM1301\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM3 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withQuestion(\"What is the binary representation of 4 5/8?\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        .withAnswer(\"110.101\").withTags(\"CS2100\", \"CS\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM4 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withQuestion(\"What is a digital circuit capable of holding a single digit\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        .withAnswer(\"Flip-flop\").withTags(\"CS2100\", \"CS\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM5 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withMultipleChoiceQuestion(\"Which of the following storage systems is best suited for \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                + \"storing and retrieving long strings of data that are processed \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                + \"in their sequential order?\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new String[]{\"Magnetic disk\", \"Main memory\", \"Optical CDs and DVDs\"})"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withAnswer(\"Optical CDs and DVDs\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM6 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withMultipleChoiceQuestion(\"What is a means of compressing images \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                + \"by blurring the boundaries between different colors while \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                + \"maintaining all brightness information\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new String[]{\"JPEG\", \"LZW\", \"MIDI\", \"GIF\"})"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withAnswer(\"JPEG\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Flashcard RANDOM7 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .withMultipleChoiceQuestion(\"Which of the following is not one of \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                + \"the three major classes of information systems?\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            new String[]{\"Decision support system\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \"Collaboration system\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \"Management information system\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "                \"Transaction processing system\"})"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final Flashcard RANDOM8 \u003d new FlashcardBuilder().withQuestion(\"Question One\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            .withAnswer(\"1\").withTags().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     * Returns a {@code Quickcache} with all the typical flashcards."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static QuickCache getTypicalQuickCache() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        QuickCache qc \u003d new QuickCache();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "            qc.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return qc;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(RANDOM1, RANDOM2, RANDOM3, RANDOM4, RANDOM5, RANDOM6, RANDOM7));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 57,
      "FH-30": 6
    }
  },
  {
    "path": "src/test/java/quickcache/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static final Index INDEX_SEVENTH_FLASHCARD \u003d Index.fromOneBased(7);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final Index VERY_BIG_INDEX_FLASHCARD \u003d Index.fromOneBased(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public static final Index INDEX_FIRST_MCQ_FLASHCARD \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static final Index INDEX_FIRST_OPEN_ENDED_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 6,
      "FH-30": 2,
      "-": 7,
      "GilbertTan19": 1
    }
  },
  {
    "path": "src/test/java/quickcache/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/quickcache/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "package quickcache.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import static quickcache.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "import quickcache.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003c?import quickcache.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003c?import quickcache.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josiahkhoo"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "josiahkhoo": 3,
      "-": 4
    }
  }
]
