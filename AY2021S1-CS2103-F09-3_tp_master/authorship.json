[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* This is implemented for **CS2103 Software Engineering Module**.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * as a UI mock up for a actual library administration system."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * as a personal library management system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* The project simulates an library administration software used for managing the details of library."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * It is written in **OOP fashion**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* For the detailed documentation of this project, see the **[IntelliBrary Product Website](https://github.com/AY2021S1-CS2103-F09-3/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "#### Acknowledgement"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* The design of UI takes references from peer team CS2103T-T10-4"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 10,
      "-": 5
    }
  },
  {
    "path": "bin/main/view/BookListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"publisher\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$publisher\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 5,
      "-": 34
    }
  },
  {
    "path": "bin/main/view/BookListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "-": 7
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9
    }
  },
  {
    "path": "bin/main/view/DarkTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#filterField, #bookListPanel, #bookWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 352
    }
  },
  {
    "path": "bin/main/view/Extensions.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 20
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 39
    }
  },
  {
    "path": "bin/main/view/LibraryBookDetailCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"stocking\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"50\" maxHeight\u003d\"1000\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cVBox fx:id\u003d\"bookList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 60
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "HCY123902": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "### Xu Caiyi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "\u003cimg src\u003d\"images/caiyi34777.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "[[github](https://github.com/Caiyi34777)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "[[portfolio](team/caiyi34777.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Documentation. In charge of Model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Huang Chengyu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cimg src\u003d\"images/hcy123902.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[[github](http://github.com/HCY123902)] [[portfolio](team/hcy123902.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Integration. In charge of Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Liu Yangming"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003cimg src\u003d\"images/richardcom.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[[github](http://github.com/richardcom)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[[portfolio](team/richardcom.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Testing. In charge of Storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### Jiang Siyuan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "\u003cimg src\u003d\"images/stefan-jiang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "[[github](http://github.com/Stefan-Jiang)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[[portfolio](team/Stefan-Jiang.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Code Quality. In charge of UI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Song Qifeng"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cimg src\u003d\"images/davidsqf.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "[[github](http://github.com/davidsqf)] [[portfolio](team/davidsqf.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Deliverables and deadlines. In charge of Logic."
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4,
      "Stefan-Jiang": 3,
      "richardcom": 13,
      "-": 34,
      "Caiyi34777": 4,
      "HCY123902": 3
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "1. Category the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "Caiyi34777": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "1. `Logic` uses the `LibraryParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Category` list in the `Library`, which `Book` references. This allows `Library` to only require one `Category` object per unique `Category`, instead of each `Book` needing their own `Category` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### \\[New\\] DeleteBy feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "####  Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "The current implementation of the DeleteBy command is supported by `DeleteByCommand.java` and `DeleteByCommandParser.java` "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below is an example usage scenario and how the DeleteBy mechanism behaves at each step."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 1. User input an input: `deleteBy n/Linear Algebra`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 2. Logic Manager would parse the input `deleteBy n/Linear Algebra`, and determines that it is a deleteBy command"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 3. DeleteByParser would then parse the book name and call the deleteBy Command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 4. Execution of delete would take place and the result will be updated in the filtered list in Model."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "The following sequence diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "![DeleteByCommandDiagram](images/DeleteBySequenceDiagram.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **Alternative 1 :** Adopts the delete function of the original project"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Cons: Not convenient for expert users and fast input."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **Alternative 2:** Individual command of DeleteByName, DeleteByISBN, DeleteByTimes"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Pros: Easier to implement without the need to parse different input types."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Cons: A large portion of duplicated code for multiple commands."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### Enhanced Edit Command"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "#### Existing implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "The existing implementation for enhanced edit command is facilitated by updated versions of `EditCommand`, `EditCommandParser`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "The relevant methods are"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* `EditCommand#createEditedBook(Book, EditBookDescriptor)` —  Creates and returns a Book with the details of Book"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "edited with EditBookDescriptor."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* `EditCommand#EditBookDescriptor()` — Creates a EditBookDescriptor for editing a book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* `EditCommandParser#parse(String)` — Parses the edit command created."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "The relationship between the updated book (including the newly added classes) and other components is shown as below."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "![The relationship between the book and the stocking and other components](images/ModelClassBookStockingDiagram.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Given below is an example usage scenario of how the edit command will be executed, "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "![EditCommandSequenceDiagram](images/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "The current enhancement is in alignment with other components of the book, which is easy to integrate into the product."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "##### Aspect: How to enhance the edit command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* **Alternative 1 (current choice):** Adopt the original format and structure."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * Pros: It is easier to make sure that the integration will go smoothly."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * Cons: More efforts are required in order to adjust the newly added classes / attribute to the previous ones"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* **Alternative 2:** Tweak the format of the edit command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * Pros: The design will be more user-friendly and user-oriented."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * Cons: There is potential risk that the modified command will not fit well into the system."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Storing and retrieving of stocking information"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#### Existing implementation"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The existing implementation of the storing and retriving of stocking information is facilitated by `Stocking`, `JsonAdaptedStocking`, `StockCommand`, and `StockCommandParser`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The relevant methods are"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `StockCommand#excecute()` — Execute the stock command according to the predicate specified by the book name and ISBN."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `JsonAdaptedStocking#JsonAdaptedStocking(int, int)` — Reads the stocking map from the json file and also changes the storage model into the json map to store the stocking information when necessary."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `JsonAdaptedStocking#JsonAdaptedStocking(Stocking)` — Transforms the stocking model into the json adapted model."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `JsonAdaptedStocking#toModelType(Stocking)` — Transforms the json adapted model into the stocking model."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The relationship between the book and stocking and other components is shown as below."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The relationship between the book and the stocking and other components](images/ModelClassBookStockingDiagram.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "These operations are incoperated into the storage read and write process in the execution."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#####Given below is an example usage scenario of how stocking information with be parsed when adding a book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 1. The user launches the application and types command add with `s/science library 10 central library 30`, and the logic manager calls the address book parser, which calls the add command parser."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 2. The add command parser calls the ParseUtil, which parses the string and returns a stocking"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The creation of the stocking](images/AddStockingParserSequenceDiagram.png)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 3. The add command parser uses the stocking and returns an add command, and this is returned by address book parser, and the logic manager executes the command and make some changes to the model."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#####Given below is an example usage scenario of how the stocking command will be executed, "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 1. The user types `Stock n/gun`, and the logic manager calls the address book parser, which calls the stock command parser."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 2. The stock command parser gets the list of book names and list of ISBN from the string and calls the constructor of the stock command to get a stock command"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The creation of the stock command](images/StockCommandParserSequenceDiagram.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 3. The stock command is returned and executed, updating the book list shown on the user interface with the stocking information of the corresponding book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The current implementation of the stocking is consistent with other components of the book, which brings convenience to the program integration."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "##### Aspect: How stocking executes and what the user expects"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Alternative 1 (current choice):** Requires the user to type out the library name to specify the stocking in a location."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Pros: The command is clear and understandable."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Cons: May bring some inconvenience when typing since some of the library name is a bit long."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Alternative 2:** Enables the user to use abbreviation of the library location."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Pros: Reduces the amount of typing and brings convenience to users."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Cons: May cause confusion to new user because of the abbreviation of the library location."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### \\[Proposed\\] Problem report feature"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "The proposed problem report mechanism stores problems in the instances of Library. It implements the following commands:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `report` — Adds new problem report to Library."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `view report` — Shows the reports added before."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th book in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new book. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* library administrators"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* has a need to manage a large number of books stored in different libraries and locations"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* has a need to purchase books according to the current stock and borrow frequency"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* has a need to keep track of the borrow history of books "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* * *`  | library administrator                      | check the location(e.g. central library, Hon Sui Sen Memorial Library) of each book   |provide accurate information to borrowers                                                                                 |"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* * *`  | library administrator                      | view the stockings of different books                                                 |efficiently increase the stockings of those very popular books to meet the demand of the readers                          |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | get an auto-generated list of most popular books                                      |know what books to purchase in the future                                                                                 |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | view book reviews made by other readers                                               |choose the interesting books based on reader feedback and reorder them so that they can be easily reached by other readers|"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | edit the information of a book                                                        |keep the book information in the database up to date                                                                      |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | add book reviews provided by readers                                                  |share my reading experience with other readers and help them during book selection                                        |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | make users grouped into different categories based on their reading appetite          |have a better understanding of the type of each of the user                                                               |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | see the books that are most frequently read by each category of users                 |know what books should be purchased for each category of users                                                            |"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | keep track of the group of books where a large number of users read all of them       |transfer the books read by the same category of users to the same location to make it convenient for the user             |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | expert user                                | add friendlier syntax                                                                 |boost efficiency                                                                                                          |"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | expert user                                | delete and add multiple book information within one command                           |it is more time efficient                                                                                                 |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "| `* * *`  | first time user                            | view the list of smaple data   | get a rough idea of how the project will look like                     |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "| `* * *`  | library administrator                      | purge all sample data in one go       |start using the app without further ado             |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "| `* * *`  | library administrator                      | check the borrowing status of a certain book       |tell students whether they can borrow this book or not             |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "(For all use cases below, the **System** is the `ItelliBrary` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC01 - Purge sample data**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  1. User requests to purge all sample data."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* 1a. Some or all sample data had already been deleted before the \u0027purge\u0027 request "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 1a1. The application deletes all remaining sample data."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**Use case: UC02 - Add Books**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  1. User request to add a new book into the library."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  2. The application adds the book to the library and shows a successfull message to the user."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1a. The book to be added is already found in the library."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1a1. The application shows an error message that the book is already stored in the library."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1b. Some information about the book is not entered in the command."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1b1. The application shows an error message that the information about the book is incomplete."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1c. The data type of some of the book information is incorrect."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1c1. The application shows an error message that data type of some of the book information is incorrect."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC03 - Delete Books**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  1. User request to delete a book from the library."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  2. The application deletes the book from the library and shows a successfull message to the user."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1a. The book to be deleted cannot be found in the library."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1a1. The application shows an error message that the book to be deleted cannot be found in the library."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Use case: UC04 - Check the location**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "1.  User request to check the location of a book using a command."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "2.  The application shows the relevant information of the book, including the storage location."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1a. The book name or ISBN given by the user is not found in the record."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1a1. The application shows an error message that the book is not found."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1b. The location of the book is not recorded or the list is empty."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1b1. The application shows an error message that the location of the book is not recorded."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Use case: UC05 - view the stockings of different books**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "1.  User request to check the stocking of a book using a command."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "2.  The application shows the relevant information of the book, including the stocking of the book."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1a. The book name or ISBN given by the user is not found in the record."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1a1. The application shows an error message that the book is not found."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1b. The stocking of the book is not recorded."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1b1. The application shows an error message that the stocking of the book is not recorded."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**Use case UC06 - View Sample Data**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "1.  User requests to view the sample data of the app"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "2.  IntelliBrary shows the information of a list of books"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* 2a. Sample Data is missing."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case UC07 - Delete a book**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "1.  User requests to list books"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "2.  IntelliBrary shows a list of books"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "3.  User requests to delete a specific book in the list"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "4.  IntelliBrary deletes the book"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 3a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC08 - Edit a book**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  1. User requests to edit a book and inputs new information."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  2. IntelliBrary modifies the current information of that book."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* 1a. The book to be editted cannot be found."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC09 - Check the borrowing status of a book**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  1. User requests to check the borrowing status of a book."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  2. IntelliBrary tells the user whether there are available stockings of this book."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* 1a. The book to be checked cannot be found."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      Use case ends.  "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**Use case: UC10 - Get usage times of a book**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  1. User requests to get the usage times of a book and input index/book title/book isbn."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  2. IntelliBrary tells the user the usage times of the certain book."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* 1a. The book title to be checked cannot be found."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      Use case ends.        "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* 1b. The book isbn to be checked cannot be found."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      Use case ends.   "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* 1c. The index is out of bound"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      Use case ends.   "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**Use case: UC11 - Get number of books borrowed**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  1. User requests to get the number of books borrowed by the whole borrower cluster."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  2. IntelliBrary tells the user the number of books borrowed by the whole borrower cluster."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Use case ends.  "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1.  Technical requirements: should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "richardcom"
        },
        "content": "2.  Data requirements: should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "richardcom"
        },
        "content": "3.  Performance requirements: for core functions, the system should respond within two seconds."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "richardcom"
        },
        "content": "4.  Quality requirements: a user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "richardcom"
        },
        "content": "5.  Process requirements: the project is expected to adhere to the course schedule and delivers weekly tasks on time."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "richardcom"
        },
        "content": "6.  Domain rules: the number of books at each library cannot be less than three."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Deleting a book"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. Deleting a book while all books are being shown"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "richardcom"
        },
        "content": "   1. Prerequisites: List all books using the `list` command. Multiple books in the list."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 56,
      "Stefan-Jiang": 56,
      "richardcom": 94,
      "-": 322,
      "Caiyi34777": 35,
      "HCY123902": 117
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "IntelliBrary is an **app for managing storage, purchase, borrowing, and reader review of books in NUS library via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Targeted at users who can type fast, IntelliBrary can get your library management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "2. Download the latest `intellibrary.jar` from [here]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your IntelliBrary."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`list`** : Lists all contacts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "   * **`add`**`n/Linear Algebra i/98765432 e/xxxxxx@example.com ad/xxxxx c/Science c/Math t/20 s/central library 0 science library 0 a/Victor p/pku` : Adds a Book named `Linear Algebra` to the Library."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd book shown in the current list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "   * **`clear`** : Deletes all books."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Linear Algebra`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  e.g `n/NAME [c/CATEGORY]` can be used as `n/The Great Gatsby c/Novel` or as `n/The Great Gatsby`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  e.g. `[c/CATEGORY]…` can be used as (i.e. 0 times), `c/Novel`, `c/Novel c/Classic` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PUBLISHER`, `p/PUBLISHER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Adding a book : `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a book to the booklist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `add n/NAME i/ISBN e/EMAIL ad/ADDRESS [c/CATEGORY]...t/TIMES s/STOCKINGS a/AUTHOR p/PUBLISHER`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `add n/Linear Algebra i/98765432 e/xxxxxx@example.com ad/xxxxx c/Science c/Math t/20 s/central library 0 science library 0 a/Victor p/pku`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `add n/Artificial Intelligence i/9780134610993 e/xxxxxx@example.com ad/xxxxx c/Science t/20 s/central library 2 science library 3 a/Stuart Russell p/PEARSON`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Deleting a book: `deleteBy`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Delete a book from the booklist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Format:  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`deleteBy [n/NAME] [i/ISBN] [t/TIMES]` (choose one of the three prefixes in the command)  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `deleteBy n/Linear Algebra`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `deleteBy i/123456 `"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Check stocking of book in every location: `stock`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Checks the list of locations of where a certain book is stored."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Currently only the science library and central library are available locations."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Format: `stock [n/BOOK NAME] [i/ISBN]`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Both the name and the ISBN of the book are optional argument in the command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The book name searching follows the all match pattern, where the search name string will be split into keywords according to the white space in between, and the book name will need to contain all of the keywords."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The ISBN name searching follows the some match pattern, where the search number string will be split into keywords according to the white space in between, and the book number will need to contain some of the keywords."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The keyword of book name is case insensitive."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "If both the name and the ISBN are used in the command, then the result will be the stocking information of the books that satisfy either of the conditions."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "If neither of them are present, then the command will return the stocking information of all the books."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "If the value after the prefix is empty, then the command will return the stocking information of all the books."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "For example, the command stock n/ and the command stock i/ will return the stocking information of all the books."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `stock n/A brief history of time i/9780553175219`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `stock n/A brief history of time`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `stock i/9780553175219`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `stock`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Search for review of book: `searchReview`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Check the list of reviews of certain book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Format: `searchReview [n/BOOK NAME] [i/ISBN]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The usage is similar to the stock command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `searchReview n/A brief history of time i/9780553175219`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `searchReview n/A brief history of time`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `searchReview i/9780553175219`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `searchReview`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Add review: `addReview`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Add a review to a certain book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Format: `addReview INDEX ra/RATING re/REVIEW CONTENT`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The book review will be added according to the index of the book in the current shown book list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The rating needs to be a string representing an integer from 0 to 5."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The review content should not be empty."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `addReview 1 ra/5 re/The book is interesing`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Delete review: `deleteReview`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Delete a review of a certain book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Format: `deleteReview INDEX rn/REVIEW INDEX`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The book review will be deleted from the review list of the book according to the index of the book and the index of the review in the review list of the book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `deleteReview 1 rn/1`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "### Check usage"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Checks usage times of a certain book specified by user. Book is specified by any of the followings:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* one base index in storage."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* book isbn"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* book name"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `usage [INDEX]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `usage i/[ISBN]`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `usage n/[BOOK_NAME]`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `usage 2`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `usageBy i/9780141439518`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `usageBy n/Pride and Prejudice`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "### Check history"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Checks borrowing times during the whole timeline."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* `history`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### Viewing sample data"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Have a look at the sample data for the application when open app for the first time."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "*  The sample data will only show up if there is no local data file of IntelliBrary"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### Editing a book : `edit`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Edits the information of an existing book in the library."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Format: `edit INDEX [n/NAME] [i/ISBN] [e/EMAIL] [ad/ADDRESS] [t/TIMES] [c/CATEGORY]… [s/STOCKING] [a/ATUHOR] [p/PUBLISHER] [ra/RATING] [re/REVIEW] [rn/REVIEWNUMBER]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* Edits the book at the specified `INDEX`. The index refers to the index number shown in the displayed book list. The index **must be a positive integer** 1, 2, 3..."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* All fileds are optional but at least one of the optional fields must be provided."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* When editing categories, the existing categories of the book will be removed i.e adding of categories is not cumulative."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* You can remove all the book’s categories by typing `c/` without"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    specifying any categories after it."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* \u0027edit 2 n/A Brief History of Time e/abhot@gmail.com\u0027 Edits the name and contact email address of the 2nd book to be A Brief History of Time and abhot@gmail.com respectively."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* \u0027edit 3 p/Scribner Publisher t/\u0027 Edits the publisher of the 3rd book to be Scribner Publisher and clears all existing tags."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Check borrowed status `[coming soon]`: `check`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Check the status of a certain book- whether it is available or not."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `status /BOOK_NAME`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `status /Harry Potter`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `status /Linear Algebra`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Purge sample data `[coming soon]`: `purge`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Purge all sample data in one go."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `purge`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `purge`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Report problems: `report`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Report a problem found in library."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `report severity/SEVERITY problem/PROBLEM`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Note that `SEVERITY` is limited to `high`, `medium`, and `low`, case insensitive."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `report severity/high problem/book is broken`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### View problems: `view`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "View all reported problems."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `view`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `view`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous IntelliBrary home folder."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [i/ISBN] [e/EMAIL] [ad/ADDRESS] [t/TIMES] [c/CATEGORY]… [s/STOCKING] [a/ATUHOR] [p/PUBLISHER] [ra/RATING] [re/REVIEW] [rn/REVIEWNUMBER]`\u003cbr\u003e e.g.,`edit 3 p/Scribner Publisher t/`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 30,
      "Stefan-Jiang": 26,
      "richardcom": 26,
      "-": 124,
      "Caiyi34777": 22,
      "HCY123902": 57
    }
  },
  {
    "path": "docs/_sass/minima/skins/classic.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@charset \"utf-8\";"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "$brand-color:           #828282 !default;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "$brand-color-light:     lighten($brand-color, 40%) !default;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "$brand-color-dark:      darken($brand-color, 25%) !default;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "$text-color:            #111 !default;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "$background-color:      #fdfdfd !default;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "$code-background-color: #eef !default;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "$link-base-color:       #2a7ae2 !default;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "$link-visited-color:    darken($link-base-color, 15%) !default;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "$table-text-color:      lighten($text-color, 18%) !default;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "$table-zebra-color:     lighten($brand-color, 46%) !default;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "$table-header-bg-color: lighten($brand-color, 43%) !default;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "$table-header-border:   lighten($brand-color, 36%) !default;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "$table-border-color:    $brand-color-light !default;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "// Syntax highlighting styles should be adjusted appropriately for every \"skin\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "// ----------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".highlight {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  .c     { color: #998; font-style: italic } // Comment"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  .err   { color: #a61717; background-color: #e3d2d2 } // Error"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  .k     { font-weight: bold } // Keyword"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  .o     { font-weight: bold } // Operator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  .cm    { color: #998; font-style: italic } // Comment.Multiline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  .cp    { color: #999; font-weight: bold } // Comment.Preproc"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  .c1    { color: #998; font-style: italic } // Comment.Single"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  .cs    { color: #999; font-weight: bold; font-style: italic } // Comment.Special"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  .gd    { color: #000; background-color: #fdd } // Generic.Deleted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  .gd .x { color: #000; background-color: #faa } // Generic.Deleted.Specific"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  .ge    { font-style: italic } // Generic.Emph"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  .gr    { color: #a00 } // Generic.Error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  .gh    { color: #999 } // Generic.Heading"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  .gi    { color: #000; background-color: #dfd } // Generic.Inserted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  .gi .x { color: #000; background-color: #afa } // Generic.Inserted.Specific"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  .go    { color: #888 } // Generic.Output"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  .gp    { color: #555 } // Generic.Prompt"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  .gs    { font-weight: bold } // Generic.Strong"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  .gu    { color: #aaa } // Generic.Subheading"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  .gt    { color: #a00 } // Generic.Traceback"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  .kc    { font-weight: bold } // Keyword.Constant"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  .kd    { font-weight: bold } // Keyword.Declaration"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  .kp    { font-weight: bold } // Keyword.Pseudo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  .kr    { font-weight: bold } // Keyword.Reserved"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  .kt    { color: #458; font-weight: bold } // Keyword.Type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  .m     { color: #099 } // Literal.Number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  .s     { color: #d14 } // Literal.String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  .na    { color: #008080 } // Name.Attribute"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  .nb    { color: #0086B3 } // Name.Builtin"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  .nc    { color: #458; font-weight: bold } // Name.Class"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  .no    { color: #008080 } // Name.Constant"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  .ni    { color: #800080 } // Name.Entity"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  .ne    { color: #900; font-weight: bold } // Name.Exception"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  .nf    { color: #900; font-weight: bold } // Name.Function"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  .nn    { color: #555 } // Name.Namespace"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  .nt    { color: #000080 } // Name.Category"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  .nv    { color: #008080 } // Name.Variable"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  .ow    { font-weight: bold } // Operator.Word"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  .w     { color: #bbb } // Text.Whitespace"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  .mf    { color: #099 } // Literal.Number.Float"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  .mh    { color: #099 } // Literal.Number.Hex"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  .mi    { color: #099 } // Literal.Number.Integer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  .mo    { color: #099 } // Literal.Number.Oct"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  .sb    { color: #d14 } // Literal.String.Backtick"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  .sc    { color: #d14 } // Literal.String.Char"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  .sd    { color: #d14 } // Literal.String.Doc"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  .s2    { color: #d14 } // Literal.String.Double"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  .se    { color: #d14 } // Literal.String.Escape"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  .sh    { color: #d14 } // Literal.String.Heredoc"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  .si    { color: #d14 } // Literal.String.Interpol"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  .sx    { color: #d14 } // Literal.String.Other"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  .sr    { color: #009926 } // Literal.String.Regex"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  .s1    { color: #d14 } // Literal.String.Single"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  .ss    { color: #990073 } // Literal.String.Symbol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  .bp    { color: #999 } // Name.Builtin.Pseudo"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  .vc    { color: #008080 } // Name.Variable.Class"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  .vg    { color: #008080 } // Name.Variable.Global"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  .vi    { color: #008080 } // Name.Variable.Instance"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  .il    { color: #099 } // Literal.Number.Integer.Long"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "Caiyi34777": 1
    }
  },
  {
    "path": "docs/_sass/minima/skins/solarized.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@charset \"utf-8\";"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// Solarized skin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "// Created by Sander Voerman \u003cmailto:sander@savoerman.nl\u003e using the Solarized"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "// color scheme by Ethan Schoonover \u003chttps://ethanschoonover.com/solarized\u003e."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// This style sheet implements two options for the minima.skin setting:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "// \"solarized\" for light mode and \"solarized-dark\" for dark mode."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-is-dark: false !default;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "// Color scheme"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "// ------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "// The inline comments show the canonical L*a*b values for each color."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base03:   #002b36;  // 15 -12 -12"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base02:   #073642;  // 20 -12 -12"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base01:   #586e75;  // 45 -07 -07"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base00:   #657b83;  // 50 -07 -07"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base0:    #839496;  // 60 -06 -03"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base1:    #93a1a1;  // 65 -05 -02"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base2:    #eee8d5;  // 92 -00  10"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-base3:    #fdf6e3;  // 97  00  10"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-yellow:   #b58900;  // 60  10  65"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-orange:   #cb4b16;  // 50  50  55"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-red:      #dc322f;  // 50  65  45"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-magenta:  #d33682;  // 50  65 -05"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-violet:   #6c71c4;  // 50  15 -45"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-blue:     #268bd2;  // 55 -10 -45"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-cyan:     #2aa198;  // 60 -35 -05"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-green:    #859900;  // 60 -20  65"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-mono3:    $sol-base3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-mono2:    $sol-base2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-mono1:    $sol-base1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-mono00:   $sol-base00;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "$sol-mono01:   $sol-base01;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@if $sol-is-dark {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  $sol-mono3:  $sol-base03;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  $sol-mono2:  $sol-base02;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  $sol-mono1:  $sol-base01;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  $sol-mono00: $sol-base0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  $sol-mono01: $sol-base1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "// Minima color variables"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "// ----------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "$brand-color:           $sol-mono1 !default;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "$brand-color-light:     mix($sol-mono1, $sol-mono3) !default;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "$brand-color-dark:      $sol-mono00 !default;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "$text-color:            $sol-mono01 !default;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "$background-color:      $sol-mono3 !default;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "$code-background-color: $sol-mono2 !default;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "$link-base-color:       $sol-blue !default;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "$link-visited-color:    mix($sol-blue, $sol-mono00) !default;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "$table-text-color:      $sol-mono00 !default;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "$table-zebra-color:     mix($sol-mono2, $sol-mono3) !default;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "$table-header-bg-color: $sol-mono2 !default;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "$table-header-border:   $sol-mono1 !default;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "$table-border-color:    $sol-mono1 !default;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "// Syntax highlighting styles"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "// --------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".highlight {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  .c     { color: $sol-mono1; font-style: italic } // Comment"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  .err   { color: $sol-red } // Error"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  .k     { color: $sol-mono01; font-weight: bold } // Keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  .o     { color: $sol-mono01; font-weight: bold } // Operator"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  .cm    { color: $sol-mono1; font-style: italic } // Comment.Multiline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  .cp    { color: $sol-mono1; font-weight: bold } // Comment.Preproc"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  .c1    { color: $sol-mono1; font-style: italic } // Comment.Single"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  .cs    { color: $sol-mono1; font-weight: bold; font-style: italic } // Comment.Special"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  .gd    { color: $sol-red } // Generic.Deleted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  .gd .x { color: $sol-red } // Generic.Deleted.Specific"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  .ge    { color: $sol-mono00; font-style: italic } // Generic.Emph"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  .gr    { color: $sol-red } // Generic.Error"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  .gh    { color: $sol-mono1 } // Generic.Heading"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  .gi    { color: $sol-green } // Generic.Inserted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "  .gi .x { color: $sol-green } // Generic.Inserted.Specific"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  .go    { color: $sol-mono00 } // Generic.Output"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  .gp    { color: $sol-mono00 } // Generic.Prompt"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  .gs    { color: $sol-mono01; font-weight: bold } // Generic.Strong"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "  .gu    { color: $sol-mono1 } // Generic.Subheading"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  .gt    { color: $sol-red } // Generic.Traceback"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  .kc    { color: $sol-mono01; font-weight: bold } // Keyword.Constant"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  .kd    { color: $sol-mono01; font-weight: bold } // Keyword.Declaration"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  .kp    { color: $sol-mono01; font-weight: bold } // Keyword.Pseudo"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  .kr    { color: $sol-mono01; font-weight: bold } // Keyword.Reserved"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  .kt    { color: $sol-violet; font-weight: bold } // Keyword.Type"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  .m     { color: $sol-cyan } // Literal.Number"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  .s     { color: $sol-magenta } // Literal.String"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "  .na    { color: $sol-cyan } // Name.Attribute"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "  .nb    { color: $sol-blue } // Name.Builtin"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  .nc    { color: $sol-violet; font-weight: bold } // Name.Class"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  .no    { color: $sol-cyan } // Name.Constant"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  .ni    { color: $sol-violet } // Name.Entity"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "  .ne    { color: $sol-violet; font-weight: bold } // Name.Exception"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  .nf    { color: $sol-blue; font-weight: bold } // Name.Function"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  .nn    { color: $sol-mono00 } // Name.Namespace"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  .nt    { color: $sol-blue } // Name.Category"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "  .nv    { color: $sol-cyan } // Name.Variable"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  .ow    { color: $sol-mono01; font-weight: bold } // Operator.Word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  .w     { color: $sol-mono1 } // Text.Whitespace"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  .mf    { color: $sol-cyan } // Literal.Number.Float"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  .mh    { color: $sol-cyan } // Literal.Number.Hex"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  .mi    { color: $sol-cyan } // Literal.Number.Integer"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  .mo    { color: $sol-cyan } // Literal.Number.Oct"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  .sb    { color: $sol-magenta } // Literal.String.Backtick"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "  .sc    { color: $sol-magenta } // Literal.String.Char"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  .sd    { color: $sol-magenta } // Literal.String.Doc"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  .s2    { color: $sol-magenta } // Literal.String.Double"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  .se    { color: $sol-magenta } // Literal.String.Escape"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  .sh    { color: $sol-magenta } // Literal.String.Heredoc"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "  .si    { color: $sol-magenta } // Literal.String.Interpol"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  .sx    { color: $sol-magenta } // Literal.String.Other"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  .sr    { color: $sol-green } // Literal.String.Regex"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  .s1    { color: $sol-magenta } // Literal.String.Single"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  .ss    { color: $sol-magenta } // Literal.String.Symbol"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  .bp    { color: $sol-mono1 } // Name.Builtin.Pseudo"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  .vc    { color: $sol-cyan } // Name.Variable.Class"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  .vg    { color: $sol-cyan } // Name.Variable.Global"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  .vi    { color: $sol-cyan } // Name.Variable.Instance"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  .il    { color: $sol-cyan } // Literal.Number.Integer.Long"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 132,
      "Caiyi34777": 1
    }
  },
  {
    "path": "docs/diagrams/AddStockingParserSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:ParseUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"s:Stocking\" as Stocking LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[-\u003e AddCommandParser : parse(\"...\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseStocking(\"science library 10 central library 30\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create Stocking"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "ParserUtil -\u003e Stocking"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate Stocking"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Stocking --\u003e ParserUtil : s"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate Stocking"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "ParserUtil -\u003e AddCommandParser : s"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[\u003c--AddCommandParser : a"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[\u003c-[hidden]- AddCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 41
    }
  },
  {
    "path": "docs/diagrams/AddStockingSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:ParseUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"s:Stocking\" as Stocking LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[-\u003e LogicManager : execute(\"Add ...\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"Add ...\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddressBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddressBookParser -\u003e AddCommandParser : parse(\"...\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseStocking(\"science library 10 central library 30\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create Stocking"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "ParserUtil -\u003e Stocking"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate Stocking"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Stocking --\u003e ParserUtil : s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate Stocking"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "ParserUtil -\u003e AddCommandParser : s"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommand -\u003e Model : AddBook(...)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 84
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBook(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueBookList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueCategoryList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "UniqueCategoryList -[hidden]down- UniqueBookList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "UniqueCategoryList -[hidden]down- UniqueBookList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "UniqueCategoryList *-right-\u003e \"*\" Category"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "UniqueBookList o-right-\u003e Book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book -up-\u003e \"*\" Category"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Isbn"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 9,
      "-": 10,
      "Caiyi34777": 2
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "participant \":DeleteByCommandParser\" as DeleteByCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "participant \"d:DeleteByCommand\" as DeleteByCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[-\u003e LogicManager : execute(\"deleteBy n/Linear Algebra\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"deleteBy n/Linear Algebra\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "create DeleteByByCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "AddressBookParser -\u003e DeleteByByCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "activate DeleteByCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deactivate DeleteByCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "AddressBookParser -\u003e DeleteByCommandParser : parse(\"Linear Algebra\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "activate DeleteByCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "create DeleteByCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommandParser -\u003e DeleteByCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "activate DeleteByCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommand --\u003e DeleteByCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deactivate DeleteByCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deactivate DeleteByCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "destroy DeleteByCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "LogicManager -\u003e DeleteByCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "activate DeleteByCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommand -\u003e Model : deleteByBook(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Model --\u003e DeleteByCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "CommandResult --\u003e DeleteByCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "DeleteByCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deactivate DeleteByCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 28,
      "-": 41
    }
  },
  {
    "path": "docs/diagrams/EditSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "participant \":LibraryParser\" as LibraryParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "participant \"d:EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "[-\u003e LogicManager : execute(\"edit 1 a/Jane\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "LogicManager -\u003e LibraryParser : parseCommand(\"edit 1 a/Jane\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate LibraryParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "LibraryParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommandParser --\u003e LibraryParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "LibraryParser -\u003e EditCommandParser : parse(\"1, a/Jane\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommandParser -\u003e EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommand --\u003e EditCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommandParser --\u003e LibraryParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommandParser -[hidden]-\u003e LibraryParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "LibraryParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate LibraryParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "LogicManager -\u003e EditCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommand -\u003e Model : editBook(1, a/Jane)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Model --\u003e EditCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "CommandResult --\u003e EditCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 69
    }
  },
  {
    "path": "docs/diagrams/ModelClassBookStockingDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueBookList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueCategoryList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "UniqueCategoryList -[hidden]down- UniqueBookList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "UniqueCategoryList -[hidden]down- UniqueBookList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "UniqueCategoryList *-right-\u003e \"*\" Category"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "UniqueBookList o-right-\u003e Book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book -up-\u003e \"*\" Category"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Isbn"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Stocking"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Publisher"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Author"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Book *--\u003e Times"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 25
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Package Book {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Class Book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Class Isbn"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Class UniqueBookList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Package Category {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Class Category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "AddressBook *--\u003e \"1\" UniqueBookList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "UniqueBookList o--\u003e \"*\" Book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Isbn"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Book *--\u003e \"*\" Category"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Name -[hidden]right-\u003e Isbn"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Isbn -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "ModelManager --\u003e\"1\" Book : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 11,
      "-": 40,
      "Caiyi34777": 5
    }
  },
  {
    "path": "docs/diagrams/StockCommandParserSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":StockCommandParser\" as StockCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"s:StockCommand\" as StockCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[-\u003e StockCommandParser : parse(\"n/gun\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create StockCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommandParser -\u003e StockCommand : StockCommand(names, numbers)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommand --\u003e StockCommandParser : s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[\u003c--StockCommandParser : s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[\u003c-[hidden]- StockCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "destroy StockCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 26
    }
  },
  {
    "path": "docs/diagrams/StockCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":AddressBookParser\" as StockressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":StockCommandParser\" as StockCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:ParseUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"a:StockCommand\" as StockCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \"s:Stocking\" as Stocking LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[-\u003e LogicManager : execute(\"stock n/gun\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "LogicManager -\u003e StockressBookParser : parseCommand(\"stock n/gun\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create StockCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockressBookParser -\u003e StockCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommandParser --\u003e StockressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockressBookParser -\u003e StockCommandParser : parse(\"...\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommandParser -\u003e ParserUtil : parseStocking(\"science library 10 central library 30\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create Stocking"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "ParserUtil -\u003e Stocking"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate Stocking"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Stocking --\u003e ParserUtil : s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate Stocking"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "ParserUtil -\u003e StockCommandParser : s"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create StockCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommandParser -\u003e StockCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommand --\u003e StockCommandParser : a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommandParser --\u003e StockressBookParser : a"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommandParser -[hidden]-\u003e StockressBookParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "destroy StockCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockressBookParser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "LogicManager -\u003e StockCommand : execute()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate StockCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommand -\u003e Model : StockBook(...)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Model --\u003e StockCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "CommandResult --\u003e StockCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "StockCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate StockCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 84
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonSerializableBook"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "JsonSerializableBook .right.\u003e JsonAdaptedCategory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 22
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Class BookListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Class BookCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "MainWindow *-down-\u003e BookListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "BookListPanel -down-\u003e BookCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "BookListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "BookCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "BookCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "BookListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "ecp -\u003e ec ++: index, editBookDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "title:IntelliBrary"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "![Ui](images/ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**IntelliBrary is a desktop application for managing your libraries and books in it.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* If you are interested in using IntelliBrary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* If you are interested about developing IntelliBrary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 5,
      "-": 14
    }
  },
  {
    "path": "docs/team/Stefan-Jiang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "title: Jiang Siyuan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **New Feature**: Added the ability to View Sample Data and Edit Books"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 13
    }
  },
  {
    "path": "docs/team/caiyi34777.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* Hi! I am Caiyi! Welcome to my portfolio!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* I am looking forward to upcoming tasks for tp! :P "
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 2
    }
  },
  {
    "path": "docs/team/davidsqf.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "title: Song Qifeng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **New Feature**: Added the ability to Purge sample data and Check borrowed status"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 13
    }
  },
  {
    "path": "docs/team/hcy123902.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "title: Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **New Feature**: Coming soon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Managed releases"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Coming soon"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * Added documentation for the features"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * Added implementation details."
      }
    ],
    "authorContributionMap": {
      "HCY123902": 27
    }
  },
  {
    "path": "docs/team/richardcom.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "title: Liu Yangming\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **New Feature**: Added the ability to add books into the library."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * What it does: allows the user to add new books into the library."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make changes to the booklist in the library."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * Added documentation for the features `add` and `delete`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * Added documentation for the features `add` and `delete`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * Added documentation about Non-functional requirements of the project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 24
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Changes the remark of an existing book in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the book identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"by the index number used in the last book listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index of the book in the filtered book list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param remark of the book to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of book data. We achieve that by working with the `Book` model. Each field in a Book is implemented as a separate class (e.g. a `Name` object represents the book’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Create a new `Remark` in `seedu.address.model.book`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Simply add the following to [`seedu.address.ui.BookCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Then insert the following into [`main/resources/view/BookListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Modify `Book` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Since `BookCard` displays data from a `Book`, we need to update `Book` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Modify `Book`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "richardcom"
        },
        "content": "We change the constructor of `Book` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Update other usages of `Book`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Unfortunately, a change to `Book` will cause other commands to break, you will have to modify these commands to use the updated `Book`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "richardcom"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Book` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "richardcom"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedBook` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedBook` to work with our new `Book`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Now that we have finalized the `Book` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    remark.setText(book.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "richardcom"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Book`. Since all fields in a `Book` are immutable, we create a new instance of a `Book` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "richardcom"
        },
        "content": "save it with `Model#setBook()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Book: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Book: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new Book(bookToEdit.getName(), bookToEdit.getIsbn(), bookToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                bookToEdit.getAddress(), remark, bookToEdit.getCategories());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedBook));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code bookToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String generateSuccessMessage(Book bookToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return String.format(message, bookToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "richardcom": 39,
      "-": 355
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Book` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Book`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "The `address` field in `Book` is actually an instance of the `seedu.address.model.book.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditBookDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Let’s try removing references to `Address` in `EditBookDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. Safe delete the field `address` in `EditBookDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Book` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `BookCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "A quick look at the `BookCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "\u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`invalidBookAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"name\": \"Book with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "richardcom": 14,
      "-": 87,
      "Caiyi34777": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/ISBN] [e/EMAIL] [a/ADDRESS] [t/CATEGORY]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditBookDescriptor`. Recall that we can verify the contents of `editBookDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       Book editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       if (!bookToEdit.isSameBook(editedBook) \u0026\u0026 model.hasBook(editedBook)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       books.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "richardcom"
        },
        "content": "           source.getBookList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                 .map(JsonAdaptedBook::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. It appears that a `JsonAdaptedBook` is created for each `Book` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    5.  Add a new field to `Book`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "richardcom": 13,
      "-": 236,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.storage.LibraryStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assert logger !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Library ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        LibraryStorage libraryStorage \u003d new JsonLibraryStorage(userPrefs.getLibraryFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s library and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * The data from the sample library will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * or an empty library will be used instead if errors occur when reading {@code storage}\u0027s library."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Optional\u003cReadOnlyLibrary\u003e libraryOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        ReadOnlyLibrary initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            libraryOptional \u003d storage.readLibrary();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            if (!libraryOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Library\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            initialData \u003d libraryOptional.orElseGet(SampleDataUtil::getSampleLibrary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Library\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            logger.warning(\"problem while reading from the file. Will be starting with an empty Library\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            logger.warning(\"problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        logger.info(\"Starting Library \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Library ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 23,
      "richardcom": 2,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final String LOG_FILE \u003d \"intellibrary.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assert logger !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX \u003d \"The review index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DELETE_NAME \u003d \"The book to delete is not found\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_CHECK_NAME \u003d \"The book to check is not found\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_BORROWING_TIMES_HISTORY \u003d \"All history borrowing times sum up to %1$d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 10,
      "Caiyi34777": 3,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns the Library."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @see seedu.address.model.Model#getLibrary()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 3,
      "Stefan-Jiang": 6,
      "richardcom": 3,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.parser.LibraryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final LibraryParser libraryParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        libraryParser \u003d new LibraryParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Command command \u003d libraryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            storage.saveLibrary(model.getLibrary());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return model.getLibrary();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return model.getLibraryFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "Stefan-Jiang": 10,
      "richardcom": 3,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Adds a book to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + PREFIX_ISBN + \"ISBN \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_TIMES + \"TIMES \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_STOCKING + \"STOCKINGS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_PUBLISHER + \"PUBLISHER\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_NAME + \"Linear Algebra \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + PREFIX_ISBN + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_EMAIL + \"xxxxxx@example.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_ADDRESS + \"xxxxx \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_CATEGORY + \"Science \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_CATEGORY + \"Math \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_TIMES + \"20 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_STOCKING + \"central library 0 science library 0 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_AUTHOR + \"Victor \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            + PREFIX_PUBLISHER + \"pku\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the address book\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public AddCommand(Book book) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 3,
      "richardcom": 28,
      "-": 44,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProblemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVERITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Adds a book to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class AddProblemCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reports a problem. \" + \"Parameters: \" + PREFIX_SEVERITY"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            + \"severity \" + PREFIX_DESCRIPTION + \"description \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROB \u003d \"This problem already exists\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"problem reported: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private final Problem toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates an AddProblemCommand to add the specified {@code problem}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public AddProblemCommand(Problem problem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        toAdd \u003d problem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (model.hasProblem(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.addProblem(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                || (other instanceof AddProblemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProblemCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 42,
      "richardcom": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Adds the review of the corresponding book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class AddReviewCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addReview\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add the review to the book at\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"the corresponding position in the list, where the rating is an integer between 0 and 5.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REVIEW + \"REVIEW CONTENT]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + CliSyntax.PREFIX_RATING + \"5\" + \" \" + CliSyntax.PREFIX_REVIEW"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"The book is interesting\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_ADD_REVIEW_SUCCESS \u003d \"The review has been added to the book %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Review review;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a add review command to add the review of the corresponding book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param index The index of the book in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param review The review of the book to add."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public AddReviewCommand(Index index, Review review) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(review);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (index.getZeroBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Book bookToReview \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Book reviewedBook \u003d createdChangedBook(bookToReview, review);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        model.setBook(bookToReview, reviewedBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList((reviewedBook.getName().fullName).split(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameMatchesKeywordPredicate nameMacthedKeywordsPredicate \u003d new NameMatchesKeywordPredicate(keywords);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        model.updateFilteredBookList(nameMacthedKeywordsPredicate, Mode.REVIEW);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_REVIEW_SUCCESS, reviewedBook));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static Book createdChangedBook(Book book, Review review) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Name name \u003d book.getName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Isbn isbn \u003d book.getIsbn();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Email email \u003d book.getEmail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Address address \u003d book.getAddress();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Set\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e(book.getReviews());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviews.add(review);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Times times \u003d book.getTimes();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Set\u003cCategory\u003e categories \u003d book.getCategories();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Author author \u003d book.getAuthor();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Publisher publisher \u003d book.getPublisher();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking stocking \u003d book.getStocking();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Book(name, isbn, email, address, times, categories, stocking, reviews, author, publisher);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Library has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        model.setLibrary(new Library());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteByCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Deletes a book identified using name, isbn, or times."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteByCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \": Deletes the book identified by the name, isbn or times borrowed.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Parameters: NAME OR ISBN OR TIMES\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Example: \" + \"1. \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Linear Algebra\" + \"   \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" \" + PREFIX_ISBN + \"123456\" + \"   \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"3. \" + COMMAND_WORD + \" \" + PREFIX_TIMES + \"10\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final int attribute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Delete a book by name, isbn or times."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param target a string representing the input content."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param attribute indicating which attribute shall we refer to when deleting."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DeleteByCommand(String target, int attribute) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e deleteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book book : lastShownList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            switch (attribute) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (book.getName().fullName.equals(target)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    bookToDelete \u003d book;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    deleteList.add(bookToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (book.getIsbn().value.equals(target)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    bookToDelete \u003d book;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    deleteList.add(bookToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (Integer.parseInt(book.getTimes().value) \u003e\u003d Integer.parseInt(target)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    bookToDelete \u003d book;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    deleteList.add(bookToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (bookToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DELETE_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book book : deleteList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            model.deleteBook(book);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, deleteList.toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof DeleteByCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 target.equals(((DeleteByCommand) other).target)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteProblemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteProblemCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepr\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \": Deletes the problems identified by the index number used in the displayed problem list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted problem: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DeleteProblemCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cProblem\u003e lastShownList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Problem problemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.deleteProblem(problemToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, problemToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof DeleteProblemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteProblemCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Deletes the review of the corresponding book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class DeleteReviewCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteReview\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete the review to the book at\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"the corresponding position in the list.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REVIEWNUMBER + \"REVIEW INDEX]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + CliSyntax.PREFIX_REVIEWNUMBER + \"5\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_DELETE_REVIEW_SUCCESS \u003d \"The review has been deleted for the book %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Index bookIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final int reviewIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a delete review command to delete the review of the corresponding book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param bookIndex The index of the book in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param reviewIndex The index of the review in the review list of the book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public DeleteReviewCommand(Index bookIndex, ReviewNumber reviewIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(bookIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(reviewIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.bookIndex \u003d bookIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.reviewIndex \u003d reviewIndex.reviewNumber;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (bookIndex.getZeroBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Book bookToReview \u003d lastShownList.get(bookIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (bookToReview.getReviews().size() \u003c reviewIndex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Book newBook \u003d createdChangedBook(bookToReview, reviewIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        model.setBook(bookToReview, newBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList((newBook.getName().fullName).split(\" \")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameMatchesKeywordPredicate nameMacthedKeywordsPredicate \u003d new NameMatchesKeywordPredicate(keywords);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        model.updateFilteredBookList(nameMacthedKeywordsPredicate, Mode.REVIEW);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REVIEW_SUCCESS, newBook));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static Book createdChangedBook(Book book, int reviewIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Name name \u003d book.getName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Isbn isbn \u003d book.getIsbn();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Email email \u003d book.getEmail();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Address address \u003d book.getAddress();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cReview\u003e reviewList \u003d book.getReviews()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(review -\u003e review.getContent().content))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviewList.remove(reviewIndex - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashSet\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e(reviewList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Times times \u003d book.getTimes();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Set\u003cCategory\u003e categories \u003d book.getCategories();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Author author \u003d book.getAuthor();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Publisher publisher \u003d book.getPublisher();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking stocking \u003d book.getStocking();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Book(name, isbn, email, address, times, categories, stocking, reviews, author, publisher);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Edits the details of an existing book in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"[\" + PREFIX_ISBN + \"ISBN] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR]\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            + \"[\" + PREFIX_PUBLISHER + \"PUBLISHER]\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + PREFIX_ISBN + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the address book.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index of the book in the filtered book list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param editBookDescriptor details to edit the book with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!bookToEdit.isSameBook(editedBook) \u0026\u0026 model.hasBook(editedBook)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * edited with {@code editBookDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Name updatedName \u003d editBookDescriptor.getName().orElse(bookToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Isbn updatedIsbn \u003d editBookDescriptor.getIsbn().orElse(bookToEdit.getIsbn());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Email updatedEmail \u003d editBookDescriptor.getEmail().orElse(bookToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Address updatedAddress \u003d editBookDescriptor.getAddress().orElse(bookToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Set\u003cReview\u003e bookReviews \u003d bookToEdit.getReviews();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times updatedTimes \u003d bookToEdit.getTimes();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editBookDescriptor.getCategories().orElse(bookToEdit.getCategories());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Author updatedAuthor \u003d editBookDescriptor.getAuthor().orElse(bookToEdit.getAuthor());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Publisher updatedPublisher \u003d editBookDescriptor.getPublisher().orElse(bookToEdit.getPublisher());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Stocking updatedStocking \u003d editBookDescriptor.getStocking().orElse(bookToEdit.getStocking());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book(updatedName, updatedIsbn, updatedEmail,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                updatedAddress, updatedTimes, updatedCategories, updatedStocking, bookReviews,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                updatedAuthor, updatedPublisher);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Stores the details to edit the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        private Isbn isbn;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        private Times times;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        private Publisher publisher;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        private Stocking stocking;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            setIsbn(toCopy.isbn);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            setTimes(toCopy.times);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            setPublisher(toCopy.publisher);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            setStocking(toCopy.stocking);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, isbn, email, address, times,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                categories, publisher, author, stocking);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public void setIsbn(Isbn isbn) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public Optional\u003cIsbn\u003e getIsbn() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return Optional.ofNullable(isbn);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public void setTimes(Times times) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            this.times \u003d times;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public Optional\u003cTimes\u003e getTimes() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return Optional.ofNullable(times);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        public void setPublisher(Publisher publisher) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            this.publisher \u003d publisher;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        public Optional\u003cPublisher\u003e getPublisher() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return Optional.ofNullable(publisher);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        public void setStocking(Stocking stocking) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        public Optional\u003cStocking\u003e getStocking() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return Optional.ofNullable(stocking);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    \u0026\u0026 getIsbn().equals(e.getIsbn())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    \u0026\u0026 getCategories().equals(e.getCategories())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u0026\u0026 getStocking().equals(e.getStocking())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    \u0026\u0026 getTimes().equals(e.getTimes())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u0026\u0026 getPublisher().equals(e.getPublisher());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 18,
      "Stefan-Jiang": 12,
      "richardcom": 63,
      "-": 157,
      "Caiyi34777": 25,
      "HCY123902": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Finds and lists all books in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 37,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindProblemReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class FindProblemReportCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpr\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all problem reports whose description contain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" table\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public FindProblemReportCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredProblemList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof FindProblemReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindProblemReportCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cBook\u003e books \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        int history \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (Book book: books) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            history +\u003d book.getTimes().getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_BORROWING_TIMES_HISTORY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                history));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof HistoryCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Lists all books in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all books\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 19,
      "HCY123902": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RandomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Finds and lists all books in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"random\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort the list of books\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"of a certain category by their popularity.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" math\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public RandomCommand(String category) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Comparator\u003cInteger\u003e comparator \u003d (o1, o2) -\u003e o2 - o1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book i : lastShownList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (i.getCategories().contains(new Category(category))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Predicate\u003cBook\u003e predicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            predicate \u003d new Predicate\u003cBook\u003e() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                public boolean test(Book book) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            int randomnum \u003d random.nextInt(count);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Book randomBook \u003d lastShownList.get(randomnum);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            predicate \u003d new Predicate\u003cBook\u003e() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                public boolean test(Book book) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    return book.equals(randomBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof RandomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 category.equals(((RandomCommand) other).category)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NumberContainsKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Searches for the review of the corresponding book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class SearchReviewCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchReview\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Search for the stocking of all the books with\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"the corresponding keyword and shows them as a list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Parameters: [\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_ISBN + \"ISBN]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"a brief history of time\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Predicate\u003cBook\u003e predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Review review;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a StockCommand to search for the stocking information in each location."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param names The list of names that are used as keyword."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param numbers The list of numbers that are used as keyword."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public SearchReviewCommand(List\u003cString\u003e names, List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameMatchesKeywordPredicate nameMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate numberContainsKeywordPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (names !\u003d null \u0026\u0026 !names.get(0).equals(\"\") \u0026\u0026 numbers !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            nameMatchesKeywordsPredicate \u003d new NameMatchesKeywordPredicate(names);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            numberContainsKeywordPredicate \u003d new NumberContainsKeywordPredicate(numbers);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d (book -\u003e nameMatchesKeywordsPredicate.test(book)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    || numberContainsKeywordPredicate.test(book));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (names !\u003d null \u0026\u0026 !names.get(0).equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d new NameMatchesKeywordPredicate(names);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (numbers !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d new NumberContainsKeywordPredicate(numbers);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.REVIEW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof SearchReviewCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((SearchReviewCommand) other).predicate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Finds and lists all books in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort the list of books\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"of a certain category by their popularity.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" math\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public SortCommand(String category) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Comparator\u003cInteger\u003e comparator \u003d (o1, o2) -\u003e o2 - o1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int maxTime \u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book i : lastShownList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (i.getCategories().contains(new Category(category))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (Integer.parseInt(i.getTimes().value) \u003e maxTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    maxTime \u003d Integer.parseInt(i.getTimes().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int finalMaxTime \u003d maxTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Predicate\u003cBook\u003e predicate \u003d new Predicate\u003cBook\u003e() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            public boolean test(Book book) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                return book.getCategories().contains(new Category(category))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        \u0026\u0026 (Integer.parseInt(book.getTimes().value) \u003d\u003d finalMaxTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 category.equals(((SortCommand) other).category)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NumberContainsKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Searches for the stocking of the corresponding book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class StockCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stock\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Search for the stocking of all the books with\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"the corresponding keyword and shows them as a list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Parameters: [\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_ISBN + \"ISBN]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"a brief history of time\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Predicate\u003cBook\u003e predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a StockCommand to search for the stocking information in each location."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param names The list of names that are used as keyword."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param numbers The list of numbers that are used as keyword."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public StockCommand(List\u003cString\u003e names, List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameMatchesKeywordPredicate nameMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate numberContainsKeywordPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (names !\u003d null \u0026\u0026 !names.get(0).equals(\"\") \u0026\u0026 numbers !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            nameMatchesKeywordsPredicate \u003d new NameMatchesKeywordPredicate(names);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            numberContainsKeywordPredicate \u003d new NumberContainsKeywordPredicate(numbers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d (book -\u003e nameMatchesKeywordsPredicate.test(book)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    || numberContainsKeywordPredicate.test(book));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (names !\u003d null \u0026\u0026 !names.get(0).equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d new NameMatchesKeywordPredicate(names);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (numbers !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d new NumberContainsKeywordPredicate(numbers);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            predicate \u003d Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.DETAIL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof StockCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u0026\u0026 this.predicate.equals(((StockCommand) other).predicate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 8,
      "HCY123902": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Changes the times of an existing book in the database."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"times\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the times of the book identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"by the index number used in the last book listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"Existing times will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + PREFIX_TIMES + \"[TIMES]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + PREFIX_TIMES + \"Likes to swim.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_ADD_TIMES_SUCCESS \u003d \"Added times to Book: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_DELETE_TIMES_SUCCESS \u003d \"Removed times from Book: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Times times;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param index of the book in the filtered book list to edit the times"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param times of the book being borrowed to be updated to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public TimesCommand(Index index, Times times) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireAllNonNull(index, times);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d times;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new Book(bookToEdit.getName(), bookToEdit.getIsbn(), bookToEdit.getEmail(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                bookToEdit.getAddress(), times, bookToEdit.getCategories(), bookToEdit.getStocking(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                bookToEdit.getReviews(), bookToEdit.getAuthor(), bookToEdit.getPublisher());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedBook));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Generates a command execution success message based on whether the times is added to or removed from"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * {@code bookToEdit}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String generateSuccessMessage(Book bookToEdit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String message \u003d !times.value.isEmpty() ? MESSAGE_ADD_TIMES_SUCCESS : MESSAGE_DELETE_TIMES_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return String.format(message, bookToEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (!(other instanceof TimesCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand e \u003d (TimesCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                \u0026\u0026 times.equals(e.times);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 73,
      "richardcom": 14,
      "HCY123902": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UsageByCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Check usage of a book identified using name, isbn, or times."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageByCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"usageBy\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \": Get the usage of the book identified by the name or isbn\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Parameters: NAME OR ISBN\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Example: \" + \"1. \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Linear Algebra\" + \"   \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" \" + PREFIX_ISBN + \"123456\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE_BOOK_SUCCESS \u003d \"Usage of selected book: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Check usage of a book by name or isbn."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @param target a string representing the input content."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageByCommand(String target) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Book bookToCheck \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (Book book : lastShownList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            if (book.getName().fullName.equals(target) || book.getIsbn().value.equals(target)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                bookToCheck \u003d book;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (bookToCheck \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_CHECK_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_USAGE_BOOK_SUCCESS, bookToCheck.getTimes().getValue()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof UsageByCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 target.equals(((UsageByCommand) other).target)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UsageCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Check usage of a book identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"usage\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \": Usages the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE_BOOK_SUCCESS \u003d \"Usage of selected book: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_USAGE_BOOK_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                lastShownList.get(targetIndex.getZeroBased()).getTimes().getValue()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof UsageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UsageCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewProblemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROBLEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class ViewProblemCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"View problems\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public ViewProblemCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        model.updateFilteredProblemList((problem -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        model.updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS, Mode.NORMAL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        //String problems_string \u003d model.getFilteredProblemList().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String problemString \u003d model.getProblemString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new CommandResult(problemString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_STOCKING, PREFIX_TIMES, PREFIX_AUTHOR, PREFIX_PUBLISHER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN, PREFIX_ADDRESS, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Isbn isbn \u003d ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Times times \u003d ParserUtil.parseTimes(argMultimap.getValue(PREFIX_TIMES).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking stocking \u003d ParserUtil.parseStocking(argMultimap.getValue(PREFIX_STOCKING).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Author author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()); // to be implemented"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Publisher publisher \u003d ParserUtil.parsePublisher(argMultimap.getValue(PREFIX_PUBLISHER).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Book book \u003d new Book(name, isbn, email, address, times, categoryList, stocking, new HashSet\u003cReview\u003e(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                author, publisher);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new AddCommand(book);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 2,
      "Stefan-Jiang": 15,
      "richardcom": 5,
      "-": 46,
      "Caiyi34777": 3,
      "HCY123902": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProblemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVERITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.logic.commands.AddProblemCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Severity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Parses input arguments and creates a new AddProblemCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class AddProblemCommandParser implements Parser\u003cAddProblemCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public AddProblemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SEVERITY, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProblemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Severity severity \u003d ParserUtil.parseSeverity(argMultimap.getValue(PREFIX_SEVERITY).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Problem problem \u003d new Problem(severity, description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new AddProblemCommand(problem);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 46,
      "richardcom": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddReviewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class AddReviewCommandParser implements Parser\u003cAddReviewCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddReviewCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * and returns a AddReviewCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public AddReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_RATING, PREFIX_REVIEW);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_RATING).isPresent()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || !argMultimap.getValue(PREFIX_REVIEW).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    AddReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewContent reviewContent \u003d ParserUtil.parseReviewContent(argMultimap.getValue(PREFIX_REVIEW).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Review review \u003d new Review(rating, reviewContent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new AddReviewCommand(index, review);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_ISBN \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"ad/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_TIMES \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final Prefix PREFIX_STOCKING \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_PUBLISHER \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final Prefix PREFIX_SEVERITY \u003d new Prefix(\"severity/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"problem/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final Prefix PREFIX_VIEW_PROBLEMS \u003d new Prefix(\"view/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"ra/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final Prefix PREFIX_REVIEW \u003d new Prefix(\"re/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final Prefix PREFIX_REVIEWNUMBER \u003d new Prefix(\"rn/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 3,
      "Stefan-Jiang": 5,
      "richardcom": 1,
      "-": 11,
      "HCY123902": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteByCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.DeleteByCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Parses input arguments and creates a new DeleteByCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteByCommandParser implements Parser\u003cDeleteByCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * and returns a DeleteByCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * * @return DeleteByCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DeleteByCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int attribute \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        boolean isNamePresent \u003d isPrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        boolean isIsbnPresent \u003d isPrefixesPresent(argMultimap, PREFIX_ISBN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        boolean isTimesPresent \u003d isPrefixesPresent(argMultimap, PREFIX_TIMES)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if ((arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    DeleteByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (isNamePresent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            content \u003d name.fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            attribute \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (isIsbnPresent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Isbn isbn \u003d ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            content \u003d isbn.value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            attribute \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (isTimesPresent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Times times \u003d ParserUtil.parseTimes(argMultimap.getValue(PREFIX_TIMES).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            content \u003d times.value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            attribute \u003d 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String trimmedArgs \u003d content.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new DeleteByCommand(trimmedArgs, attribute);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static boolean isPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteProblemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.DeleteProblemCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteProblemCommandParser implements Parser\u003cDeleteProblemCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DeleteProblemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new DeleteProblemCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteReviewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEWNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class DeleteReviewCommandParser implements Parser\u003cDeleteReviewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteReviewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * and returns a DeleteReviewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public DeleteReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REVIEWNUMBER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_REVIEWNUMBER).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    DeleteReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewNumber reviewNumber \u003d ParserUtil.parseReviewNumber(argMultimap.getValue(PREFIX_REVIEWNUMBER).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new DeleteReviewCommand(index, reviewNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_STOCKING, PREFIX_TIMES, PREFIX_AUTHOR, PREFIX_PUBLISHER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor editBookDescriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setIsbn(ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .ifPresent(editBookDescriptor::setCategories);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STOCKING).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setStocking(ParserUtil.parseStocking(argMultimap.getValue(PREFIX_STOCKING).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMES).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            editBookDescriptor.setTimes(ParserUtil.parseTimes(argMultimap.getValue(PREFIX_TIMES).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            editBookDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PUBLISHER).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            editBookDescriptor.setPublisher(ParserUtil.parsePublisher(argMultimap.getValue(PREFIX_PUBLISHER).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new EditCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Collection\u003cString\u003e categorySet \u003d categories.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 categories.contains(\"\") ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categorySet));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 16,
      "richardcom": 9,
      "-": 58,
      "Caiyi34777": 14,
      "HCY123902": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindProblemReportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.FindProblemReportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class FindProblemReportCommandParser implements Parser\u003cFindProblemReportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public FindProblemReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new FindProblemReportCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LibraryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.AddProblemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.DeleteByCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.DeleteProblemCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.FindProblemReportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.RandomCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.SearchReviewCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.UsageByCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.UsageCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.ViewProblemCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class LibraryParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case DeleteByCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new DeleteByCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DeleteProblemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new DeleteProblemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case FindProblemReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new FindProblemReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case RandomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new RandomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        case StockCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new StockCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        case SearchReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new SearchReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        case AddReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new AddReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        case DeleteReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new DeleteReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case TimesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new TimesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case UsageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case UsageByCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageByCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        case AddProblemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return new AddProblemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        case ViewProblemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return new ViewProblemCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 6,
      "Stefan-Jiang": 2,
      "richardcom": 12,
      "-": 71,
      "Caiyi34777": 17,
      "HCY123902": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Severity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Rating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses a {@code String isbn} into a {@code Isbn}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the given {@code isbn} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Isbn parseIsbn(String isbn) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(isbn);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String trimmedIsbn \u003d isbn.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Isbn.isValidIsbn(trimmedIsbn)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException(Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new Isbn(trimmedIsbn);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static Times parseTimes(String times) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(times);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String trimmedTimes \u003d times.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (!Times.isValidTimes(trimmedTimes)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            throw new ParseException(Times.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Times(times);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Parses a {@code String author} into a {@code Author}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the given {@code author} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Author parseAuthor(String author) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String trimmedAuthor \u003d author.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!Author.isValidAuthor(trimmedAuthor)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Author(trimmedAuthor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Parses a {@code String publisher} into a {@code Publisher}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws ParseException if the given {@code publisher} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static Publisher parsePublisher(String publisher) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(publisher);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String trimmedPublisher \u003d publisher.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!Publisher.isValidPublisher(trimmedPublisher)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new ParseException(Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Publisher(trimmedPublisher);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses {@code String stocking} into a {@code Stocking}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static Stocking parseStocking(String stocking) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(stocking);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(Stocking.VALIDATION_REGEX);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(stocking);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        int count \u003d matcher.groupCount();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e stockingInLocation \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            if (matcher.find() \u0026\u0026 Stocking.isValidStocking(stocking)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                List\u003cString\u003e locations \u003d Arrays.asList(Stocking.LOCATION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                locations.forEach((location) -\u003e {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    stockingInLocation.put(location, 0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                });"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d count; i \u003d i + 2) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    String currentLocation \u003d matcher.group(i).strip();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    int currentCount \u003d Integer.parseInt(matcher.group(i + 1).strip());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    locations.forEach((location) -\u003e {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        if (location.toUpperCase().equals(currentLocation.toUpperCase())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                            stockingInLocation.put(location, currentCount);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                throw new ParseException(Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Stocking(stockingInLocation);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses {@code String severity} into a {@code Severity}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static Severity parseSeverity(String severity) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(severity);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String trimmedSeverity \u003d severity.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!Severity.isValidSeverity(trimmedSeverity)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new ParseException(Severity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Severity(trimmedSeverity);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        int ratingNumber;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            ratingNumber \u003d Integer.parseInt(rating);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Rating(ratingNumber);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses {@code String reviewContent} into a {@code ReviewContent}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static ReviewContent parseReviewContent(String reviewContent) throws ParseException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(reviewContent);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        String trimmedContent \u003d reviewContent.trim();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!ReviewContent.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(ReviewContent.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new ReviewContent(trimmedContent);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static ReviewNumber parseReviewNumber(String reviewNumber) throws ParseException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(reviewNumber);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        String trimmedReviewNumber \u003d reviewNumber.trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!ReviewNumber.isValidReviewNumber(trimmedReviewNumber)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(ReviewNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            result \u003d Integer.parseInt(reviewNumber);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(ReviewNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new ReviewNumber(result);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 39,
      "Stefan-Jiang": 4,
      "richardcom": 33,
      "-": 105,
      "Caiyi34777": 24,
      "HCY123902": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RandomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.RandomCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class RandomCommandParser implements Parser\u003cRandomCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public RandomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new RandomCommand(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchReviewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.SearchReviewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class SearchReviewCommandParser implements Parser\u003cSearchReviewCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StockingCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * and returns a StockingCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public SearchReviewCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                userInput,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                CliSyntax.PREFIX_ISBN"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!argumentMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 !argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).isPresent()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 !userInput.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    SearchReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e names \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e numbers \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argumentMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            names \u003d Arrays.asList(argumentMultimap.getValue(CliSyntax.PREFIX_NAME).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            numbers \u003d Arrays.asList(argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new SearchReviewCommand(names, numbers);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new SortCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StockCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Parses input arguments and creates a new StockCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class StockCommandParser implements Parser\u003cStockCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StockingCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * and returns a StockingCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public StockCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                userInput,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                CliSyntax.PREFIX_ISBN"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!isPrefixPresent(argumentMultimap, CliSyntax.PREFIX_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 !isPrefixPresent(argumentMultimap, CliSyntax.PREFIX_ISBN)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 !userInput.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    StockCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e names \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e numbers \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argumentMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            names \u003d Arrays.asList(argumentMultimap.getValue(CliSyntax.PREFIX_NAME).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            numbers \u003d Arrays.asList(argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new StockCommand(names, numbers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimesCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Parses input arguments and creates a new {@code TimesCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommandParser implements Parser\u003cTimesCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code TimesCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * and returns a {@code TimesCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public TimesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TIMES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimesCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String times \u003d argMultimap.getValue(PREFIX_TIMES).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return new TimesCommand(index, new Times(times));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 36,
      "richardcom": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UsageByCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.UsageByCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Parses input arguments and creates a new UsageByCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageByCommandParser implements Parser\u003cUsageByCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UsageCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * and returns a UsageByCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * * @return UsageByCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageByCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        boolean isNamePresent \u003d isPrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        boolean isIsbnPresent \u003d isPrefixesPresent(argMultimap, PREFIX_ISBN)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if ((arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    UsageByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (isNamePresent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            content \u003d name.fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        } else if (isIsbnPresent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Isbn isbn \u003d ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            content \u003d isbn.value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            String trimmedArgs \u003d content.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UsageByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageByCommand(trimmedArgs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UsageByCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static boolean isPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UsageCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.UsageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Parses input arguments and creates a new UsageCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageCommandParser implements Parser\u003cUsageCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UsageCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * and returns a UsageCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UsageCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Library.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.ProblemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Wraps all data at the library level Duplicates are not allowed (by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * .isSameBook comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class Library implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final UniqueBookList books;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private ProblemList problems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * sometimes used to avoid duplication between constructors. See"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * ways to avoid duplication among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        problems \u003d new ProblemList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Library() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Creates an Library using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Library(ReadOnlyLibrary toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the contents of the problem list with {@code books}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setProblems(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.problems.setProblems(problems);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the library."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setProblem(Problem problem, Problem editedProblem) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(editedProblem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        problems.setProblem(problem, editedProblem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void resetData(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        setProblems(newData.getProblemList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    //// book-level operations"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the library."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.contains(book);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if a problem with the same identity as {@code problem} exists in the library."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return problems.contains(problem);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Adds a book to the library."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * The book must not already exist in the library."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addBook(Book p) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.add(p);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the library."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Removes {@code key} from this {@code Library}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    //// book-level operations"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a book to the library."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must not already exist in the library."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addProblem(Problem p) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        problems.add(p);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Removes {@code key} from this {@code Library}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void removeProblem(Problem key) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        problems.delete(key);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @return a string representing the problems."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String getProblemString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return problems.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cProblem\u003e getProblemList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return problems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                || (other instanceof Library // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                \u0026\u0026 books.equals(((Library) other).books));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.hashCode();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 17,
      "Stefan-Jiang": 12,
      "richardcom": 81,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    Predicate\u003cProblem\u003e PREDICATE_SHOW_ALL_PROBLEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Sets the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    void setLibraryFilePath(Path libraryFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Replaces library data with the data in {@code library}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    void setLibrary(ReadOnlyLibrary library);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the Library"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the library."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * The book must exist in the library."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * {@code book} must not already exist in the a library."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the Llibrary."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an unmodifiable view of the filtered book list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate, Mode mode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // problems"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the library."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    boolean hasProblem(Problem problem);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must exist in the library."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void deleteProblem(Problem problem);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code book} must not already exist in the a library."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void addProblem(Problem problem);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the Llibrary."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void setProblem(Problem target, Problem problem);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an unmodifiable view of the filtered book list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cProblem\u003e getFilteredProblemList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate, Mode mode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @return a string that represents the problems."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    String getProblemString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 8,
      "Stefan-Jiang": 12,
      "richardcom": 59,
      "-": 60,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.ui.BookListPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Represents the in-memory model of the library data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Library library;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final FilteredList\u003cProblem\u003e filteredProblems;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Initializes a ModelManager with the given library and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public ModelManager(ReadOnlyLibrary library, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireAllNonNull(library, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        logger.fine(\"Initializing with library: \" + library + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.library \u003d new Library(library);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(this.library.getBookList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredProblems \u003d new FilteredList\u003c\u003e(this.library.getProblemList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this(new Library(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return userPrefs.getLibraryFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(libraryFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        userPrefs.setLibraryFilePath(libraryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void setLibrary(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.library.resetData(library);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return library.hasBook(book);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.removeBook(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.addBook(book);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.setBook(target, editedBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Book List Accessors"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Book} backed by the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * internal list of {@code versionedLibrary}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate, Mode mode) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookListPanel.setMode(mode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates the book list with the predicate."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param predicate The predicate that is used to update the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return library.hasProblem(problem);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void deleteProblem(Problem problem) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        library.removeProblem(problem);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        library.addProblem(problem);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS, Mode.NORMAL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setProblem(Problem target, Problem problem) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(target, problem);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        library.setProblem(target, problem);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return filteredProblems;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String getProblemString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return library.getProblemString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate, Mode mode) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredProblems.setPredicate(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return library.equals(other.library) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 filteredBooks.equals(other.filteredBooks);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 15,
      "Stefan-Jiang": 22,
      "richardcom": 59,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public interface ReadOnlyLibrary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an unmodifiable view of the books list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This list will not contain any duplicate books."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cProblem\u003e getProblemList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "richardcom": 7,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Path libraryFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        setLibraryFilePath(newUserPrefs.getLibraryFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return libraryFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(libraryFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.libraryFilePath \u003d libraryFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                \u0026\u0026 libraryFilePath.equals(o.libraryFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return Objects.hash(guiSettings, libraryFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + libraryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Author.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public final String author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Author(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        checkArgument(isValidAuthor(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 author.equals(((Author) other).author)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return author.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final Isbn isbn;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private final Publisher publisher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Times times;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Stocking stocking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Set\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Book(Name name, Isbn isbn, Email email, Address address,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                Times times, Set\u003cCategory\u003e categories, Stocking stocking, Set\u003cReview\u003e reviews,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                Author author, Publisher publisher) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireAllNonNull(name, isbn, email, address, times, categories, author);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d times;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // add"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.publisher \u003d publisher;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Isbn getIsbn() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return isbn;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Set\u003cReview\u003e getReviews() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this.reviews;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Publisher getPublisher() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return publisher;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Times getTimes() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return times;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Stocking getStocking() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this.stocking;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if both books of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This defines a weaker notion of equality between two books."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean isSameBook(Book otherBook) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (otherBook \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return otherBook !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 (otherBook.getIsbn().equals(getIsbn()) || otherBook.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getIsbn().equals(getIsbn())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getCategories().equals(getCategories())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getPublisher().equals(getPublisher());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return Objects.hash(name, isbn, email, address, categories, author, publisher);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .append(\" Isbn: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .append(getIsbn())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .append(\" Times: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .append(getTimes())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        builder.append(\" Author: \").append(getAuthor());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        builder.append(\" Publisher: \").append(getPublisher());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 8,
      "Stefan-Jiang": 9,
      "richardcom": 32,
      "-": 84,
      "Caiyi34777": 15,
      "HCY123902": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Isbn.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s isbn number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIsbn(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class Isbn {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            \"Isbn numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Constructs a {@code Isbn}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @param isbn A valid isbn number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Isbn(String isbn) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(isbn);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        checkArgument(isValidIsbn(isbn), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        value \u003d isbn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns true if a given string is a valid isbn number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static boolean isValidIsbn(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof Isbn // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 value.equals(((Isbn) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 38,
      "Caiyi34777": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NameMatchesKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class NameMatchesKeywordPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public NameMatchesKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof NameMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameMatchesKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NumberContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s number matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class NumberContainsKeywordPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public NumberContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .anyMatch((number) -\u003e book.getIsbn().value.toUpperCase().contains(number.toUpperCase()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof NumberContainsKeywordPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u0026\u0026 this.keywords.equals(((NumberContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "HCY123902": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Publisher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPublisher(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class Publisher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public final String publisher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Publisher(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        checkArgument(isValidPublisher(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        publisher \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static boolean isValidPublisher(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return publisher;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                || (other instanceof Publisher // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u0026\u0026 publisher.equals(((Publisher) other).publisher)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return publisher.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 57,
      "richardcom": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Stocking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class Stocking {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"stocking needs to map from a location to the\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \" number of stocking in that location\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String[] LOCATION \u003d new String[]{\"central library\", \"science library\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * The stocking string should map from the location to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * the number of book in the location."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \"^\\\\s*(central library)?\\\\s*(\\\\d{1,5})?\\\\s*(science library)?\\\\s*(\\\\d{1,5})?\\\\s*$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs an {@code Stocking}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param stocking A valid stocking."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Stocking(HashMap\u003cString, Integer\u003e stocking) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(stocking);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        for (int i \u003d 0; i \u003c LOCATION.length; i \u003d i + 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.storage.put(LOCATION[i], 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.storage.putAll(stocking);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns true if a given string is a valid stocking."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static boolean isValidStocking(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return \"central library \" + storage.getOrDefault(\"central library\", 0) + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                + \"science library \" + storage.getOrDefault(\"scienece library\", 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof Stocking // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 storage.equals(((Stocking) other).storage)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return storage.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 1,
      "HCY123902": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Times.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Represents how many times a book is borrowed before."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimes(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class Times {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"times should be a non-negative number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-9]\\\\d*|0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Constructs a {@code Times}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param times A valid times."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Times(String times) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(times);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        checkArgument(isValidTimes(times), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        value \u003d times;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns true if a given string is a valid times."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static boolean isValidTimes(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                || (other instanceof Times // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                \u0026\u0026 value.equals(((Times) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 49,
      "richardcom": 1,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A book is considered unique by comparing using {@code Book#isSameBook(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * books uses Book#isSameBook(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * @see Book#isSameBook(Book)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!target.isSameBook(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the contents of this list with {@code books}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (books.get(i).isSameBook(books.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Represents a Category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return \u0027[\u0027 + categoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/problem/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Constructs a {@code description}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 32,
      "richardcom": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/problem/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(problem.getDescription().description, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/problem/Problem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class Problem {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private final Severity severity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a problem object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param severity serverity of object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description description of object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Problem(Severity severity, Description description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if both books of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This defines a weaker notion of equality between two books."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean isSameProblem(Problem otherProblem) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (otherProblem \u003d\u003d this) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return otherProblem !\u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherProblem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 (otherProblem.getSeverity().equals(getSeverity()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Severity getSeverity() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return severity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        builder.append(\" Description: \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .append(\" Severity: \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .append(getSeverity());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 27,
      "richardcom": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/problem/ProblemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class ProblemList implements Iterable\u003cProblem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final ObservableList\u003cProblem\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final ObservableList\u003cProblem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FXCollections.unmodifiableObservableList(list);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean contains(Problem toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return list.stream().anyMatch(toCheck::isSameProblem);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the problem {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(target, editedProblem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int index \u003d list.indexOf(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!target.isSameProblem(editedProblem) \u0026\u0026 contains(editedProblem)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        list.set(index, editedProblem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Adds a problem to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add(Problem toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        list.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Deletes a problem to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void delete(Problem toDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        list.remove(toDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public List\u003cProblem\u003e getList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setProblems(ProblemList replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        list.setAll(replacement.list);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setProblems(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(problems);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        list.setAll(problems);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cProblem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Iterator\u003cProblem\u003e iterator() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        int i \u003d 0; // i is to count the number of problems"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String noProblem \u003d \"There is currently no problem.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        for (Problem problem: list) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            res +\u003d problem.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            res +\u003d \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return noProblem;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } else if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            String problemString \u003d \"There is only 1 problem: \\n\" + res;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return problemString;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            String problemString \u003d \"There are \" + Integer.toString(i)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + \" problems: \\n\" + res;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return problemString;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 43,
      "richardcom": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/problem/Severity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class Severity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \"Severity should be high/medium/low, case insensitive, and it should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public final String severity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Constructs a {@code severity}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param severity A valid severity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Severity(String severity) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(severity);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.severity \u003d severity.toUpperCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static boolean isValidSeverity(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        test \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return (test.equals(\"high\")) || (test.equals(\"medium\")) || (test.equals(\"low\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return severity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 32,
      "richardcom": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/review/Rating.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Represents a rating of a review of a book in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"rating can only be an integer from 0 to 5\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\s*(\\\\d{1})\\\\s*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final Integer ratingNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs an {@code Rating}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Rating(Integer rating) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.ratingNumber \u003d rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns true if a given string is a valid rating."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return ratingNumber.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 ratingNumber.equals(((Rating) other).ratingNumber)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return ratingNumber.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/review/Review.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Represents a Book\u0027s review in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class Review {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final ReviewContent reviewContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs an {@code Review}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param content The review content."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Review(Rating rating, ReviewContent content) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.reviewContent \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public ReviewContent getContent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return reviewContent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return \"rating: \" + this.rating.ratingNumber + \" content: \" + this.reviewContent.content;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof Review // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 rating.equals(((Review) other).rating))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 reviewContent.equals(((Review) other).reviewContent); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return rating.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/review/ReviewContent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Represents the review content of a review of a book in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class ReviewContent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"review cannot be empty\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * The review should not be empty"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\s*(\\\\S.*)\\\\s*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs an {@code ReviewContent}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param content A valid stocking."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public ReviewContent(String content) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns true if a given string is valid review content."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof ReviewContent // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 content.equals(((ReviewContent) other).content)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/review/ReviewNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Represents the position of the review in the review list of a book in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidReviewNumber(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class ReviewNumber {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"review index needs to be an integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * The review number string should represent an integer with a length from 1 to 5 and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * there can be white space."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\s*(\\\\d{1,5})\\\\s*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final Integer reviewNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs an {@code ReviewNumber}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param reviewNumber A valid review number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public ReviewNumber(Integer reviewNumber) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(reviewNumber);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.reviewNumber \u003d reviewNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns true if a given string is a valid review number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static boolean isValidReviewNumber(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return reviewNumber.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof ReviewNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 reviewNumber.equals(((ReviewNumber) other).reviewNumber)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return reviewNumber.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewContent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Contains utility methods for populating {@code Library} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"centralLibrary\", 10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        storage.put(\"scienceLibrary\", 8);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking stocking \u003d new Stocking(storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashSet\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Rating rating \u003d new Rating(5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewContent reviewContent \u003d new ReviewContent(\"The book is interesting\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Rating newRating \u003d new Rating(4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewContent newReviewContent \u003d new ReviewContent(\"The book is inspiring\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviews.add(new Review(rating, reviewContent));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviews.add(new Review(newRating, newReviewContent));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"Pride and Prejudice\"), new Isbn(\"9780141439518\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Email(\"pride\u0026prejudice@example.com\"), new Address(\"English\"), new Times(\"195\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    getCategorySet(\"Novels\"), stocking, reviews, new Author(\"Jane Austen\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Publisher(\"Penguin Publishing Group\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"A Brief History Of Time From Big Bang To Black Holes\"), new Isbn(\"9780553175219\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Email(\"abriefhistoryoftime@example.com\"), new Address(\"English\"), new Times(\"20278\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                getCategorySet(\"Science\"), stocking, reviews,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Author(\"Stephen Hawking\"), new Publisher(\"Bantam\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"The Great Gatsby\"), new Isbn(\"9780743273565\"), new Email(\"thegreatgatsby@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new Address(\"English\"), new Times(\"6529\"), getCategorySet(\"Classics\"), stocking, reviews,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Author(\"Scott Fitzgerald\"), new Publisher(\"Scribner\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"Introduction to Linear Algebra\"), new Isbn(\"9780980232776\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Email(\"introtolinearalgebra@example.com\"), new Address(\"English\"), new Times(\"243\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                getCategorySet(\"Textbook\"), stocking, reviews,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Author(\"Gilbert Strang\"), new Publisher(\"Wellesley Cambridge Press\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static ReadOnlyLibrary getSampleLibrary() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library sampleLib \u003d new Library();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book sampleBook : getSampleBooks()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            sampleLib.addBook(sampleBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return sampleLib;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static Set\u003cReview\u003e getReviews(Review ... reviews) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new HashSet\u003cReview\u003e(Arrays.asList(reviews));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9,
      "Stefan-Jiang": 20,
      "richardcom": 3,
      "-": 23,
      "Caiyi34777": 4,
      "HCY123902": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "class JsonAdaptedBook {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private String isbn;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String times;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categorised \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String author;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private String publisher;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final JsonAdaptedStocking stocking;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final List\u003cJsonAdaptedReview\u003e reviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"name\") String name, @JsonProperty(\"isbn\") String isbn,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                           @JsonProperty(\"times\") String times,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedCategory\u003e categorised,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                           @JsonProperty(\"stocking\") JsonAdaptedStocking stocking,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                           @JsonProperty(\"reviews\") List\u003cJsonAdaptedReview\u003e reviews,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                           @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                           @JsonProperty(\"publisher\") String publisher) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d times;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (categorised !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            this.categorised.addAll(categorised);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.publisher \u003d publisher;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (reviews !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        isbn \u003d source.getIsbn().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        times \u003d source.getTimes().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        categorised.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d source.getAuthor().author;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        publisher \u003d source.getPublisher().publisher;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        stocking \u003d new JsonAdaptedStocking(source.getStocking());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviews.addAll(source.getReviews().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .map(JsonAdaptedReview::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final List\u003cCategory\u003e bookCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (JsonAdaptedCategory category : categorised) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            bookCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (isbn \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    Isbn.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Isbn.isValidIsbn(isbn)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new IllegalValueException(Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        final Isbn modelIsbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        final Set\u003cReview\u003e modelReviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        for (JsonAdaptedReview review : reviews) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            modelReviews.add(review.toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (times \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Times.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        final Times modelTimes \u003d new Times(times);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(bookCategories);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!Author.isValidAuthor(author)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Author modelAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (publisher \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    Publisher.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!Publisher.isValidPublisher(publisher)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new IllegalValueException(Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        final Publisher modelPublisher \u003d new Publisher(publisher);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (stocking \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    JsonAdaptedStocking.class.getSimpleName()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        final Stocking modelStocking \u003d stocking.toModelType();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book(modelName, modelIsbn, modelEmail, modelAddress, modelTimes,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                modelCategories, modelStocking, modelReviews, modelAuthor, modelPublisher);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 16,
      "Stefan-Jiang": 5,
      "richardcom": 49,
      "-": 67,
      "Caiyi34777": 15,
      "HCY123902": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Converts a given {@code Category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "Caiyi34777": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProblem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Severity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class JsonAdaptedProblem {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String severity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonAdaptedProblem(@JsonProperty(\"severity\") String severity,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                              @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonAdaptedProblem(Problem problem) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        severity \u003d problem.getSeverity().severity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        description \u003d problem.getDescription().description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Problem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (severity \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Severity.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!Severity.isValidSeverity(severity)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(Severity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Severity modelSeverity \u003d new Severity(severity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Problem(modelSeverity, modelDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReview.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Rating;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.ReviewContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class JsonAdaptedReview {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final int ratingNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final String reviewContent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs a {@code JsonAdaptedReview} with the given review information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public JsonAdaptedReview(@JsonProperty(\"ratingNumber\") int ratingNumber,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                               @JsonProperty(\"reviewContent\") String reviewContent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.ratingNumber \u003d ratingNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.reviewContent \u003d reviewContent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Converts a given {@code Stocking} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public JsonAdaptedReview(Review review) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (review \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.ratingNumber \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.reviewContent \u003d \"empty review content\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.ratingNumber \u003d review.getRating().ratingNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.reviewContent \u003d review.getContent().content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Review} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted review."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Review toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!Rating.isValidRating(String.valueOf(this.ratingNumber))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (!ReviewContent.isValidContent(reviewContent)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new IllegalValueException(ReviewContent.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Rating bookRating \u003d new Rating(this.ratingNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewContent bookReviewContent \u003d new ReviewContent(this.reviewContent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Review(bookRating, bookReviewContent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStocking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Jackson-friendly version of {@link Stocking}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class JsonAdaptedStocking {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final int centralLibrary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final int scienceLibrary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs a {@code JsonAdaptedStocking} with the given stocking information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public JsonAdaptedStocking(@JsonProperty(\"centralLibrary\") int centralLibrary,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                               @JsonProperty(\"scienceLibrary\") int scienceLibrary) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.centralLibrary \u003d centralLibrary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.scienceLibrary \u003d scienceLibrary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Converts a given {@code Stocking} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public JsonAdaptedStocking(Stocking stocking) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (stocking \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.centralLibrary \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.scienceLibrary \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.centralLibrary \u003d stocking.storage.getOrDefault(\"central library\", 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.scienceLibrary \u003d stocking.storage.getOrDefault(\"science library\", 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Stocking} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted stocking."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Stocking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!Stocking.isValidStocking(\"central library \" + centralLibrary + \" science library \" + scienceLibrary)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new IllegalValueException(Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"central library\", this.centralLibrary);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"science library\", this.scienceLibrary);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Stocking(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "HCY123902": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * A class to access Library data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class JsonLibraryStorage implements LibraryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLibraryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public JsonLibraryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return readLibrary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Similar to {@link #readLibrary()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Optional\u003cJsonSerializableLibrary\u003e jsonLibrary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                filePath, JsonSerializableLibrary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (!jsonLibrary.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return Optional.of(jsonLibrary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Similar to {@link #saveLibrary(ReadOnlyLibrary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLibrary(library), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * An Immutable Library that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "@JsonRootName(value \u003d \"library\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "class JsonSerializableLibrary {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"Books list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final List\u003cJsonAdaptedProblem\u003e problems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Constructs a {@code JsonSerializableLibrary} with the given books."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonSerializableLibrary(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                                   @JsonProperty(\"problems\") List\u003cJsonAdaptedProblem\u003e problems) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.problems.addAll(problems);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Converts a given {@code ReadOnlyLibrary} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLibrary}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public JsonSerializableLibrary(ReadOnlyLibrary source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        problems.addAll(source.getProblemList().stream().map(JsonAdaptedProblem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Converts this library into the model\u0027s {@code Library} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Library toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            if (library.hasBook(book)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            library.addBook(book);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (JsonAdaptedProblem jsonAdaptedProblem : problems) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Problem problem \u003d jsonAdaptedProblem.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (library.hasProblem(problem)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            library.addProblem(problem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 15,
      "richardcom": 24,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Library}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public interface LibraryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns Library data as a {@link ReadOnlyLibrary}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @see #getLibraryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Saves the given {@link ReadOnlyLibrary} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param library cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @see #saveLibrary(ReadOnlyLibrary)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public interface Storage extends LibraryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageForProblem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Severity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class StorageForProblem {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static File f;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a storage for problems."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public StorageForProblem(String filePath) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.f \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.f.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Loads the information written on File.txt."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @return A list of problems loaded from the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static ArrayList\u003cProblem\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        ArrayList\u003cProblem\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Scanner scFile \u003d new Scanner(f);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        while (scFile.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            String data \u003d scFile.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            Problem problem \u003d parse(data);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            temp.add(problem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static Problem parse(String data) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        char severity \u003d data.charAt(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (severity \u003d\u003d \u0027H\u0027) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return parseHigh(data);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } else if (severity \u003d\u003d \u0027M\u0027) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return parseMedium(data);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return parseLow(data);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static Problem parseHigh(String data) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Description description \u003d new Description(data.substring(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Severity severity \u003d new Severity(\"HIGH\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Problem(severity, description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static Problem parseMedium(String data) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Description description \u003d new Description(data.substring(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Severity severity \u003d new Severity(\"MEDIUM\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Problem(severity, description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static Problem parseLow(String data) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Description description \u003d new Description(data.substring(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Severity severity \u003d new Severity(\"LOW\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Problem(severity, description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Writes problems in the ProblemList onto the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @param list The ProblemList temporarily storing all problems."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static void writeData(List\u003cProblem\u003e list) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        for (Problem problem: list) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            String temp \u003d unparse(problem); // convert Task into String"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            fw.write(temp + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static String unparse(Problem problem) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String severity \u003d problem.getSeverity().toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (severity.equals(\"HIGH\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return \"H\" + problem.getDescription().toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } else if (severity.equals(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return \"M\" + problem.getDescription().toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return \"L\" + problem.getDescription().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 91,
      "richardcom": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Manages storage of Library data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private LibraryStorage libraryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code LibraryStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public StorageManager(LibraryStorage libraryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.libraryStorage \u003d libraryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return libraryStorage.getLibraryFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return readLibrary(libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return libraryStorage.readLibrary(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        saveLibrary(library, libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        libraryStorage.saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Label times;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Label publisher;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookCode} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isbn.setText(book.getIsbn().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        address.setText(book.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        email.setText(book.getEmail().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        times.setText(book.getTimes().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author.setText(book.getAuthor().author);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        publisher.setText(book.getPublisher().publisher);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "Stefan-Jiang": 2,
      "richardcom": 22,
      "-": 57,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCardWithCover.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that displays information of a {@code Book} with book cover."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class BookCardWithCover extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String FXML \u003d \"BookListCardWithCover.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final BookCoverManager BOOK_COVER_MANAGER \u003d new BookCoverManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label times;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label publisher;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private ImageView cover;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a {@code BookCardWithCover} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param book The corresponding book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param displayedIndex The number corresponding to the order of the book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookCardWithCover(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        isbn.setText(\"ISBN              \" + book.getIsbn().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        address.setText(\"LANGUAGE   \" + book.getAddress().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        email.setText(\"CONTACT     \" + book.getEmail().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        times.setText(\"NUMBER OF TIMES BORROWED   \" + book.getTimes().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        author.setText(\"AUTHOR       \" + book.getAuthor().author);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        publisher.setText(\"PUBLISHER   \" + book.getPublisher().publisher);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        logger.info(\"Get the book cover\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setImage(BOOK_COVER_MANAGER.getCategoryBookCover(book.getName().fullName, book.getCategories()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setPreserveRatio(false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!(other instanceof BookCardWithCover)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        BookCardWithCover card \u003d (BookCardWithCover) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 6,
      "HCY123902": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCoverManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that returns the book cover of the {@code Book}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class BookCoverManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String GENERAL \u003d \"General\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String SCIENCE \u003d \"Science\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String HISTORY \u003d \"History\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String NOVEL \u003d \"Novels\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String PHYSICS \u003d \"Physics\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String CHEMISTRY \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MATHEMATICS \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MODERN_WAR \u003d \"ModernWar\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String ANCIENT_WAR \u003d \"AncientWar\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MODERN_HISTORY \u003d \"ModernHistory\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String ANCIENT_HISTORY \u003d \"AncientHistory\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final HashMap\u003cString, String[]\u003e CATEGORY_MAP \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] GENERAL_COVER \u003d new String[]{\"/images/general.jpg\", \"/images/general2.jpg\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] SCIENCE_COVER \u003d new String[]{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science.jpg\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science2.jpg\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science3.jpg\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science4.jpg\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] HISTORY_COVER \u003d new String[]{\"/images/history.jpg\", \"/images/history1.jpg\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] NOVEL_COVER \u003d new String[]{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/novel.jpg\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/novel2.jpg\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/novel3.jpg\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] PHYSICS_COVER \u003d new String[]{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics.jpg\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics2.jpg\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics3.jpg\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics4.jpg\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] CHEMISTRY_COVER \u003d new String[]{\"/images/chemistry.jpg\", \"/images/chemistry2.jpg\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] MATHEMATICS_COVER \u003d new String[]{\"/images/mathematics.jpg\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] MODERN_WAR_COVER \u003d new String[]{\"/images/modernWar.jpg\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] ANCIENT_WAR_COVER \u003d new String[]{\"/images/ancientWar.jpg\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] MODERN_HISTORY_COVER \u003d new String[]{\"/images/modernHistory.jpg\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] ANCIENT_HISTORY_COVER \u003d new String[]{\"/images/ancientHistory.jpg\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a new {@code BookCoverManager}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookCoverManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert CATEGORY_MAP !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert GENERAL_COVER !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert SCIENCE_COVER !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert HISTORY_COVER !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert NOVEL_COVER !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert PHYSICS_COVER !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert CHEMISTRY_COVER !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert MATHEMATICS_COVER !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert MODERN_WAR_COVER !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert ANCIENT_WAR_COVER !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert MODERN_HISTORY_COVER !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert ANCIENT_HISTORY_COVER !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(GENERAL, GENERAL_COVER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(SCIENCE, SCIENCE_COVER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(HISTORY, HISTORY_COVER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(NOVEL, NOVEL_COVER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(PHYSICS, PHYSICS_COVER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(CHEMISTRY, CHEMISTRY_COVER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(MATHEMATICS, MATHEMATICS_COVER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(MODERN_WAR, MODERN_WAR_COVER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(ANCIENT_WAR, ANCIENT_WAR_COVER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(MODERN_HISTORY, MODERN_HISTORY_COVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(ANCIENT_HISTORY, ANCIENT_HISTORY_COVER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns a corresponding book cover image according to the set of categories of the book and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * the name of the book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param bookName The name of the book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param categorySet The set of categories of the book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @return The corresponding book cover of the book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Image getCategoryBookCover(String bookName, Set\u003cCategory\u003e categorySet) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert bookName !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (categorySet \u003d\u003d null || categorySet.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d (bookName.hashCode() % GENERAL_COVER.length);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(GENERAL))[number]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Set\u003cString\u003e categoryNames \u003d categorySet.stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .map(category -\u003e category.categoryName.toUpperCase())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (categoryNames.contains(PHYSICS.toUpperCase())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % PHYSICS_COVER.length);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(PHYSICS))[number]));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(CHEMISTRY.toUpperCase())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % CHEMISTRY_COVER.length);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(CHEMISTRY))[number]));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(MATHEMATICS.toUpperCase())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % MATHEMATICS_COVER.length);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(MATHEMATICS))[number]));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(MODERN_WAR.toUpperCase())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % MODERN_WAR_COVER.length);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(MODERN_WAR))[number]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(ANCIENT_WAR.toUpperCase())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % ANCIENT_WAR_COVER.length);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(ANCIENT_WAR))[number]));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(MODERN_HISTORY.toUpperCase())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % MODERN_HISTORY_COVER.length);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(MODERN_HISTORY))[number]));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(ANCIENT_HISTORY.toUpperCase())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % ANCIENT_HISTORY_COVER.length);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(ANCIENT_HISTORY))[number]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(SCIENCE.toUpperCase())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % SCIENCE_COVER.length);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(SCIENCE))[number]));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(HISTORY.toUpperCase())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % HISTORY_COVER.length);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(HISTORY))[number]));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(NOVEL.toUpperCase())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % NOVEL_COVER.length);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(NOVEL))[number]));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % GENERAL_COVER.length);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(GENERAL))[number]));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static Mode mode \u003d Mode.NORMAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void setMode(Mode mode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookListPanel.mode \u003d mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (mode.equals(Mode.NORMAL)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    setGraphic(new BookCardWithCover(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                } else if (mode.equals(Mode.REVIEW)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    setGraphic(new LibraryBookDetailReviewCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    setGraphic(new LibraryBookDetailStockingCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 57,
      "HCY123902": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookReviewCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that displays a single review of a {@code Review} of a book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class BookReviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String FXML \u003d \"BookReviewCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a {@code BookReviewCard} with the given {@code Review} and index to display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookReviewCard(Review review, int displayedIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        id.setText(\"(\" + displayedIndex + \")\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        String ratingStar \u003d review.getRating().ratingNumber + \" star \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        for (int i \u003d 0; i \u003c review.getRating().ratingNumber; i \u003d i + 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            ratingStar \u003d ratingStar + \"*\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        rating.setText(ratingStar);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        content.setText(review.getContent().content);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!(other instanceof BookReviewCard)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        BookReviewCard card \u003d (BookReviewCard) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return rating.getText().equals(card.rating.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 content.getText().equals(card.content.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LibraryBookDetailReviewCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Separator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that displays detailed review information of a {@code Book}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class LibraryBookDetailReviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String FXML \u003d \"LibraryBookDetailReviewCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final BookCoverManager BOOK_COVER_MANAGER \u003d new BookCoverManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane reviews;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private ImageView cover;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a {@code LibraryBookDetailReviewCard} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public LibraryBookDetailReviewCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        isbn.setText(\"ISBN \" + book.getIsbn().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        author.setText(\"Author \" + book.getAuthor().author);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cReview\u003e reviewList \u003d book.getReviews().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(review -\u003e review.getContent().content))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        for (int i \u003d 0; i \u003c reviewList.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            BookReviewCard bookReviewCard \u003d new BookReviewCard(reviewList.get(i), i + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            Separator separator \u003d new Separator(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            reviews.getChildren().add(separator);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            reviews.getChildren().add(bookReviewCard.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setImage(BOOK_COVER_MANAGER.getCategoryBookCover(book.getName().fullName, book.getCategories()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setPreserveRatio(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!(other instanceof LibraryBookDetailReviewCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        LibraryBookDetailReviewCard card \u003d (LibraryBookDetailReviewCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 2,
      "HCY123902": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LibraryBookDetailStockingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that displays detailed stocking information of a {@code Book}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class LibraryBookDetailStockingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String FXML \u003d \"LibraryBookDetailStockingCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final BookCoverManager BOOK_COVER_MANAGER \u003d new BookCoverManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane stocking;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private ImageView cover;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a {@code LibraryBookDetailCard} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public LibraryBookDetailStockingCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        isbn.setText(\"ISBN \" + book.getIsbn().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getStocking().storage.forEach((location, storage) -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            if (storage \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                stocking.getChildren().add(new Label(location + \": \" + storage + \" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        author.setText(\"Author \" + book.getAuthor().author);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setImage(BOOK_COVER_MANAGER.getCategoryBookCover(book.getName().fullName, book.getCategories()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setPreserveRatio(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!(other instanceof LibraryBookDetailStockingCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        LibraryBookDetailStockingCard card \u003d (LibraryBookDetailStockingCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 2,
      "richardcom": 7,
      "HCY123902": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getLibraryFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                return executeCommand(commandText);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                // TODO Auto-generated catch block"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 23,
      "Stefan-Jiang": 1,
      "richardcom": 6,
      "-": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * The Mode class indicates the type of component to show."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    NORMAL,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    DETAIL,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    REVIEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/library_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/ColourTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/BookListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"publisher\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$publisher\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "      \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "Stefan-Jiang": 1,
      "richardcom": 1,
      "-": 34,
      "Caiyi34777": 2
    }
  },
  {
    "path": "src/main/resources/view/BookListCardWithCover.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cStackPane alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" maxWidth\u003d\"80\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" bottom\u003d\"5.0\" left\u003d\"35.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cImageView fx:id\u003d\"cover\" fitHeight\u003d\"105.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"publisher\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$publisher\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 49
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/BookReviewCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cHBox id\u003d\"bookReview\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"75\" prefWidth\u003d\"500\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" bottom\u003d\"5.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"rating\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 26
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838;  /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "richardcom"
        },
        "content": "#filterField, #bookListPanel, #bookWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#reviews #rating {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-background-color: #FFA500;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#reviews #content {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#bookReview {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    -fx-background-insets: 0, 1 0 0 0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "-fx-border-style: solid;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "-fx-border-width: 1px;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 349,
      "HCY123902": 27
    }
  },
  {
    "path": "src/main/resources/view/LibraryBookDetailReviewCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cStackPane alignment\u003d\"TOP_LEFT\" minHeight\u003d\"100\" maxWidth\u003d\"80\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" bottom\u003d\"5.0\" left\u003d\"35.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cImageView fx:id\u003d\"cover\" fitHeight\u003d\"105.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cVBox prefHeight\u003d\"45\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"reviews\" orientation\u003d\"VERTICAL\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 47
    }
  },
  {
    "path": "src/main/resources/view/LibraryBookDetailStockingCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cStackPane alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" maxWidth\u003d\"80\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" bottom\u003d\"5.0\" left\u003d\"35.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cImageView fx:id\u003d\"cover\" fitHeight\u003d\"105.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"stocking\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"50\" maxHeight\u003d\"1000\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 46
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "         title\u003d\"IntelliBrary\" minWidth\u003d\"600\" minHeight\u003d\"450\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \u003cImage url\u003d\"@/images/library_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        \u003cURL value\u003d\"@ColourTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cVBox fx:id\u003d\"bookList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "          \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 5,
      "richardcom": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/data/JsonLibraryStorageTest/invalidAndValidBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"name\": \"Valid Book\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"name\": \"Book With Invalid Isbn Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 3,
      "-": 8,
      "Caiyi34777": 2
    }
  },
  {
    "path": "src/test/data/JsonLibraryStorageTest/invalidBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"name\": \"Book with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 5,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/categorizedBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  \"books\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"The Guns of August\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"9780026203104\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"book@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"12\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 14,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"Barbara W Tuchman\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"Presidio Press\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"History\", \"ModernWar\" ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"A Brief History of Time\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"9780553175219\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"book@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"20\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 37,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"Stephen Hawking\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"Bantam Dell Publishing Group\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Science\", \"Physics\" ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"Pride and Prejudice\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"9780143058175\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"book@example.com\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"34\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 12,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 16"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"Jane Austen\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"T Egerton Whitehall\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Novels\" ]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"87652533\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"56\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 19,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 21"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"ModernHistory\" ]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"9482224\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"68\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Chemistry\" ]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"9482427\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"79\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"History\", \"AncientHistory\" ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"isbn\" : \"9482442\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"19\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Mathematics\" ]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 164
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/duplicateBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"times\": \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"categorised\": [ \"friends\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\": \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"publisher\": \"pub\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"94351253\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"times\": \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\": [ \"friends\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\": \"a\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"publisher\": \"pub\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4,
      "Stefan-Jiang": 2,
      "richardcom": 2,
      "-": 9,
      "Caiyi34777": 3,
      "HCY123902": 29
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/invalidBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 6,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/typicalBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"isbn\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"50\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"ModernWar\", \"History\" ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\" : \"98765432\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"times\" : \"20\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\" : \"b\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Science\" ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\" : \"95352563\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"45\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 15,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 30"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Physics\" ]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\" : \"87652533\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"35\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"AncientHistory\" ]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\" : \"9482224\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"60\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Novels\" ]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\" : \"9482427\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"30\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Mathematics\" ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\" : \"9482442\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"times\" : \"15\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"stocking\" : {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"centralLibrary\" : 10,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"scienceLibrary\" : 10"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    },"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"reviews\" : [ {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 3,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Some detail may not be shown in certain part of the book\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 4,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Exciting to see how the plot will develop\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"ratingNumber\" : 5,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      \"reviewContent\" : \"Interesting book with insight into the history\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \"author\" : \"a\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"publisher\" : \"pub\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \"categorised\" : [ \"Chemistry\" ]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  \"problems\" : [ ]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 6,
      "Stefan-Jiang": 6,
      "richardcom": 2,
      "-": 26,
      "Caiyi34777": 6,
      "HCY123902": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Index fifthBookIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(fifthBookIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(fifthBookIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(fifthBookIndex.equals(fifthBookIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(fifthBookIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(fifthBookIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(fifthBookIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/library_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        JsonLibraryStorage libraryStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                new JsonLibraryStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // Setup LogicManager with JsonLibraryIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                new JsonLibraryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionLibrary.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_AMY + STOCKING_DESC_AMY + TIMES_DESC_AMY + AUTHOR_DESC_AMY + PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(AMY).withCategories().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static class JsonLibraryIoExceptionThrowingStub extends JsonLibraryStorage {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        private JsonLibraryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 6,
      "Stefan-Jiang": 12,
      "richardcom": 19,
      "-": 133,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBook), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Book bookInList \u003d model.getLibrary().getBookList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(new AddCommand(bookInList), model, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 4,
      "richardcom": 9,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void constructor_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBook).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_BOOK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book alice \u003d new BookBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bob \u003d new BookBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public void setLibraryFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate, Mode mode) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * Returns true if a book with the same identity as {@code book} exists in the library."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @param problem"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * Deletes the given book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * The book must exist in the library."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @param problem"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void deleteProblem(Problem problem) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * {@code target} must exist in the library."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * The book identity of {@code editedBook} must not be the same as another existing book in the Llibrary."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @param target"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @param problem"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void setProblem(Problem target, Problem problem) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * Returns an unmodifiable view of the filtered book list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @param predicate"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @param mode"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate, Mode mode) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        public String getProblemString() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            // TODO Auto-generated method stub"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * A Model stub that contains a single book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return this.book.isSameBook(book);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * A Model stub that always accept the book being added."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return booksAdded.stream().anyMatch(book::isSameBook);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return new Library();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 18,
      "Stefan-Jiang": 8,
      "richardcom": 90,
      "-": 145,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void execute_emptyLibrary_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void execute_nonEmptyLibrary_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        expectedModel.setLibrary(new Library());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_ISBN_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_ISBN_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String VALID_TIMES_AMY \u003d \"23\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String VALID_TIMES_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_CATEGORY_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_CATEGORY_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALID_STOCKING_AMY \u003d \"central library 10 science library 10\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALID_STOCKING_BOB \u003d \"central library 30 science library 15\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_AUTHOR_BOB \u003d \"a\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_PUBLISHER_BOB \u003d \"pub\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_AUTHOR_AMY \u003d \"a\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_PUBLISHER_AMY \u003d \"pub\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String ISBN_DESC_AMY \u003d \" \" + PREFIX_ISBN + VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String ISBN_DESC_BOB \u003d \" \" + PREFIX_ISBN + VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String TIMES_DESC_AMY \u003d \" \" + PREFIX_TIMES + VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String TIMES_DESC_BOB \u003d \" \" + PREFIX_TIMES + VALID_TIMES_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String CATEGORY_DESC_FRIEND \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String CATEGORY_DESC_HUSBAND \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String STOCKING_DESC_AMY \u003d \" \" + PREFIX_STOCKING + VALID_STOCKING_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String STOCKING_DESC_BOB \u003d \" \" + PREFIX_STOCKING + VALID_STOCKING_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String AUTHOR_DESC_BOB \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String PUBLISHER_DESC_BOB \u003d \" \" + PREFIX_PUBLISHER + VALID_PUBLISHER_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String AUTHOR_DESC_AMY \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String PUBLISHER_DESC_AMY \u003d \" \" + PREFIX_PUBLISHER + VALID_PUBLISHER_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String INVALID_ISBN_DESC \u003d \" \" + PREFIX_ISBN + \"911a\"; // \u0027a\u0027 not allowed in isbns"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"hubby*\"; // \u0027*\u0027 not allowed in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    // categories"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String INVALID_STOCKING_DESC \u003d \" \" + PREFIX_STOCKING + \"central library: 20 science library:10\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String INVALID_TIMES_DESC \u003d \" \" + PREFIX_TIMES + \"03282\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"james\u0026\u0026\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String INVALID_PUBLISHER_DESC \u003d \" \" + PREFIX_PUBLISHER + \"david\u0026\u0026\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        DESC_AMY \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY).withIsbn(VALID_ISBN_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCategories(VALID_CATEGORY_FRIEND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .withTimes(VALID_TIMES_AMY).withStockings(VALID_STOCKING_AMY).withAuthor(VALID_AUTHOR_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .withPublisher(VALID_PUBLISHER_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        DESC_BOB \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withStockings(VALID_STOCKING_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                .withTimes(VALID_TIMES_BOB).withPublisher(VALID_PUBLISHER_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND, VALID_CATEGORY_FRIEND).withAuthor(VALID_AUTHOR_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * - the library, filtered book list and selected book in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library expectedLibrary \u003d new Library(actualModel.getLibrary());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertEquals(expectedLibrary, actualModel.getLibrary());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * {@code model}\u0027s library."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final String[] splitName \u003d book.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])), Mode.NORMAL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 13,
      "Stefan-Jiang": 16,
      "richardcom": 27,
      "-": 89,
      "Caiyi34777": 9,
      "HCY123902": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteByCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteByCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_validBookToBeDeleted_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String name1 \u003d bookToDelete.getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        list.add(bookToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteByCommand \u003d new DeleteByCommand(name1, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteByCommand.MESSAGE_DELETE_BOOK_SUCCESS, list.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandSuccess(deleteByCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookName_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String bookName \u003d \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteByCommand \u003d new DeleteByCommand(bookName, 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(deleteByCommand, model, Messages.MESSAGE_INVALID_BOOK_DELETE_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteFirstCommand \u003d new DeleteByCommand(\"TEST\", 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteSecondCommand \u003d new DeleteByCommand(\"TEST2\", 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteFirstCommandCopy \u003d new DeleteByCommand(\"TEST\", 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 3,
      "richardcom": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of library list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false, Mode.NORMAL);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 6,
      "richardcom": 26,
      "-": 77,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PUBLISHER_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptorWithSameValues \u003d new EditCommand.EditBookDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        EditCommand.EditBookDescriptor editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different isbn -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different times -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_TIMES_AMY).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different authors -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_AUTHOR_AMY).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different publishers -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_PUBLISHER_AMY).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 15,
      "richardcom": 7,
      "-": 45,
      "Caiyi34777": 4,
      "HCY123902": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Editing times is currently not allowed in the current editing function, that may explain why this test case fails."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    We can consider removing this test case or implement our \"editing times\" function later on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    We shall see how it goes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index indexLastBook \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastBook.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookBuilder bookInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d bookInList.withName(VALID_NAME_BOB).withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastBook, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, new EditBookDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBookUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_BOOK, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBookFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // edit book in filtered list into a duplicate in library"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Book bookInList \u003d model.getLibrary().getBookList().get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * but smaller than size of library"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of library list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_BOOK, DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor copyDescriptor \u003d new EditCommand.EditBookDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_BOOK, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_BOOK, DESC_AMY)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_BOOK, DESC_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 16,
      "richardcom": 54,
      "-": 104,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_zeroKeywords_noBookFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_multipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredBookList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 3,
      "richardcom": 14,
      "-": 66,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 3,
      "richardcom": 2,
      "-": 33,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ELLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for StockCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class StockCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void execute_oneKeyword_oneBookFound() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameContainsKeywordsPredicate nameContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"Elle\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.updateFilteredBookList(nameContainsKeywordsPredicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand(Arrays.asList(\"Elle\"), null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertCommandSuccess(stockCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Arrays.asList(ELLE), model.getFilteredBookList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 3,
      "richardcom": 7,
      "HCY123902": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TimesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for TimesCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final String TIMES_STUB \u003d \"12345\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder(firstBook).withTimes(TIMES_STUB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(editedBook.getTimes().value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(TimesCommand.MESSAGE_ADD_TIMES_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(firstBook, editedBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder(model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .withTimes(TIMES_STUB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(editedBook.getTimes().value));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(TimesCommand.MESSAGE_ADD_TIMES_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(firstBook, editedBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(outOfBoundIndex, new Times(VALID_TIMES_BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of library list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(outOfBoundIndex, new Times(VALID_TIMES_BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final TimesCommand standardCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(VALID_TIMES_AMY));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand commandWithSameValues \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times (VALID_TIMES_AMY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new TimesCommand(INDEX_SECOND_BOOK, new Times(VALID_TIMES_AMY))));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different times -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new TimesCommand(INDEX_FIRST_BOOK, new Times(VALID_TIMES_BOB))));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 87,
      "richardcom": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PUBLISHER_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STOCKING_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMES_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PUBLISHER_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOB).withCategories(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + TIMES_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // multiple isbns - last isbn accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_AMY + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBookMultipleCategories \u003d new BookBuilder(BOB).withCategories(VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, new AddCommand(expectedBookMultipleCategories));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        //multiple stocking - last stocking accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                        + ADDRESS_DESC_BOB + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + STOCKING_DESC_BOB + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(AMY).withCategories().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + ISBN_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMES_DESC_AMY + STOCKING_DESC_AMY + AUTHOR_DESC_AMY + PUBLISHER_DESC_AMY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // missing isbn prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_ISBN_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_ISBN_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + VALID_TIMES_BOB + CATEGORY_DESC_FRIEND + VALID_STOCKING_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + VALID_AUTHOR_BOB + VALID_PUBLISHER_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // new attributes need to be added here"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid isbn"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_ISBN_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + INVALID_CATEGORY_DESC + VALID_CATEGORY_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // invalid stocking"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + INVALID_STOCKING_DESC"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + INVALID_AUTHOR_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + PUBLISHER_DESC_BOB, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // invalid publisher"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + AUTHOR_DESC_BOB + INVALID_PUBLISHER_DESC, Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + INVALID_TIMES_DESC + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, Times.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ISBN_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 49,
      "Stefan-Jiang": 14,
      "richardcom": 33,
      "-": 80,
      "Caiyi34777": 19,
      "HCY123902": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String argsString \u003d \"  some random string /t category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteByCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.DeleteByCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "class DeleteByCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private DeleteByCommandParser parser \u003d new DeleteByCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void parse_validArgs_returnsStockCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB, new DeleteByCommand(VALID_NAME_BOB, 0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PUBLISHER_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STOCKING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMES_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PUBLISHER_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1 q/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC, Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid isbn"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        //invalid address"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        //invalid category"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STOCKING_DESC, Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid stocking"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIMES_DESC, Times.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PUBLISHER_DESC, Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid publisher"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        //All Failed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid isbn followed by valid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC + EMAIL_DESC_AMY, Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // valid isbn followed by invalid isbn. The test case for invalid isbn followed by valid isbn"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + ISBN_DESC_BOB + INVALID_ISBN_DESC, Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Book} being edited,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND + CATEGORY_EMPTY,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FRIEND + CATEGORY_EMPTY + CATEGORY_DESC_HUSBAND,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_ISBN_AMY,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_BOB + CATEGORY_DESC_HUSBAND"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND, VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // isbn"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_AMY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withCategories(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // stocking"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withStockings(VALID_STOCKING_AMY).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // times"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withTimes(VALID_TIMES_AMY).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // author"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_AMY).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // publisher"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withPublisher(VALID_PUBLISHER_AMY).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + CATEGORY_DESC_FRIEND + ISBN_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + CATEGORY_DESC_FRIEND"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + ISBN_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCategories(VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                 VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ISBN_DESC + ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_ISBN_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parse_resetCategories_success() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_EMPTY;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 34,
      "richardcom": 64,
      "-": 137,
      "Caiyi34777": 30,
      "HCY123902": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LibraryParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class LibraryParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final LibraryParser parser \u003d new LibraryParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookUtil.getAddCommand(book));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new AddCommand(book), command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } //After implementation of edit */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + BookUtil.getEditBookDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_BOOK, descriptor), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // After implementation of Edit */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void parseCommand_times() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        final Times times \u003d new Times(\"20\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand command \u003d (TimesCommand) parser.parseCommand(TimesCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + PREFIX_TIMES + times.value);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new TimesCommand(INDEX_FIRST_BOOK, times), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 10,
      "richardcom": 17,
      "-": 77,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_ISBN \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_ISBN \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String VALID_STOCKING \u003d \"central library 0 science library 0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIsbn((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIsbn(INVALID_ISBN));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_validValueWithoutWhitespace_returnsIsbn() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Isbn expectedIsbn \u003d new Isbn(VALID_ISBN);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedIsbn, ParserUtil.parseIsbn(VALID_ISBN));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_validValueWithWhitespace_returnsTrimmedIsbn() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String isbnWithWhitespace \u003d WHITESPACE + VALID_ISBN + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Isbn expectedIsbn \u003d new Isbn(VALID_ISBN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedIsbn, ParserUtil.parseIsbn(isbnWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategories(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e(Arrays.asList(new Category(VALID_CATEGORY_1),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public void parseStocking_validValueWithoutWhitespace_returnsStocking() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"central library\", 30);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"science library\", 45);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking expectedStocking \u003d new Stocking(storage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertEquals(expectedStocking, ParserUtil.parseStocking(VALID_STOCKING));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8,
      "-": 151,
      "Caiyi34777": 40,
      "HCY123902": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StockCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class StockCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private StockCommandParser stockCommandParser \u003d new StockCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void parse_validArgs_returnsStockCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseSuccess(stockCommandParser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                NAME_DESC_AMY,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new StockCommand(Arrays.asList(VALID_NAME_AMY.split(\"\\\\s+\")), null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TimesCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private TimesCommandParser parser \u003d new TimesCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final String nonEmptyTimes \u003d \"123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // have times"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_TIMES + nonEmptyTimes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand expectedCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(nonEmptyTimes));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, TimesCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, TimesCommand.COMMAND_WORD + \" \" + nonEmptyTimes, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 34,
      "richardcom": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.problem.Problem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class LibraryTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Library library \u003d new Library();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertEquals(Collections.emptyList(), library.getBookList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void resetData_withValidReadOnlyLibrary_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library newData \u003d getTypicalLibrary();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertEquals(newData, library);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.hasBook(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void hasBook_bookNotInLibrary_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(library.hasBook(ALICE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void hasBook_bookInLibrary_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.addBook(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(library.hasBook(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInLibrary_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.addBook(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(library.hasBook(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void getBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e library.getBookList().remove(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * A stub ReadOnlyLibrary whose books list can violate interface constraints."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static class LibraryStub implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        LibraryStub(Collection\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public ObservableList\u003cProblem\u003e getProblemList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return getProblemList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 22,
      "richardcom": 16,
      "-": 55,
      "Caiyi34777": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.testutil.LibraryBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertEquals(new Library(), new Library(modelManager.getLibrary()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void setLibraryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLibraryFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void setLibraryFilePath_validPath_setsLibraryFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        modelManager.setLibraryFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertEquals(path, modelManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBook(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void hasBook_bookNotInLibrary_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(modelManager.hasBook(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void hasBook_bookInLibrary_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        modelManager.addBook(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(modelManager.hasBook(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library addressBook \u003d new LibraryBuilder().withBook(ALICE).withBook(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library differentAddressBook \u003d new Library();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        modelManager.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)), Mode.NORMAL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        differentUserPrefs.setLibraryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 14,
      "richardcom": 13,
      "-": 105,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void setLibraryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setLibraryFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AuthorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Author(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Author(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e book.getCategories().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(ALICE.isSameBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different isbn and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // same name, same isbn, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // same name, same isbn, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different isbn -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 27,
      "-": 59,
      "Caiyi34777": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/IsbnTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class IsbnTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Isbn(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_invalidIsbn_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String invalidIsbn \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Isbn(invalidIsbn));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void isValidIsbn() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // null isbn number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Isbn.isValidIsbn(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid isbn numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"isbn\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // valid isbn numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(Isbn.isValidIsbn(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(Isbn.isValidIsbn(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(Isbn.isValidIsbn(\"124293842033123\")); // long isbn numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "Caiyi34777": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // Keywords match isbn, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\").withIsbn(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 10,
      "-": 64,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NumberContainsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class NumberContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e secondKeywords \u003d Arrays.asList(\"a\", \"b\", \"c\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate numberContainsKeywordPredicate \u003d new NumberContainsKeywordPredicate(keywords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate secondPredicate \u003d new NumberContainsKeywordPredicate(secondKeywords);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertTrue(numberContainsKeywordPredicate.equals(numberContainsKeywordPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate copyPredicate \u003d new NumberContainsKeywordPredicate(keywords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertTrue(numberContainsKeywordPredicate.equals(copyPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertFalse(numberContainsKeywordPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertFalse(numberContainsKeywordPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertFalse(numberContainsKeywordPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "HCY123902": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/PublisherTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class PublisherTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Publisher(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Publisher(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Publisher.isValidPublisher(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"pku\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"pku 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"PKU\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"PKU THU NUS\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/StockingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "class StockingTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void isValidStocking() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\"central library 10 science library 10\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\"central library 30 science library 45\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\"central library 10\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\"science library 10\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\" \"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\"\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(Stocking.isValidStocking(\"some library 10\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(Stocking.isValidStocking(\"some library\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 11,
      "HCY123902": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/TimesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times times \u003d new Times(\"20\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(times.equals(times));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times remarkCopy \u003d new Times(times.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(times.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(times.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(times.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times differentRemark \u003d new Times(\"15\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(times.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 30,
      "richardcom": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(uniqueBookList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(uniqueBookList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(uniqueBookList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.setBook(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBook(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBook(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBook(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBook(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((UniqueBookList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((List\u003cBook\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBooks(listWithDuplicateBooks));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            -\u003e uniqueBookList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 82,
      "-": 84,
      "Caiyi34777": 3,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/category/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/review/RatingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class RatingTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void isValidRating() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(Rating.isValidRating(\"a\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/review/ReviewContentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class ReviewContentTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void isValidContent() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(ReviewContent.isValidContent(\"The book is really interesting\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(ReviewContent.isValidContent(\"\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/review/ReviewNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class ReviewNumberTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void isValidReviewNumber() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(ReviewNumber.isValidReviewNumber(\"6\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(ReviewNumber.isValidReviewNumber(\"a\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/review/ReviewTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.model.review;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class ReviewTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Rating rating \u003d new Rating(5);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewContent reviewContent \u003d new ReviewContent(\"The book is quite interesting\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Rating newRating \u003d new Rating(5);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ReviewContent newReviewContent \u003d new ReviewContent(\"The book is quite interesting\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Review review \u003d new Review(rating, reviewContent);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Review newReview \u003d new Review(newRating, newReviewContent);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Review reviewWithDifferentReviewContent \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new Review(rating, new ReviewContent(\"The book is really interesting\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Review reviewWithDifferentRating \u003d new Review(new Rating(4), reviewContent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(review.equals(review));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(review.equals(newReview));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(review.equals(reviewWithDifferentRating));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertFalse(review.equals(reviewWithDifferentReviewContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_ISBN \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_ISBN \u003d BENSON.getIsbn().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final String VALID_TIMES \u003d BENSON.getTimes().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d BENSON.getCategories().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String VALID_AUTHOR \u003d BENSON.getAuthor().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static final String VALID_PUBLISHER \u003d BENSON.getPublisher().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final JsonAdaptedStocking VALID_STOCKING \u003d new JsonAdaptedStocking(BENSON.getStocking());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final List\u003cJsonAdaptedReview\u003e VALID_REVIEWS \u003d BENSON.getReviews().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .map(JsonAdaptedReview::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_validBookDetails_returnsBook() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(BENSON, book.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(INVALID_NAME, VALID_ISBN, VALID_EMAIL, VALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_ISBN, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void toModelType_invalidIsbn_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, INVALID_ISBN, VALID_EMAIL, VALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String expectedMessage \u003d Isbn.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void toModelType_nullIsbn_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Isbn.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_ISBN, INVALID_EMAIL, VALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, VALID_ISBN, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_ISBN, VALID_EMAIL, INVALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, VALID_ISBN, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void toModelType_invalidCategories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_ISBN, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        VALID_TIMES, invalidCategories, VALID_STOCKING, VALID_REVIEWS, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, book::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "Stefan-Jiang": 1,
      "richardcom": 36,
      "-": 62,
      "Caiyi34777": 13,
      "HCY123902": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonLibraryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class JsonLibraryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLibraryStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void readLibrary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readLibrary(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLibrary\u003e readLibrary(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return new JsonLibraryStorage(Paths.get(filePath)).readLibrary(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(readLibrary(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"notJsonFormatLibrary.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void readLibrary_invalidBookLibrary_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"invalidBookLibrary.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void readLibrary_invalidAndValidBookLibrary_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"invalidAndValidBookLibrary.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        original.addBook(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        original.removeBook(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        original.addBook(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void saveLibrary_nullLibrary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLibrary(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Saves {@code library} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private void saveLibrary(ReadOnlyLibrary library, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new JsonLibraryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    .saveLibrary(library, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void saveLibrary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLibrary(new Library(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 22,
      "richardcom": 10,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableLibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class JsonSerializableLibraryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableLibraryTest\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final Path TYPICAL_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBookLibrary.json\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final Path INVALID_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookLibrary.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookLibrary.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKS_FILE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddressBook typicalBooksAddressBook \u003d TypicalBooks.getTypicalAddressBook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(addressBookFromFile, typicalBooksAddressBook);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOK_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_BOOK,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 7,
      "richardcom": 18,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"data/addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d new JsonLibraryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void getLibraryFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertNotNull(storageManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 3,
      "richardcom": 12,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.review.Review;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String DEFAULT_ISBN \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String DEFAULT_TIMES \u003d \"10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String DEFAULT_PUBLISHER \u003d \"pub\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final HashMap\u003cString, Integer\u003e DEFAULT_STOCKING \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Isbn isbn;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Times times;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private Publisher publisher;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Stocking stocking;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Set\u003cReview\u003e reviews;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookBuilder} with the default details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        isbn \u003d new Isbn(DEFAULT_ISBN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        times \u003d new Times(DEFAULT_TIMES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        publisher \u003d new Publisher(DEFAULT_PUBLISHER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        stocking \u003d new Stocking(DEFAULT_STOCKING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        name \u003d bookToCopy.getName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isbn \u003d bookToCopy.getIsbn();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        email \u003d bookToCopy.getEmail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        address \u003d bookToCopy.getAddress();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        times \u003d bookToCopy.getTimes();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(bookToCopy.getCategories());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d bookToCopy.getAuthor();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        publisher \u003d bookToCopy.getPublisher();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        stocking \u003d bookToCopy.getStocking();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        reviews \u003d bookToCopy.getReviews();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Name} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withName(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withCategories(String ... categories) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Address} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Isbn} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withIsbn(String isbn) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.isbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Email} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Sets the {@code reviews} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookBuilder withReviews(Review ... reviews) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.reviews \u003d SampleDataUtil.getReviews(reviews);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Times} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withTimes(String times) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d new Times(times);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Author} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Publisher} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withPublisher(String publisher) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.publisher \u003d new Publisher(publisher);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Stocking} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookBuilder withStocking(String storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            Stocking stocking \u003d ParserUtil.parseStocking(storage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.stocking \u003d new Stocking(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Book(name, isbn, email, address, times, categories, stocking, reviews, author, publisher);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9,
      "Stefan-Jiang": 9,
      "richardcom": 43,
      "-": 60,
      "Caiyi34777": 7,
      "HCY123902": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an add command string for adding the {@code book}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String getAddCommand(Book book) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getBookDetails(book);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the part of command string for the given {@code book}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String getBookDetails(Book book) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_NAME + book.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_ISBN + book.getIsbn().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_EMAIL + book.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_ADDRESS + book.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getCategories().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.categoryName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_STOCKING); // stock format here"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_TIMES + book.getTimes().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().author + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_PUBLISHER + book.getPublisher().publisher + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        sb.append(PREFIX_STOCKING + book.getStocking().toString() + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String getEditBookDescriptorDetails(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        descriptor.getIsbn().ifPresent(isbn -\u003e sb.append(PREFIX_ISBN).append(isbn.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // to implement new attributes as well."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Set\u003cCategory\u003e categories \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                sb.append(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                categories.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 31,
      "-": 32,
      "Caiyi34777": 7,
      "HCY123902": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class to help with building EditBookDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.descriptor \u003d new EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an {@code EditBookDescriptor} with fields containing {@code book}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setName(book.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor.setTimes(book.getTimes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setIsbn(book.getIsbn());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setEmail(book.getEmail());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setAddress(book.getAddress());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setCategories(book.getCategories());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor.setTimes(book.getTimes());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        descriptor.setStocking(book.getStocking());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        descriptor.setAuthor(book.getAuthor());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        descriptor.setPublisher(book.getPublisher());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Isbn} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withIsbn(String isbn) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        descriptor.setIsbn(new Isbn(isbn));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Sets the {@code Times} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public EditBookDescriptorBuilder withTimes(String times) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor.setTimes(new Times(times));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Email} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Address} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e categorySet \u003d Stream.of(categories).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        descriptor.setCategories(categorySet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Sets the {@code Author} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Sets the {@code Publisher} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withPublisher(String publisher) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setPublisher(new Publisher(publisher));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Sets the {@code Stocking} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public EditBookDescriptorBuilder withStockings(String storage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            Stocking stocking \u003d ParserUtil.parseStocking(storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            descriptor.setStocking(stocking);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            descriptor.setStocking(new Stocking(new HashMap\u003c\u003e()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptor build() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4,
      "Stefan-Jiang": 10,
      "richardcom": 48,
      "-": 51,
      "Caiyi34777": 3,
      "HCY123902": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LibraryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * A utility class to help with building Library objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " *     {@code Library ab \u003d new LibraryBuilder().withBook(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class LibraryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Library library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public LibraryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library \u003d new Library();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public LibraryBuilder(Library library) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.library \u003d library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Adds a new {@code Book} to the {@code Library} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public LibraryBuilder withBook(Book book) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        library.addBook(book);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Library build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the middle index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the last index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the book in the {@code model}\u0027s book list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Book getBook(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class containing a list of {@code Book} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book ALICE \u003d new BookBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withReviews()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .withIsbn(\"94351253\").withTimes(\"12\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withCategories(\"friends\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final Book BENSON \u003d new BookBuilder().withName(\"Benson Meier\").withReviews()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withTimes(\"20\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .withEmail(\"johnd@example.com\").withIsbn(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            .withCategories(\"owesMoney\", \"friends\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book CARL \u003d new BookBuilder().withName(\"Carl Kurz\").withIsbn(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"heinz@example.com\").withReviews().withTimes(\"20\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"wall street\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book DANIEL \u003d new BookBuilder().withName(\"Daniel Meier\").withIsbn(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withReviews().withAddress(\"10th street\").withCategories(\"friends\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withAuthor(\"a\").withPublisher(\"pub\").withTimes(\"20\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book ELLE \u003d new BookBuilder().withName(\"Elle Meyer\").withIsbn(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"werner@example.com\").withReviews().withTimes(\"20\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"michegan ave\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book FIONA \u003d new BookBuilder().withName(\"Fiona Kunz\").withIsbn(\"9482427\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"lydia@example.com\").withReviews().withTimes(\"20\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"little tokyo\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book GEORGE \u003d new BookBuilder().withName(\"George Best\").withIsbn(\"9482442\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"anna@example.com\").withReviews().withTimes(\"20\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"4th street\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // all newly added attributes need to be implemented here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book HOON \u003d new BookBuilder().withName(\"Hoon Meier\").withIsbn(\"8482424\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"stefan@example.com\").withReviews().withAddress(\"little india\").withTimes(\"12\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withPublisher(\"pub\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book IDA \u003d new BookBuilder().withName(\"Ida Mueller\").withIsbn(\"8482131\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withEmail(\"hans@example.com\").withReviews().withAddress(\"chicago ave\").withTimes(\"12\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withPublisher(\"pub\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // Manually added - Book\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book AMY \u003d new BookBuilder().withName(VALID_NAME_AMY).withIsbn(VALID_ISBN_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCategories(VALID_CATEGORY_FRIEND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withTimes(\"12\").withStocking(VALID_STOCKING_AMY).withAuthor(\"a\").withPublisher(\"pub\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book BOB \u003d new BookBuilder().withName(VALID_NAME_BOB).withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withAuthor(\"a\").withPublisher(\"pub\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            .withTimes(\"12\").withCategories(VALID_CATEGORY_HUSBAND, VALID_CATEGORY_FRIEND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withStocking(VALID_STOCKING_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns an {@code Library} with all the typical books."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static Library getTypicalLibrary() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Library lib \u003d new Library();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            lib.addBook(book);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return lib;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 8,
      "Stefan-Jiang": 9,
      "richardcom": 21,
      "-": 24,
      "Caiyi34777": 2,
      "HCY123902": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 3,
      "-": 9
    }
  }
]
