[
  {
    "path": ".github/check-eof-newline.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo \"Checking for newline at EOF...\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ianyong": 1
    }
  },
  {
    "path": ".github/check-line-endings.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo \"Checking for prohibited line endings...\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ianyong": 1
    }
  },
  {
    "path": ".github/check-trailing-whitespace.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo \"Checking for trailing whitespace...\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        # Only warn for markdown files (*.md) to accommodate text editors"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "ianyong": 2
    }
  },
  {
    "path": ".github/run-checks.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo \"Running formatting checks...\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "ianyong": 1
    }
  },
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* Fine$$e is a desktop app for **managing finances, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Fine\\$\\$e can track and help you cultivate good financial habits faster than traditional GUI apps."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " Site Map"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-w16-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-w16-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* [About Us](https://ay2021s1-cs2103t-w16-3.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Acknowledgments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 15,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "    id \u0027info.solidsoft.pitest\u0027 version \u00271.5.2\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027com.github.jakemarsden.git-hooks\u0027 version \u00270.0.2\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "mainClassName \u003d \u0027ay2021s1_cs2103_w16_3.finesse.Main\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "pitest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    targetClasses \u003d [\u0027ay2021s1_cs2103_w16_3.finesse.*\u0027]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    junit5PluginVersion \u003d \u00270.12\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "    threads \u003d 4"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "gitHooks {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    hooksDirectory \u003d file(\u0027.git/hooks\u0027)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    gradleCommand \u003d \u0027./gradlew\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    hooks \u003d ["
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Git hooks run in a bash environment regardless of OS."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u0027pre-push\u0027: \u0027clean check \u0026\u0026 .github/run-checks.sh\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wltan"
        },
        "content": "    archiveFileName \u003d \u0027finesse.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "run {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "wltan": 7,
      "zhaojj2209": 2,
      "-": 72,
      "ianyong": 12
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "You can reach us at the email \u003cay2021s1-cs2103t-w16-3@googlegroups.com\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Ian Yong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cimg src\u003d\"images/ianyong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "[[github](https://github.com/ianyong)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "[[portfolio](team/ianyong.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* Role: Team Co-Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "### Tan Wei Liang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003cimg src\u003d\"images/wltan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "[[github](http://github.com/wltan)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "[[portfolio](team/wltan.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "* Role: Team Co-Lead"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "* Responsibilities: Git/CI Expert, Integration"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "### Siddarth Nandanahosur Suresh"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cimg src\u003d\"images/siddarth2824.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "[[github](http://github.com/siddarth2824)] [[portfolio](team/siddarth2824.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* Responsibilities: Scheduling and Tracking, User Interface"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Zhao Jingjing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "\u003cimg src\u003d\"images/zhaojj2209.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "[[github](http://github.com/zhaojj2209)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "[[portfolio](team/zhaojj2209.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Responsibilities: Documentation, Model, Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "### Yong Ping"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "\u003cimg src\u003d\"images/yongping827.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "[[github](http://github.com/yongping827)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "[[portfolio](team/yongping827.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* Responsibilities: Code Quality, Storage"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4,
      "wltan": 6,
      "zhaojj2209": 5,
      "yongping827": 5,
      "-": 32,
      "ianyong": 7
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to create a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "  e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **`pitest`**: Generates a [pitest](http://pitest.org/) mutation coverage report inside `build/reports`.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "  e.g. `./gradlew clean pitest`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "wltan": 5,
      "-": 77
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/MainApp.java). It is responsible for:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* on app launch - initializing the components in the correct sequence, and connecting them to each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* on shut down - shutting down the components and invoking cleanup methods where necessary."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* [**`UI`**](#ui-component): The App\u0027s User Interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/Ui.java)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TransactionListPanel`, `StatusBarFooter` etc. All of these, including `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The `UI` component uses the JavaFx UI framework. The layout of these UI parts is defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of [`MainWindow`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/Logic.java)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. `Logic` uses the `FinanceTrackerParser` class to parse the user command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. This results in a `Command` object which is executed by `LogicManager`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. The command execution can affect `Model` (e.g. adding a transaction)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to `Ui`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct `Ui` to perform certain actions, such as displaying the help message to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/model/Model.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The `Model`:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wltan"
        },
        "content": "* stores the finance tracker data in a `TransactionList` containing `Transaction`s."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* exposes `MonthlySavings` and `MonthlyBudget`, which can be \u0027observed\u0027 e.g. the UI can be bound to the values in these classes so that the UI automatically updates when the values in the classes change."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTransaction\u003e` which can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wltan"
        },
        "content": "* does not depend on any of the other three components (`UI`, `Logic`, `Storage`)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wltan"
        },
        "content": "A `Transaction`:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wltan"
        },
        "content": "* represents a unit of user data within the finance tracker."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wltan"
        },
        "content": "* is either an `Expense` or an `Income`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wltan"
        },
        "content": "* is composed of a `Title`, an `Amount`, a `Date`, and any number of `Category`s. These are known as *data fields*."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wltan"
        },
        "content": "The *data fields* `Title`, `Amount`, `Date`, and `Category` are encapsulations of an underlying Java data type."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wltan"
        },
        "content": "| Data Field  | Underlying Java Data Type   |"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wltan"
        },
        "content": "| ----------- | -------------------------   |"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wltan"
        },
        "content": "| `Title`     | `java.lang.String`          |"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wltan"
        },
        "content": "| `Amount`    | `java.math.BigDecimal`      |"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wltan"
        },
        "content": "| `Date`      | `java.time.LocalDate`       |"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wltan"
        },
        "content": "| `Category`  | `java.lang.String`          |"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The underlying Java data types allow more operations to be done on `Transaction` objects, such as filtering `Transaction`s by `Date`, or aggregating the `Amount`s of `Expense`s and `Income`s."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wltan"
        },
        "content": "**Note:** All data fields take in a `String` in their constructor, regardless of the underlying Java data type."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wltan"
        },
        "content": "Within the constructor, data validation takes place to ensure that the `String` correctly represents a valid data field."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wltan"
        },
        "content": "If the `String` given is not valid, an `IllegalArgumentException` will be thrown."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wltan"
        },
        "content": "Otherwise, the `String` is parsed into the underlying Java data type.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wltan"
        },
        "content": "The reason for this is that when a data field object needs to be created, it is generally from a `String`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wltan"
        },
        "content": "(such as when a user command parsed from the `Logic` component, or when a transaction is loaded from the `Storage` component)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wltan"
        },
        "content": "This abstraction is maintained so that the implementation of other components (`Logic` and `Storage`) is independent of"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wltan"
        },
        "content": "the underlying Java data type choices in the `Model` component."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongping827"
        },
        "content": "The `FinanceTracker` has a `TransactionList` field which stores all `Expense` and `Income` objects together."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongping827"
        },
        "content": "The `ModelManager` has three `FilteredList` fields which point to the same `ObservableList` obtained from `FinanceTracker::getTransactionList`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongping827"
        },
        "content": "The `Predicate` fields in the three `FilteredList` fields are set such that:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* `filteredTransactions` shows a view of all `Transaction` objects"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* `filteredExpenses` shows a view of all `Transaction` objects of type `Expense`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* `filteredIncomes` shows a view of all `Transaction` objects of type `Income`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongping827"
        },
        "content": "The motivation behind having three lists is due to the fact that there are three tabs in the user interface, each having its own list while at the same time retrieving data from the same transaction list. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W16-3/tp/blob/master/src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/Storage.java)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* can save `UserPref` objects in `JSON` format and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* can save the finance tracker data in `JSON` format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongping827"
        },
        "content": "`JsonAdaptedExpense` and `JsonAdaptedIncome` are `JSON`-friendly adaptations of `Expense` and `Income` respectively."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yongping827"
        },
        "content": "However, unlike `Expense` and `Income`, all the fields in `JsonAdaptedExpense` and `JsonAdaptedIncome` are `String` objects."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongping827"
        },
        "content": "This is so that the fields are compatible with the `JSON` format."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "`JsonSerializableFinanceTracker` contains two `List` fields, one containing all `JsonAdaptedExpense` objects and the other containing all `JsonAdaptedIncome` objects."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongping827"
        },
        "content": "Despite the similarities between `Expense` and `Income`, and despite the fact that objects of both types are put into the same list in `FinanceTracker`,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongping827"
        },
        "content": "the motivation behind keeping them separately is to ensure that they are separately listed in the `JSON` data file."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Classes used by multiple components are in the `ay2021s1_cs2103_w16_3.finesse.commons` package."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Find transactions"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The find transactions feature is implemented via `FindCommandParser`, as well as the following commands:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `FindCommand`, the base command that is returned when the command is parsed"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `FindTransactionCommand`, to be executed when the user inputs the command on the Overview tab"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `FindExpenseCommand`, to be executed when the user inputs the command on the Expenses tab"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `FindIncomeCommand`, to be executed when the user inputs the command on the Incomes tab"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "`FindCommandParser` takes in the command arguments and parses them to return a `FindCommand` containing the correct predicate for finding the transactions."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Depending on the UI tab the user inputted the command in, a `FindXXXCommand` (`FindTransactionCommand`, `FindExpenseCommand` or `FindIncomeCommand`) will be created from the base `FindCommand`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "When executed, the `FindXXXCommand` will set the predicate of the respective `FilteredList` in `ModelManager` so that only the transactions matching the keywords will be displayed in the list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Below is the Sequence Diagram for interactions within the `Logic` and `Model` components when the user inputs the `\"find tea\"` command while on the Overview tab."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "![Interactions Inside the Logic Component for the `find tea` Command on the Overview tab](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Alternatives considered:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Having separate command parsers for each tab in which the find command can be input, e.g. `FindTransactionCommandParser`, `FindExpenseCommandParser` and `FindIncomeCommandParser`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Programmatically switch selected tab"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Several of the expense/income-specific commands update the list of transactions displayed in a particular tab."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Examples of these include the `add-expense` and `add-income` commands."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "As such, on the execution of such commands, the UI has to switch to the affected tab to display the result of the command execution."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "The ability to programmatically update the selected tab is implemented via `CommandResult`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Upon the successful execution of a command, a `CommandResult` is generated and passed back to `MainWindow`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "This `CommandResult` contains the necessary information which the `MainWindow` needs to update the user interface, such as:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* The feedback to be displayed to the user;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* Whether to exit the application; and"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* Whether to programmatically switch to a different tab in the user interface."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "![Interactions inside the Logic Component when executing commands](images/CommandResultSequenceDiagram.png)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Alternatives considered:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* Add a method in `MainWindow` which can be called to programmatically switch tabs in the user interface upon execution of the command."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  This was decided against as it would result in a much tighter coupling of `Logic` and `UI` components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Set monthly spending limit"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The monthly budgeting feature is implemented via `SetExpenseLimitCommand` as well as `MonthlyExpenseLimit`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "[Coming soon]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Set monthly savings goal"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "The monthly budgeting feature is implemented via `SetSavingsGoalCommand` as well as `MonthlySavingsGoal`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "[Coming soon]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "### [Proposed] Frequent Expense Feature"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "The Frequent Expense feature consists of `add-frequent-expense`, `edit-frequent-expense`, `delete-frequent-expense`,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "`convert-frequent-expense`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Frequent expenses are expenses that the user have identified to be occurring regularly or with high frequency."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Examples of such expenses can be phone bill, music subscription or buying bubble tea on a weekly basis."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "This feature allows users to add frequent expenses to the finance tracker. The user can then choose to convert a"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "frequent expense to an expense that the user wants to add to the transaction list in the finance tracker. This is done by"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "calling `Logic#execute` which creates an  `AddFrequentExpenseCommand`. This command then calls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "`ModelManager#addFrequentExpense`, adding the specified frequent expense into the frequent expense list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "This feature also simplifies the deletion and editing of frequent expenses, and they work in a similar manner."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "#### Convert Frequent Expense To Expense Feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "The purpose of this feature is to allow users to add expenses, that they add to the transaction list in the finance"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "tracker on a frequent basis in a convenient manner. After adding a frequent expense into the frequent expense list in"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "the finance tracker, the user can call convert-frequent-expense to the respective frequent expense to make the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "conversion."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Given below is the proposed UML sequence diagram and explanation of an example usage scenario for"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "convert-frequent-expense"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "![Sequence Diagram of the Convert Frequent Expense To Expense Feature](images/ConvertFrequentExpenseSequenceDiagram.png)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "1. User enters the command `convert-frequent-expense 1 d/05/05/2020`, where `1` is the index of the respective frequent"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "expense in the frequent expense list and `d/05/05/20` is the date on which the user wants to carry out the conversion,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "to add the selected frequent expense into the expense list. This command is executed by `LogicManager`, which will then"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "call `FinanceTrackerParser#parseCommand(“convert-frequent-expense 1 d/05/05/2020”)`. This will create a"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "`ConvertFrequentExpenseCommand` object and return it to the `LogicManager`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "2. The `LogicManager` will then call `ConvertFrequentExpenseCommand#execute`, which will call"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "`Model#getFilteredFrequentExpenseList()` to retrieve the list of frequent expenses in the finance tracker."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "3. The program will then retrieve the specified frequent expense from the list of frequent expenses. It will"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "then call `FrequentExpense#convert` on the frequent expense together with the date the user has inputted and convert"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "it to an `Expense` object."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "4. After converting the `FrequentExpense` object to an `Expense` object, it will call `Model#addExpense` to add the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "`Expense` object to the expense list in the finance tracker."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Tertiary student"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Has a need to track everyday expenses/incomes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Wishes to cultivate good saving habits"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Prefers desktop apps"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "**Value proposition**: Manage finances and cultivate good financial habits (such as saving) efficiently by typing in CLI commands"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​               | I want to …​                  | So that I can…​                                                          |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| -------- | ------------------------ | -------------------------------  | --------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | new user                 | see usage instructions           | refer to instructions when I forget how to use the app                      |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | add an expense                   |                                                                             |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | add an income                    |                                                                             |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | view a list of past transactions | keep track of my past expenses/incomes                                      |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | edit a transaction               | update expenses/incomes that were entered wrongly                           |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | delete a transaction             | remove expenses/incomes that were entered wrongly                           |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | group transactions by categories | keep track of my past expenses/incomes across various categories            |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* * *`  | user                     | search for transactions          | easily find related expenses/incomes                                        |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* *`    | user                     | set a monthly spending limit     | track how much I have left to spend for the month                           |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* *`    | user                     | set a monthly saving goal        | cultivate good saving habits                                                |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "| `* *`    | user                     | view my saving trends            | better manage my future expenses                                            |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "(For all use cases below, the **System** is `Fine$$e` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "**Use case: Delete an expense**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "2.  Fine$$e shows a list of expenses"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "3.  User requests to delete a specific expense"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "4.  Fine$$e deletes the expense"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * 3a1. Fine$$e shows an error message."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yongping827"
        },
        "content": "1.  Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "2.  Should be able to hold up to 1000 expenses/incomes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yongping827"
        },
        "content": "4.  The data should be stored locally and should be in a human-editable text file."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yongping827"
        },
        "content": "5.  The data should not be stored in a Database Management System (DBMS)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yongping827"
        },
        "content": "6.  Should not require an installer."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yongping827"
        },
        "content": "7.  Should not depend on any remote server."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Expense**: A single transaction that results in a decrease in cash"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Income**: A single transaction that results in an increase in cash"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Savings**: Net gain (positive) or loss (negative) in cash over a set period of time"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yongping827"
        },
        "content": "### Deleting a transaction"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yongping827"
        },
        "content": "1. Deleting a transaction while all transactions are being shown"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yongping827"
        },
        "content": "   1. Prerequisites: List all transactions using the `list` command. Multiple transactions in the list."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yongping827"
        },
        "content": "      Expected: First transaction is deleted from the list. Details of the deleted transaction shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yongping827"
        },
        "content": "      Expected: No transaction is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 39,
      "wltan": 28,
      "zhaojj2209": 72,
      "yongping827": 29,
      "-": 226,
      "ianyong": 14
    }
  },
  {
    "path": "docs/GanttChart.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: chart"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "title: Gantt Chart"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003ciframe width\u003d\"100%\" height\u003d\"100%\" scrolling\u003d\"no\" src\u003d\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSWRaI0RizOyd4Yjczyw5PS12NU_FQCdQlKZGF53YUTF0mFkON8Hb2fwCTOybv4XLUIkU6fawsl74iR/pubhtml?gid\u003d0\u0026amp;single\u003dtrue\u0026amp;widget\u003dtrue\u0026amp;headers\u003dfalse\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/iframe\u003e"
      }
    ],
    "authorContributionMap": {
      "ianyong": 7
    }
  },
  {
    "path": "docs/Minutes.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "title: Meeting Minutes"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  {% assign sorted_minutes \u003d site.pages | sort: \"date\" | reverse %}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  {% for page in sorted_minutes %}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    {% if page.layout \u003d\u003d \"minutes\" %}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "      \u003cli\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003ca href\u003d\"{{ site.baseurl | append: page.url }}\"\u003eMinutes for {{ page.date | date: \"%-d %B %Y\" }}\u003c/a\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "      \u003c/li\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    {% endif %}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  {% endfor %}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/ul\u003e"
      }
    ],
    "authorContributionMap": {
      "ianyong": 15
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Fine\\$\\$e is a **desktop finance tracker optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Fine\\$\\$e can help you track your transactions (expenses/incomes) and cultivate good financial habits faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "1. Download the latest `finesse.jar` from [here](https://github.com/AY2021S1-CS2103T-W16-3/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "1. Copy the file to the folder you want to use as the *home folder* for Fine$$e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds, but without any sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. Type a command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will bring up the help message.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "   * `list`: Lists all transactions on the current list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "   * `add-expense t/Bubble Tea a/5 d/03/10/2020 c/Food \u0026 Beverage`: Adds an expense with the title `Bubble Tea`, amount `5`, date `03/10/2020` and category `Food \u0026 Beverage` to the finance tracker."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "   * `delete 3`: Deletes the 3rd transaction shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "   * `exit`: Exits the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "1. Refer to the [Features](#features) below for the details of each command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  e.g. in `add-expense t/TITLE`, `TITLE` is a parameter which can be used as `add t/Bubble Tea`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  e.g `t/TITLE [c/CATEGORY]` can be used as `t/Bubble Tea c/Food \u0026 Beverage` or as `t/Bubble Tea`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  e.g. `[c/CATEGORY]…​` can be used as `  ` (i.e. 0 times), `c/Food \u0026 Beverage`, `c/Food \u0026 Beverage c/Tea` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  e.g. if the command specifies `t/TITLE a/AMOUNT`, `a/AMOUNT t/TITLE` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Shows a message with instructions on how to access the user guide."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Add an expense: `add-expense` / `adde` / (on Expense tab) `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Adds an expense to the finance tracker."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Format: `add-expense t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `AMOUNT` should be a number with 0 or 2 decimal places, with an optional `$` in front."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `DATE` should be in `dd/mm/yyyy` format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `add-expense t/Bubble Tea a/5 d/03/10/2020 c/Food \u0026 Beverage`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `adde t/Taxi Home from School a/$13.50 d/10/10/2020 c/Transport c/School`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Add an income: `add-income` / `addi` / (on Income tab) `add`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Adds an income to the finance tracker."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Format: `add-income t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `AMOUNT` should be a number with 0 or 2 decimal places, with an optional `$` in front."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `DATE` should be in `dd/mm/yyyy` format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `add-income t/Internship a/560 d/03/10/2020 c/Work`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `addi t/Angpao money a/$20 d/25/01/2020 c/CNY c/Gift`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### List transactions: `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Shows a list of all transactions on the current tab."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* On Overview tab: lists all transactions (expenses/incomes)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* On Expenses tab: lists all expenses."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* On Income tab: lists all incomes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Finding transactions by keyword: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Finds transactions with titles that contain any of the given keywords on the current tab."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* On Overview tab: searches all transactions (expenses/incomes)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* On Expenses tab: searches all expenses."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* On Income tab: searches all incomes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* The search is case-insensitive. e.g `taxi` will match `Taxi`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* The order of the keywords does not matter. e.g. `Bus Train` will match `Train Bus`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Only the title is searched."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Only full words will be matched. e.g. `Snack` will not match `Snacks`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Titles matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  e.g. `Tea Coffee` will return `Bubble Tea`, `Starbucks Coffee`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `find milk` returns `strawberry milk` and `Chocolate Milk`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* `find tea coffee` returns `Bubble Tea` and `Starbucks Coffee`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Edit a transaction: `edit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Edits an existing transaction in the finance tracker."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Format: `edit INDEX [t/TITLE] [a/AMOUNT] [d/DATE] [c/CATEGORY]…​`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Edits the transaction at the specified `INDEX` on the current list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  The index refers to the index number shown on the current displayed list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * On Overview tab: edits the transaction at the specified `INDEX` on the current transaction list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * On Expenses tab: edits the expense at the specified `INDEX` on the current expenses list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * On Income tab: edits the income at the specified `INDEX` on the current incomes list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* When editing category, the existing categories for that transaction will be removed i.e adding of categories is not cumulative."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* You can remove all the transaction\u0027s categories by typing `c/` without specifying any categories after it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "*  (On Expenses tab) `list` followed by `edit 1 t/Brunch d/22/09/2020` edits the title and date of the 1st expense in the expenses list to be `Brunch` and `22/09/2020` respectively."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "*  (On Income tab) `find prize` followed by `edit 2 a/500 c/` edits the amount of the 2nd income in the resulting incomes list of the `find` command to be `500` and clears all existing categories."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Delete a transaction: `delete`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Deletes a specified transaction from the finance tracker."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Deletes a specified transaction at the specified `INDEX` on the current list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  The index refers to the index number shown on the current displayed list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * On Overview tab: deletes the transaction at the specified `INDEX` on the current transaction list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * On Expenses tab: deletes the expense at the specified `INDEX` on the current expenses list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    * On Income tab: deletes the income at the specified `INDEX` on the current incomes list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* (On Expenses tab) `list` followed by `delete 3` deletes the 3rd expense in the expenses list from the finance tracker."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* (On Income tab) `find allowance` followed by `delete 2` deletes the 2nd income in the resulting incomes list of the `find` command from the finance tracker."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Switch tab: `tab`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Switches the current tab on the finance tracker."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* Switches to the tab corresponding to the specified `INDEX`. The index **must be 1, 2, 3, or 4**."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    1. Switches to the Overview tab."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    1. Switches to the Expenses tab."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    1. Switches to the Income tab."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    1. Switches to the Analytics tab."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Exiting the app: `exit`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Exits the app."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Fine$$e data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "**A**: Install the app on the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Fine$$e finance tracker in the home folder."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wltan"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wltan"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wltan"
        },
        "content": "------|------|--------"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Add Expense | `add-expense t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...` \u003cbr\u003e `adde t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...` \u003cbr\u003e (On Expenses tab) `add t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...` | `add-expense t/Bubble Tea a/5 d/03/10/2020 c/Food \u0026 Beverage` \u003cbr\u003e `adde t/Taxi Home from School a/$13.50 d/10/10/2020 c/Transport c/School`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Add Income | `add-income t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...` \u003cbr\u003e `addi t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...` \u003cbr\u003e (On Income tab) `add t/TITLE a/AMOUNT d/DATE [c/CATEGORY]...` | `add-income t/Internship a/560 d/03/10/2020 c/Work` \u003cbr\u003e `addi t/Angpao money a/$20 d/10/10/2020 c/CNY c/Gift`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "List | `list`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Find | `find KEYWORD [MORE_KEYWORDS]` | `find milk` \u003cbr\u003e `find tea coffee`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Edit | `edit INDEX [t/TITLE] [a/AMOUNT] [d/DATE] [c/CATEGORY]…​`| `edit 1 t/Brunch d/22/09/2020` \u003cbr\u003e `edit 2 a/500 c/`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Delete | `delete INDEX` | `delete 1`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Tab | `tab INDEX` | `tab 2`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wltan"
        },
        "content": "Help | `help`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wltan"
        },
        "content": "Exit | `exit`"
      }
    ],
    "authorContributionMap": {
      "wltan": 8,
      "zhaojj2209": 93,
      "-": 96
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "title: Fine$$e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "**Fine$$e is a desktop app for managing finances, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Fine\\$\\$e can track and help you cultivate good financial habits faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* If you are interested in using Fine$$e, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* If you are interested in developing Fine$$e, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 6,
      "-": 13
    }
  },
  {
    "path": "docs/minutes/20200829.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "date: 2020-08-29"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Product Name"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "FINe$$e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Target user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Young adults aged 18-24 without a steady income who wish to better manage their finances."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Value Proposition"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Allow young adults to manage their expenditure and also have better control over their finances. Furthermore, it will promote better financial habits such as saving."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Finance tracker"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Common features:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. Expenditure \u0026 Income"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   - Recurring bills/payments: (e.g.: Phone bills, netflix and spotify subscriptions)/ Payment due (owe to friends, other form of payments)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "2. Categories"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   - User can add custom ones"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "3. Analytics"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   - Summary (by date, by categories)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   - Reports based on user’s input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   - Sankey Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "4. Budgeting (Daily, weekly, monthly, by categories?)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   - Savings goals"
      }
    ],
    "authorContributionMap": {
      "ianyong": 30
    }
  },
  {
    "path": "docs/minutes/20200905.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "date: 2020-09-05"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-1: style\u003d\"background-color: #F4CCCC;\"}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-2: style\u003d\"background-color: #FCE5CD;\"}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-3: style\u003d\"background-color: #FFF2CC;\"}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-4: style\u003d\"background-color: #D9EAD3;\"}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-5: style\u003d\"background-color: #CFE2F3;\"}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-6: style\u003d\"background-color: #D9D2E9;\"}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "{:theme-7: style\u003d\"background-color: #EAD1DC;\"}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|No.|As a/an {user type/role}|I can {function}|so that {benefit}|"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|-|-|-|-|"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I can track my everyday expenses {: theme-1}||||"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.1|User|Set a daily spending limit to a specified amount|I can track how much I have left to spend for the day|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.2|User|Set a weekly spending limit to a specified amount|I can track how much I have left to spend for the week|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.3|User|Set a monthly spending limit to a specified amount|I can track how much I have left to spend for the month|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.4|User|See how much I have remaining before the limit is reached|I can keep my expenses within that limit|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.5|User|Enter my expenditure after each payment|I can keep track of how much I have spent|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.6|User|Enter a description for each payment|I can keep track of what I spend my money on|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.7|User|Enter a category of each expenditure|I can keep track of what I spend my money on across categories|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1.8|Forgetful user|Get reminders of upcoming payments|I can make payments on time|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I can track my income {: theme-2}||||"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|2.1|User|Enter my regular income|I can track my income|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|2.2|User|Enter my ad-hoc income|I can track my income|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|2.3|User|Enter a description for my income|I can keep track of where my income was from|"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I can track my savings {: theme-3}||||"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|3.1|User|Compare my income to my expenditure|I can determine how much I have saved|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|3.2|User|Set daily saving goals|I can cultivate good saving habits|"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|3.3|User|Set weekly saving goals|I can cultivate good saving habits|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|3.4|User|Set monthly saving goals|I can cultivate good saving habits|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|3.5|User|Set specific saving goals|I can save up enough for a specific item or service|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I can analyze my saving/spending trends {: theme-4}||||"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|4.1|User|See my saving trends in the form of visual data representations|I can better plan my future expenses|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|4.2|User|See my spending trends in the form of visual data representations|I can gauge my expenses and cut down if needed|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I can input commands quickly using CLI inputs {: theme-5}||||"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|5.1|User|Autocomplete commands based on what has been typed so far|I can type commands faster|"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|5.2|User|Define shortcuts for tasks|I can save time on frequently performed tasks|"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I can control when and how my data is stored {: theme-6}||||"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|6.1|User|Export and import my data|I can transfer my data from one device to another|"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|6.2|User|Back up my data|I can recover my data in the event it gets lost|"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|Theme: As a user, I would like a sense of pride and accomplishment when working towards my saving goals {: theme-7}||||"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|7.1|User|Complete gamified savings challenges|I can feel rewarded for reaching my savings goals and encouraged to continue reaching more saving goals|"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|7.2|User|See my long-term accomplishments in the form of animated objects|I can feel a sense of satisfaction|"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|7.3|User|Be rewarded for consistently using the application|I am motivated to consistently track my expenses|"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Rejected User Stories"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|No.|As a/an {user type/role}|I can {function}|so that {benefit}|Reason for rejection|"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|-|-|-|-|-|"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|1|User|Receive a forfeit for going over expenditure limit|I can feel punished for going over my expenditure limit and discouraged from going over the limit in the future|Encourages the user to not report/ under-report expenditures, which is undesired behaviour|"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|2|User|Select valid commands from a drop-down thingy|I can input commands faster|Focus more on CLI; does not relate well to the user being a fast typist and preferring typing over other means of input|"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|3|User|Interact with the system via a chatbot interface|The application feels more personal|Too much work; does not really contribute to expense tracking|"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|4|User|Synchronisation of application data to the cloud|My data will always be backed up in the cloud|Remote server is not allowed due to project constraints|"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "|5|User|Link to bank API|My expenses and income will automatically be tracked by the application|Remote server is not allowed due to project constraints. In addition, banks do not expose such APIs for public consumption due to security concerns|"
      }
    ],
    "authorContributionMap": {
      "ianyong": 59
    }
  },
  {
    "path": "docs/minutes/20200912.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "date: 2020-09-12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Finance Tracking"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Expenses"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Adding expense: `add-expense` / `adde`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - List expense: `ls-expense` / `lse`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Delete expense: `rm-expense` / `rme`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Income"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Adding income: `add-income` / `addi`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - List income: `ls-income` / `lsi`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Delete income: `rm-income` / `rmi`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Savings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Check savings: `savings`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Exiting the program: `exit`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Viewing help: `help`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Saving the data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Actions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- CI job (Wei Liang)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Gradle stuff (Ian)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Git projects"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Create issues (all, based on UG assignment)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Create projects (Yong Ping)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Fine$$e (General)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Finance Tracking (Expenses)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Finance Tracking (Income)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Finance Tracking (Savings)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Assign issues to projects (issue creator)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Assign members to issues (discuss again)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Labels (Jingjing)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - PR status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Type"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Priority"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Upload the UG (Siddarth)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ianyong": 41
    }
  },
  {
    "path": "docs/minutes/20200919.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "date: 2020-09-19"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Roles"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Ian Yong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Team Co-Lead"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Testing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Wei Liang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Team Co-Lead"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Git/CI Expert, Integration"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Siddarth"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Scheduling and Tracking"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - User Interface In-Charge"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Jingjing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Documentation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Model/Logic In-Charge"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Yong Ping"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Code Quality"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Storage In-Charge"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### v1.1 Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Project Website"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - About Us (by Monday night)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Everyone to create PR for themselves"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Readme (by Monday night)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - UI Mockup basic (Siddarth)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- User Guide (Done)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Developer Guide (Jingjing, Yong Ping)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - User stories (Jingjing)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Glossary (Yong Ping)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Non-functional requirements (Yong Ping)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Use cases (Jingjing)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Transfer minutes to GitHub Pages (Ian)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- PIT testing (Wei Liang)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Git hooks (Ian)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Planning for v1.2 (once all of the above are completed)"
      }
    ],
    "authorContributionMap": {
      "ianyong": 40
    }
  },
  {
    "path": "docs/minutes/20200925.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "date: 2020-09-25"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "_\\*Foreword: Meetings have been shifted from Saturdays to Fridays_"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "### Tasks for v1.2 (Due: 11th October)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- Renaming (Yong Ping)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Person \u0026rarr; Transaction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Name \u0026rarr; Name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Phone \u0026rarr; Amount"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Tags \u0026rarr; Category"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Email \u0026rarr; Date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Address \u0026rarr; (deleted)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- Slowly fix tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Test data for Name/Amount/Category"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Make it look like the mock-up (Siddarth)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- Models"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Set up expenses, income, etc once transaction is up (Jingjing)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Modify AB3 to accommodate two lists (expenses and income)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- Commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Expenses (Ian)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Adding expense: `add-expense` / `adde`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - List expense: `ls-expense` / `lse`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Delete expense: `rm-expense` / `rme`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Income (Wei Liang)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Adding income: `add-income` / `addi`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - List income: `ls-income` / `lsi`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Delete income: `rm-income` / `rmi`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- To be delegated at a later date:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Savings"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    - Check savings: `savings`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Exiting the program: `exit`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Viewing help: `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - Delete unused commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- Integration"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - OTOT pull from other teammates\u0026#39; branches to test integration"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "- Documentation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - UG at the end of v1.2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  - DG at the end of v1.2"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 43
    }
  },
  {
    "path": "docs/minutes/20201002.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongping827"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "date: 2020-10-02"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "### Standards for Issues and PRs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "Issues from user stories:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Refer to user story issue in body"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Create at the start of each iteration, or at the end of each team meeting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "Issues from PRs or follow-up from other issues:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- If you see a possible enhancement or problem while fixing your issue,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - If it is dependent on your issue in some way, document it under your issue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - If it is not dependent on your issue, create a new issue. Refer to the original issue if you want."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- If you want to add extensions to the issue in the same PR:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Create a new issue"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Rationale: So that others are aware you are working on this extension and will avoid unnecessary double work"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Add a new commit for the extension"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Rationale: So it is captured in commit message when squashed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Refer to it in the PR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Definition of extension:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - An enhancement that is not required to meet the specifications of the issue, that modifies the behavior of the program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Rationale:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Behavior changes must be closely monitored to prevent regressions from slipping past reviewers"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Try to keep independent behavior changes apart from each other"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Definition of behavior:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - CLI input or outputs change"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - GUI input or outputs change"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "Changes not requiring issues:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Can be put under another PR or be a standalone PR without reference to issues"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - If put under another PR, put in a separate commit (so that it is captured in commit message when squashed)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Typos"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Formatting / style changes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Anything under 10 lines not affecting behavior"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "### Tasks for v1.2 (11th October)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "*updated*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- ~~*Renaming (Yong Ping)*~~"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - ~~*Person \u0026rarr; Transaction*~~"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - ~~*Name \u0026rarr; Name*~~"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - ~~*Phone \u0026rarr; Amount*~~"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - ~~*Tags \u0026rarr; Category*~~"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - ~~*Email \u0026rarr; Date*~~"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - ~~*Delete Address (Ian)*~~"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Slowly fix tests"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Test data for Description/Amount/Category"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- UI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Make it look like the mock-up (Siddarth)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- ~~*Models*~~"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - ~~*Set up expenses, income, etc, once transaction is up (Jingjing)*~~"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Expenses (Ian)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Adding expense: `add-expense` / `adde`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - List expense: `ls-expense` / `lse`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Delete expense: `rm-expense` / `rme`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Income (Wei Liang)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Adding income: `add-income` / `addi`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - List income: `ls-income` / `lsi`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Delete income: `rm-income` / `rmi`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- To be delegated at a later date:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Savings"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    - Check savings: `savings`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Exiting the program: `exit`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Viewing help: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - Delete unused commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - *Modify AddressBook to accommodate two lists (expenses and income)*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Integration"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - OTOT pull from other teammates\u0026#39; branches to test integration"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "- Documentation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - UG at the end of v1.2"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  - DG at the end of v1.2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "**Next meeting on Tuesday (6 Oct)**"
      }
    ],
    "authorContributionMap": {
      "yongping827": 76
    }
  },
  {
    "path": "docs/minutes/20201006.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "date: 2020-10-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Usage of Labels"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Bug\u0026nbsp;:bug:\u0026nbsp;: Unintended behaviour that needs to be addressed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Enhancement\u0026nbsp;:+1:\u0026nbsp;: Any improvements to the product"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Documentation\u0026nbsp;:roll_of_paper:\u0026nbsp;: Improvements or additions to documentation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Task\u0026nbsp;:clipboard:\u0026nbsp;: None of the above labels"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Progress Update"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Siddarth"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Working on UI styling currently"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - To put up a PR with the base UI structure as soon as possible so that integration can begin"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Wei Liang"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Fix Amount and Date validation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - To put PR by 6 Oct, target to merge by 7 Oct"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Yong Ping"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Added expense and income lists"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Currently modifying `FinanceTracker` to include expense and income lists"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Require “Fix Amount and Date validation” from Wei Liang"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Jingjing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Renamed address book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Removed duplicate checks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Ian"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Done with tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Waiting to start work on new features"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Pull Request Review SOP"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Clone PR to local machine"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Run system tests"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Perform exploratory testing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- If there are code changes, run **pitest** to make sure the code is properly covered by tests"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Compare report with master branch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Check diff on github"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Make sure there are no unintended changes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Make sure that intended changes are there"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Check for typos"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  - Check for AB3 residue (fix-as-you-go policy)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - AddressBook names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    - Javadocs (missing full stop, wrong documentation, grammar problems)"
      }
    ],
    "authorContributionMap": {
      "ianyong": 45
    }
  },
  {
    "path": "docs/minutes/20201010.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "date: 2020-10-10"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "_\\*Foreword: In lieu of CS2100 midterm assessment, the meeting was postponed to 10 October 2020._"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "### Updated Architecture"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "Issue: Need to support UI-dependent behaviour for commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "Solution: Pass the UI state to the command parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "### Actionables"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "Wei Liang:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Create {Add, Delete} × {Expense, Income} Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "  - Generic `AddCommand` that works based on the current `UiState`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "Ian:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Add UiState (Partially done)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Create {Edit, List} × {Expense, Income} Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "  - Generic `ListCommand` that works based on the current `UiState`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "Yong Ping:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Edit `ModelManager.getFilteredTransactionList`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Remove `TransactionList`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "Jingjing:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Make `Transaction` abstract"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Generic `FindCommand` that works based on the current `UiState`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "Siddarth:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Adding left side panel in the main window"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Change menu tabs to tab panel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Center categories"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "- Show expense list and income lists in the respective panels (hook logic to UI)"
      }
    ],
    "authorContributionMap": {
      "wltan": 37
    }
  },
  {
    "path": "docs/minutes/20201016.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "layout: minutes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "date: 2020-10-16"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "### v1.2 Postmortem"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "*Fine$$e is coming into shape - Ian Yong, 2020*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Our current workflow is working well and everyone is aware of our SOPs. However, we will be making minor workflow adjustments to make the process more convenient."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "#### Workflow changes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Allowed to work on upstream branches instead of forks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Individuals can stick to forks if they want."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Investigate feasibility of UI testing. If not viable, then remove it from the testing suite."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "### Actionables"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Single List Implementation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - `ModelManager`: 3 filteredLists for Transactions, Incomes and Expenses respectively, `FinanceTracker`: 1 transactionList **(Yong Ping)**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Show the differentiation between Incomes, Expenses and Transactions in the Overview Tab **(Siddarth)**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Storage **(Yong Ping)**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - 2 lists (expenses and incomes) in json data file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Add frequent expenses and incomes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Analytics **(Ian and Siddarth)**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Check if we can get a POC for using data visualisation tools with Data2Viz and then request if the library can be used **(Siddarth)**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Metrics to be displayed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        - Monthly Expenses"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        - Monthly Incomes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        - Monthly Savings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        - Category expenditure within the month (To show which category the user has spent on the most for the month)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Set monthly budget (budget \u003d\u003d expense limit) **(Jingjing)**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Budget class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Monthly saving goals **(Jingjing)**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Frequent monthly expenses and incomes **(Siddarth)**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Add a class to store frequent expenses/incomes (such frequent expenses/incomes will be in a separate list)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Add commands to add, edit, delete frequent expenses/incomes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Add a command to convert frequent expenses/incomes to actual expense/incomes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Check if json data reading validation is present **(Jingjing)**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Dates, amounts, etc must all be in the correct format **(Throw error if someone messes with the data file)**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Standardise transaction amount format **(Wei Liang)**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Change the type of data in `Transaction` from `String` to `Currency`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - (Stretch Goal) Command: \u0027$\u0027 prefix change to depend on locale"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Convert everything to $XX.XX format to read in input, then convert to numbers when calculating to analytics"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Standardise date format and add validation **(Wei Liang)**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Prevent user from adding transactions which has a date that is later than the current date of entry"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Change the type of data in `Date` from `String` to `LocalDate`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - In Analytics, make use of `YearMonth` instead of `LocalDate`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Bring up test coverage **(Ian)**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Add suppression/exclusion for areas that are not feasible to cover"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Aim to reach 100% mutation coverage (after suppressions), then set pitest to fail build when coverage drops below 100% - prevent regression in test coverage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " - Search transactions by field **(Jingjing)**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    - Edit find commands to be similar to edit commands e.g `find INDEX KEYWORD`"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 51
    }
  },
  {
    "path": "docs/team/ianyong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "title: Ian Yong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "## Project: Fine$$e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Fine$$e is a desktop finance tracker that allows tertiary students to better manage their finances, cultivating good financial habits such as saving. It is optimised for CLI users so that expenses and income can be tracked efficiently by typing in commands. It is written in Java, and has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ianyong": 31
    }
  },
  {
    "path": "docs/team/siddarth2824.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "title: Siddarth Nandanahosur Suresh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "## Project: Fine$$e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Fine$$e is a desktop finance tracker that allows tertiary students to better manage their finances, cultivating good financial habits such as saving. It is optimised for CLI users so that expenses and income can be tracked efficiently by typing in commands. It is written in Java, and has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 31
    }
  },
  {
    "path": "docs/team/wltan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "title: Tan Wei Liang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "## Project: Fine$$e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "Fine$$e is a desktop finance tracker that allows tertiary students to better manage their finances, cultivating good financial habits such as saving. It is optimised for CLI users so that expenses and income can be tracked efficiently by typing in commands. It is written in Java, and has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wltan": 31
    }
  },
  {
    "path": "docs/team/yongping827.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongping827"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "title: Yong Ping\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "## Project: Fine$$e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "Fine$$e is a desktop finance tracker that allows tertiary students to better manage their finances, cultivating good financial habits such as saving. It is optimised for CLI users so that expenses and income can be tracked efficiently by typing in commands. It is written in Java, and has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yongping827": 31
    }
  },
  {
    "path": "docs/team/zhaojj2209.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "title: Zhao Jingjing\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "## Project: Fine$$e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Fine$$e is a desktop finance tracker that allows tertiary students to better manage their finances, cultivating good financial habits such as saving. It is optimised for CLI users so that expenses and income can be tracked efficiently by typing in commands. It is written in Java, and has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 31
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.FinanceTrackerStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected UiState uiState;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Fine$$e ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTrackerStorage financeTrackerStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                new JsonFinanceTrackerStorage(userPrefs.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        uiState \u003d new UiState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ui \u003d new UiManager(logic, uiState);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s finance tracker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * The data from the sample finance tracker will be used instead if {@code storage}\u0027s finance tracker is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * or an empty finance tracker will be used instead if errors occur when reading {@code storage}\u0027s finance tracker."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Optional\u003cReadOnlyFinanceTracker\u003e financeTrackerOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        ReadOnlyFinanceTracker initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            financeTrackerOptional \u003d storage.readFinanceTracker();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            if (!financeTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FinanceTracker\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            initialData \u003d financeTrackerOptional.orElseGet(SampleDataUtil::getSampleFinanceTracker);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        logger.info(\"Starting Fine$$e \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Fine$$e ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 44,
      "-": 139,
      "ianyong": 5
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 815.0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1240.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "zhaojj2209": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private static final String LOG_FILE \u003d \"fine$$e.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB_FORMAT \u003d \"\u0027%s\u0027 command can only be used in the following tabs: %s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \"The transaction index provided is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \"The frequent expense index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \"The expense index provided is invalid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_INVALID_INCOME_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \"The income index provided is invalid.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_INCOMES_LISTED_OVERVIEW \u003d \"%1$d incomes listed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "wltan": 1,
      "zhaojj2209": 1,
      "yongping827": 2,
      "-": 10,
      "ianyong": 7
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param uiState The current state of the UI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return The result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    CommandResult execute(String commandText, UiState uiState) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns the FinanceTracker."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @see ay2021s1_cs2103_w16_3.finesse.model.Model#getFinanceTracker()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    ReadOnlyFinanceTracker getFinanceTracker();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of incomes. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cIncome\u003e getFilteredIncomeList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of frequent expenses. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4,
      "zhaojj2209": 12,
      "yongping827": 11,
      "-": 33,
      "ianyong": 5
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.FinanceTrackerParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private final FinanceTrackerParser financeTrackerParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTrackerParser \u003d new FinanceTrackerParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(String commandText, UiState uiState) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Command command \u003d financeTrackerParser.parseCommand(commandText, uiState);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            storage.saveFinanceTracker(model.getFinanceTracker());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return model.getFinanceTracker();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return model.getFilteredFrequentExpenseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return model.getFilteredIncomeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return model.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 6,
      "zhaojj2209": 19,
      "yongping827": 14,
      "-": 58,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/AddExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Adds an expense to the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-expense\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"adde\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the finance tracker. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_TITLE + \"Bubble Tea \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_AMOUNT + \"5 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_DATE + \"03/10/2020 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \u0026 Beverage\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "yongping827": 2,
      "ianyong": 55
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/AddIncomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Adds an income to the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class AddIncomeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-income\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"addi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an income to the finance tracker. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_TITLE + \"Internship \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + PREFIX_AMOUNT + \"560 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + PREFIX_DATE + \"03/10/2020 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + PREFIX_CATEGORY + \"Work\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New income added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final Income toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Creates an AddIncomeCommand to add the specified {@code Income}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public AddIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "        requireNonNull(income);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "        toAdd \u003d income;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.addIncome(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "                || (other instanceof AddIncomeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddIncomeCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 52,
      "zhaojj2209": 1,
      "yongping827": 2,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Clears the finance tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance tracker has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model.setFinanceTracker(new FinanceTracker());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** An optional {@code Tab} to switch to */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Optional\u003cTab\u003e tabToSwitchTo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param feedbackToUser The feedback to be displayed to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param showHelp Whether the help dialog should be shown to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param exit Whether the application should exit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param tabToSwitchTo The tab the UI should switch to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Tab tabToSwitchTo) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.tabToSwitchTo \u003d Optional.ofNullable(tabToSwitchTo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code showHelp},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code exit}, and other fields set to their default value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param feedbackToUser The feedback to be displayed to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param showHelp Whether the help dialog should be shown to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param exit Whether the application should exit."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this(feedbackToUser, showHelp, exit, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code tabToSwitchTo},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param feedbackToUser The feedback to be displayed to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param tabToSwitchTo The tab the UI should switch to."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult(String feedbackToUser, Tab tabToSwitchTo) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this(feedbackToUser, false, false, tabToSwitchTo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param feedbackToUser The feedback to be displayed to the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Optional\u003cTab\u003e getTabToSwitchTo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return tabToSwitchTo;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 tabToSwitchTo.equals(otherCommandResult.tabToSwitchTo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, tabToSwitchTo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 67,
      "ianyong": 45
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Deletes a transaction identified using its displayed index from the finance tracker"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": " * depending on the tab the user is on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Base class for DeleteExpenseCommand and DeleteIncomeCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"the displayed transaction list on the current tab.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"When on Income tab: Deletes from the currently displayed income list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"When on Expenses tab: Deletes from the currently displayed expenses list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "    protected Index getTargetIndex() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 12,
      "zhaojj2209": 5,
      "yongping827": 5,
      "-": 39,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/DeleteExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Deletes an expense identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class DeleteExpenseCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public DeleteExpenseCommand(DeleteCommand superCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(superCommand.getTargetIndex());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.deleteTransaction(expenseToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "                || (other instanceof DeleteExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "                \u0026\u0026 getTargetIndex().equals(((DeleteExpenseCommand) other).getTargetIndex())); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 38,
      "yongping827": 1,
      "ianyong": 4
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/DeleteIncomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_INCOME_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Deletes an income identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class DeleteIncomeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_DELETE_INCOME_SUCCESS \u003d \"Deleted Income: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public DeleteIncomeCommand(DeleteCommand superCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(superCommand.getTargetIndex());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "        List\u003cIncome\u003e lastShownList \u003d model.getFilteredIncomeList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INCOME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Income incomeToDelete \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.deleteTransaction(incomeToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INCOME_SUCCESS, incomeToDelete));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "                || (other instanceof DeleteIncomeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "                \u0026\u0026 getTargetIndex().equals(((DeleteIncomeCommand) other).getTargetIndex())); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 38,
      "yongping827": 1,
      "ianyong": 4
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Edits the details of an existing transaction using its displayed index from the finance tracker"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * depending on the tab the user is on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Base class for EditExpenseCommand and EditIncomeCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"by the index number used in the displayed transaction list on the current tab. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"When on Income tab: Edits from the currently displayed income list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"When on Expenses tab: Edits from the currently displayed expenses list.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_AMOUNT + \"5 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + PREFIX_DATE + \"22/09/2020\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited Transaction: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param targetIndex Index of the transaction in the filtered transaction list to edit."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param editTransactionDescriptor Details to edit the transaction with."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public EditCommand(Index targetIndex, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(editTransactionDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Index getTargetIndex() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected EditTransactionDescriptor getEditTransactionDescriptor() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return editTransactionDescriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit, editTransactionDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static Transaction createEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                                                       EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title updatedTitle \u003d editTransactionDescriptor.getTitle().orElse(transactionToEdit.getTitle());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Amount updatedAmount \u003d editTransactionDescriptor.getAmount().orElse(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Date updatedDate \u003d editTransactionDescriptor.getDate().orElse(transactionToEdit.getDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editTransactionDescriptor.getCategories()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .orElse(transactionToEdit.getCategories());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (transactionToEdit instanceof Expense) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return new Expense(updatedTitle, updatedAmount, updatedDate, updatedCategories);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            assert transactionToEdit instanceof Income;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            return new Income(updatedTitle, updatedAmount, updatedDate, updatedCategories);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public EditTransactionDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongping827"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, amount, date, categories);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yongping827"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yongping827"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yongping827"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yongping827"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                    \u0026\u0026 getCategories().equals(e.getCategories());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 15,
      "yongping827": 62,
      "-": 111,
      "ianyong": 40
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Edits an expense identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EditExpenseCommand extends EditCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public EditExpenseCommand(EditCommand superCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(superCommand.getTargetIndex(), superCommand.getEditTransactionDescriptor());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, getEditTransactionDescriptor());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.setTransaction(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates and returns an {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                                               EditTransactionDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title updatedTitle \u003d editExpenseDescriptor.getTitle().orElse(expenseToEdit.getTitle());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editExpenseDescriptor.getCategories()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .orElse(expenseToEdit.getCategories());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Expense(updatedTitle, updatedAmount, updatedDate, updatedCategories);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return getTargetIndex().equals(e.getTargetIndex())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 getEditTransactionDescriptor().equals(e.getEditTransactionDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongping827": 1,
      "ianyong": 79
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditIncomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_INCOME_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Edits an income identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EditIncomeCommand extends EditCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_EDIT_INCOME_SUCCESS \u003d \"Edited Income: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public EditIncomeCommand(EditCommand superCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(superCommand.getTargetIndex(), superCommand.getEditTransactionDescriptor());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cIncome\u003e lastShownList \u003d model.getFilteredIncomeList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INCOME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income incomeToEdit \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income editedIncome \u003d createEditedIncome(incomeToEdit, getEditTransactionDescriptor());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.setTransaction(incomeToEdit, editedIncome);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model.updateFilteredIncomeList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INCOME_SUCCESS, editedIncome));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates and returns an {@code Income} with the details of {@code incomeToEdit}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * edited with {@code editIncomeDescriptor}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static Income createEditedIncome(Income incomeToEdit,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                                               EditTransactionDescriptor editIncomeDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assert incomeToEdit !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title updatedTitle \u003d editIncomeDescriptor.getTitle().orElse(incomeToEdit.getTitle());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount updatedAmount \u003d editIncomeDescriptor.getAmount().orElse(incomeToEdit.getAmount());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date updatedDate \u003d editIncomeDescriptor.getDate().orElse(incomeToEdit.getDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editIncomeDescriptor.getCategories()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .orElse(incomeToEdit.getCategories());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Income(updatedTitle, updatedAmount, updatedDate, updatedCategories);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!(other instanceof EditIncomeCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand e \u003d (EditIncomeCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return getTargetIndex().equals(e.getTargetIndex())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 getEditTransactionDescriptor().equals(e.getEditTransactionDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongping827": 1,
      "ianyong": 79
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Fine$$e as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Finds and lists all transactions in the finance tracker whose title contains any of the argument keywords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * depending on the tab the user is on."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Base class for FindExpenseCommand, FindIncomeCommand and FindTransactionCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all transactions on the current tab \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            + \"whose titles contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            + \"When on Overview tab: Searches all transactions.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            + \"When on Income tab: Searches all incomes.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            + \"When on Expenses tab: Searches all expenses.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final TitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public FindCommand(TitleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    protected TitleContainsKeywordsPredicate getPredicate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 17,
      "yongping827": 3,
      "-": 31,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Finds and lists all expenses in the finance tracker whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Used when the user is on the Expenses tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FindExpenseCommand extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FindExpenseCommand(FindCommand superCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        super(superCommand.getPredicate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model.updateFilteredExpenseList(getPredicate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                        model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                || (other instanceof FindExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                \u0026\u0026 getPredicate().equals(((FindExpenseCommand) other).getPredicate())); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 32,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindIncomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INCOMES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Finds and lists all incomes in the finance tracker whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Used when the user is on the Income tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FindIncomeCommand extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FindIncomeCommand(FindCommand superCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        super(superCommand.getPredicate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model.updateFilteredIncomeList(getPredicate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String.format(MESSAGE_INCOMES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                        model.getFilteredIncomeList().size()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                || (other instanceof FindIncomeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                \u0026\u0026 getPredicate().equals(((FindIncomeCommand) other).getPredicate())); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 32,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Finds and lists all transactions in the finance tracker whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Used when the user is on the Overview tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FindTransactionCommand extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FindTransactionCommand(FindCommand superCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        super(superCommand.getPredicate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model.updateFilteredTransactionList(getPredicate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                || (other instanceof FindTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                \u0026\u0026 getPredicate().equals(((FindTransactionCommand) other).getPredicate())); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 32,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Lists all transactions in the finance tracker to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 4,
      "yongping827": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Lists all expenses in the finance tracker to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ListExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ls-expense\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lse\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, Tab.EXPENSES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "ianyong": 24
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListIncomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Lists all income in the finance tracker to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class ListIncomeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ls-income\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lsi\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all income.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model.updateFilteredIncomeList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, Tab.INCOME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 21,
      "zhaojj2209": 2,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListTransactionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Lists all transactions in the finance tracker to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ListTransactionCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ls-overview\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lso\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, Tab.OVERVIEW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 26
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/TabCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Switches UI tabs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** The number of tabs in the UI. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final int NUM_OF_TABS \u003d 4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tab\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    // TODO: Update this"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to the specified tab by index.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer between 1 to \" + NUM_OF_TABS + \" inclusive)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_SWITCH_TABS_SUCCESS \u003d \"Switched to %1$s tab.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_TAB_DOES_NOT_EXIST \u003d \"The specified tab does not exist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** The index of the tab to switch to. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Index tabIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code TabCommand} with the specified tab index to switch to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param tabIndex The index of the tab to switch to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws CommandException If the specified tab index does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public TabCommand(Index tabIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(tabIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.tabIndex \u003d tabIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (tabIndex.getOneBased() \u003e NUM_OF_TABS) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new CommandException(TabCommand.MESSAGE_TAB_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Tab tabToSwitchTo \u003d Tab.values()[tabIndex.getZeroBased()];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String formattedSuccessMessage \u003d String.format(MESSAGE_SWITCH_TABS_SUCCESS, tabToSwitchTo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new CommandResult(formattedSuccessMessage, tabToSwitchTo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return other \u003d\u003d this // Short circuit if same object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                || (other instanceof TabCommand // instanceof handles nulls."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 tabIndex.equals(((TabCommand) other).tabIndex)); // State check."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 59
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequent/AddFrequentExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions.DuplicateFrequentExpenseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class AddFrequentExpenseCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-frequent-expense\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"addfe\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the finance tracker. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_TITLE + \"Phone Bill \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_AMOUNT + \"24 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_CATEGORY + \"Utilities\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New frequent expense added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final FrequentExpense toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates an AddFrequentExpenseCommand to add the specified {@code FrequentExpense}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public AddFrequentExpenseCommand(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(frequentExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        toAdd \u003d frequentExpense;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            model.addFrequentExpense(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (DuplicateFrequentExpenseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                || (other instanceof AddFrequentExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFrequentExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 59
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequent/ConvertFrequentExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Converts a specified frequent expense to an expense and adds it to the finance tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ConvertFrequentExpenseCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"convert-frequent-expense\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"convertfe\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Converts the specified frequent expense and adds\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \" it as an expense to the finance tracker.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"03/10/2020 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_CONVERT_FREQUENT_EXPENSE_SUCCESS \u003d \"Frequent expense has been converted \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"and successfully added to finance tracker: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param targetIndex Index of the frequent expense in the filtered frequent expense list to convert."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param convertDate Date of converting a frequent expense to an expense and adding it to the finance tracker."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ConvertFrequentExpenseCommand(Index targetIndex, Date convertDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.date \u003d convertDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cFrequentExpense\u003e lastShownList \u003d model.getFilteredFrequentExpenseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToBeConverted \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Expense newExpenseToAdd \u003d frequentExpenseToBeConverted.convert(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        model.addExpense(newExpenseToAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CONVERT_FREQUENT_EXPENSE_SUCCESS, newExpenseToAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!(other instanceof ConvertFrequentExpenseCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand otherConvertFrequentExpenseCommand \u003d (ConvertFrequentExpenseCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return targetIndex.equals(otherConvertFrequentExpenseCommand.targetIndex)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 date.equals(otherConvertFrequentExpenseCommand.date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 75
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequent/DeleteFrequentExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Deletes a frequent expense identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeleteFrequentExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-frequent-expense\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \": Deletes the frequent expense identified by the index number used in the displayed \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"frequent expense list. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_DELETE_FREQUENT_EXPENSE_SUCCESS \u003d \"Deleted Frequent Expense: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DeleteFrequentExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cFrequentExpense\u003e lastShownList \u003d model.getFilteredFrequentExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        model.deleteFrequentExpense(frequentExpenseToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FREQUENT_EXPENSE_SUCCESS, frequentExpenseToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                || (other instanceof DeleteFrequentExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFrequentExpenseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 55
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequent/EditFrequentExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_FREQUENT_EXPENSES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Edits the details of an existing frequent expense using its displayed index from the frequent expense list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * in the expense tab."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EditFrequentExpenseCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-frequent-expense\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the frequent expense identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"by the index number used in the displayed frequent expense list on the expense tab. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + PREFIX_AMOUNT + \"5 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_EDIT_FREQUENT_EXPENSE_SUCCESS \u003d \"Edited Frequent Expense: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final EditFrequentExpenseDescriptor editFrequentExpenseDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param targetIndex Index of the frequent expense in the filtered frequent expense list to edit."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param editFrequentExpenseDescriptor Details to edit the frequent expense with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseCommand(Index targetIndex, EditFrequentExpenseDescriptor editFrequentExpenseDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(editFrequentExpenseDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.editFrequentExpenseDescriptor \u003d editFrequentExpenseDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cFrequentExpense\u003e lastShownList \u003d model.getFilteredFrequentExpenseList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense editedFrequentExpense \u003d createdEditedFrequentExpense(frequentExpenseToEdit,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                editFrequentExpenseDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        model.setFrequentExpense(frequentExpenseToEdit, editedFrequentExpense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        model.updateFilteredFrequentExpenseList(PREDICATE_SHOW_ALL_FREQUENT_EXPENSES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FREQUENT_EXPENSE_SUCCESS, editedFrequentExpense));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates and returns a {@code FrequentExpense} with the details of {@code frequentExpenseToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * edited with {@code editFrequentExpenseDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static FrequentExpense createdEditedFrequentExpense(FrequentExpense frequentExpenseToEdit,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                                                       EditFrequentExpenseDescriptor editFrequentExpenseDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assert frequentExpenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Title updatedTitle \u003d editFrequentExpenseDescriptor.getTitle().orElse(frequentExpenseToEdit.getTitle());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Amount updatedAmount \u003d editFrequentExpenseDescriptor.getAmount().orElse(frequentExpenseToEdit.getAmount());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editFrequentExpenseDescriptor.getCategories()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .orElse(frequentExpenseToEdit.getCategories());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new FrequentExpense(updatedTitle, updatedAmount, updatedCategories);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!(other instanceof EditFrequentExpenseCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand otherEditFrequentExpenseCommand \u003d (EditFrequentExpenseCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return targetIndex.equals(otherEditFrequentExpenseCommand.targetIndex)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 editFrequentExpenseDescriptor.equals(otherEditFrequentExpenseCommand.editFrequentExpenseDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Stores the details to edit the frequent expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * corresponding field value of the frequent expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static class EditFrequentExpenseDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public EditFrequentExpenseDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public EditFrequentExpenseDescriptor(EditFrequentExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, amount, categories);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!(other instanceof EditFrequentExpenseDescriptor)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            EditFrequentExpenseDescriptor otherEditFrequentExpenseDescriptor \u003d (EditFrequentExpenseDescriptor) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return getTitle().equals(otherEditFrequentExpenseDescriptor.getTitle())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    \u0026\u0026 getAmount().equals(otherEditFrequentExpenseDescriptor.getAmount())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    \u0026\u0026 getCategories().equals(otherEditFrequentExpenseDescriptor.getCategories());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 192
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/AddExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new Expense(title, amount, date, categoryList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 57
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/AddIncomeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Parses input arguments and creates a new AddIncomeCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class AddIncomeCommandParser implements Parser\u003cAddIncomeCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIncomeCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * and returns an AddIncomeCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public AddIncomeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIncomeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income income \u003d new Income(title, amount, date, categoryList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return new AddIncomeCommand(income);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 51,
      "ianyong": 6
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "yongping827": 2,
      "-": 9,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            assert index.getZeroBased() \u003e\u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 1,
      "zhaojj2209": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditTransactionDescriptor editTransactionDescriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            editTransactionDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            editTransactionDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            editTransactionDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .ifPresent(editTransactionDescriptor::setCategories);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new EditCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Collection\u003cString\u003e categorySet \u003d categories.size() \u003d\u003d 1 \u0026\u0026 categories.contains(\"\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categorySet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 10,
      "yongping827": 18,
      "-": 47,
      "ianyong": 5
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/FinanceTrackerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_TAB_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteIncomeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditIncomeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindIncomeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindTransactionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListExpenseCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListIncomeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListTransactionCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.AddFrequentExpenseCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.ConvertFrequentExpenseCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.DeleteFrequentExpenseCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.AddFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.ConvertFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.DeleteFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.EditFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FinanceTrackerParser {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Command word for the generic \"add\" command which adds an expense or an income to the finance tracker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * depending on the tab the user is on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final String ADD_COMMAND_COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FinanceTrackerParser.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param userInput Full user input string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param uiState Current state of the UI."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return The command based on the user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Command parseCommand(String userInput, UiState uiState) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wltan"
        },
        "content": "        final Tab uiCurrentTab \u003d uiState.getCurrentTab();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wltan"
        },
        "content": "        logger.info(\"----------------[CURRENT TAB][\" + uiCurrentTab.toString() + \"]\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        case ADD_COMMAND_COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wltan"
        },
        "content": "            switch (uiCurrentTab) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case EXPENSES:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case INCOME:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new AddIncomeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wltan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wltan"
        },
        "content": "                throw new ParseException(commandInvalidTabMessage(commandWord,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wltan"
        },
        "content": "                        Tab.EXPENSES, Tab.INCOME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case AddExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wltan"
        },
        "content": "        case AddIncomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wltan"
        },
        "content": "        case AddIncomeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return new AddIncomeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case AddFrequentExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case AddFrequentExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new AddFrequentExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            final EditCommand baseEditCommand \u003d new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wltan"
        },
        "content": "            switch (uiCurrentTab) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case EXPENSES:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                return new EditExpenseCommand(baseEditCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case INCOME:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                return new EditIncomeCommand(baseEditCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new ParseException(commandInvalidTabMessage(commandWord,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Tab.EXPENSES, Tab.INCOME));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case EditFrequentExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new EditFrequentExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            final DeleteCommand baseDeleteCommand \u003d new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wltan"
        },
        "content": "            switch (uiCurrentTab) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case EXPENSES:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new DeleteExpenseCommand(baseDeleteCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case INCOME:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new DeleteIncomeCommand(baseDeleteCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wltan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wltan"
        },
        "content": "                throw new ParseException(commandInvalidTabMessage(commandWord,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Tab.EXPENSES, Tab.INCOME));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case DeleteFrequentExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new DeleteFrequentExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case ConvertFrequentExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case ConvertFrequentExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new ConvertFrequentExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            final FindCommand baseFindCommand \u003d new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wltan"
        },
        "content": "            switch (uiCurrentTab) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            case OVERVIEW:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new FindTransactionCommand(baseFindCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            case EXPENSES:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new FindExpenseCommand(baseFindCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            case INCOME:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                return new FindIncomeCommand(baseFindCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                throw new ParseException(commandInvalidTabMessage(commandWord,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Tab.OVERVIEW, Tab.EXPENSES, Tab.INCOME));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wltan"
        },
        "content": "            switch (uiCurrentTab) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case OVERVIEW:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                return new ListTransactionCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case EXPENSES:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                return new ListExpenseCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case INCOME:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                return new ListIncomeCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new ParseException(commandInvalidTabMessage(commandWord,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Tab.OVERVIEW, Tab.EXPENSES, Tab.INCOME));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case ListTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case ListTransactionCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new ListTransactionCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case ListExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case ListExpenseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new ListExpenseCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wltan"
        },
        "content": "        case ListIncomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wltan"
        },
        "content": "        case ListIncomeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return new ListIncomeCommand();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new TabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Error message to be used when a command is not applicable to the user\u0027s current tab."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param command The command word that was used incorrectly."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param tabs The tabs that the command is applicable to."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return The error message to be displayed to the user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private String commandInvalidTabMessage(String command, Tab... tabs) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(MESSAGE_INVALID_TAB_FORMAT, command,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Stream.of(tabs).map(Tab::toString).collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 22,
      "wltan": 47,
      "zhaojj2209": 38,
      "-": 52,
      "ianyong": 51
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new FindCommand(new TitleContainsKeywordsPredicate(Arrays.asList(titleKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 4,
      "-": 26,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 7,
      "yongping827": 31,
      "-": 61,
      "ianyong": 9
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/TabCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Parses input arguments and creates a new {@code TabCommand} object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TabCommandParser implements Parser\u003cTabCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code TabCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * and returns a {@code TabCommand} object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public TabCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new TabCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 27
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequentparsers/AddFrequentExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.AddFrequentExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Parses input arguments and creates a new AddFrequentExpenseCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class AddFrequentExpenseCommandParser implements Parser\u003cAddFrequentExpenseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFrequentExpenseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * and returns an AddFrequentExpenseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public AddFrequentExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    AddFrequentExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpense \u003d new FrequentExpense(title, amount, categoryList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new AddFrequentExpenseCommand(frequentExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 58
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequentparsers/ConvertFrequentExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.ConvertFrequentExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Parser input arguments and creates a new ConvertFrequentExpenseCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ConvertFrequentExpenseCommandParser implements Parser\u003cConvertFrequentExpenseCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ConvertFrequentExpenseCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * and returns an ConvertFrequentExpenseCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ConvertFrequentExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    ConvertFrequentExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    ConvertFrequentExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    ConvertFrequentExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new ConvertFrequentExpenseCommand(index, date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 58
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequentparsers/DeleteFrequentExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.DeleteFrequentExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Parser input arguments and creates a new DeleteFrequentExpenseCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeleteFrequentExpenseCommandParser implements Parser\u003cDeleteFrequentExpenseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFrequentExpenseCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * and returns a DeleteFrequentExpenseCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DeleteFrequentExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new DeleteFrequentExpenseCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFrequentExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 29
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequentparsers/EditFrequentExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand.EditFrequentExpenseDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Parses input arguments and creates a new EditFrequentCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EditFrequentExpenseCommandParser implements Parser\u003cEditFrequentExpenseCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditFrequentExpenseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * and returns an EditFrequentExpenseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_AMOUNT, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    EditFrequentExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor editFrequentExpenseDescriptor \u003d new EditFrequentExpenseDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            editFrequentExpenseDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            editFrequentExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .ifPresent(editFrequentExpenseDescriptor::setCategories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!editFrequentExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new ParseException(EditFrequentExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new EditFrequentExpenseCommand(index, editFrequentExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Collection\u003cString\u003e categorySet \u003d categories.size() \u003d\u003d 1 \u0026\u0026 categories.contains(\"\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categorySet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 80
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/FinanceTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Wraps all data at the finance tracker level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FinanceTracker implements ReadOnlyFinanceTracker {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private final TransactionList transactions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final FrequentExpenseList frequentExpenses;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenses \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTracker() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Creates an FinanceTracker using the Transactions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTracker(ReadOnlyFinanceTracker toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.transactions.setTransactions(transactions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Replaces the contents of the transaction list with {@code frequentExpenses}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses(List\u003cFrequentExpense\u003e frequentExpenses) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.frequentExpenses.setFrequentExpenses(frequentExpenses);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Resets the existing data of this {@code FinanceTracker} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void resetData(ReadOnlyFinanceTracker newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        setFrequentExpenses(newData.getFrequentExpenseList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    //// transaction-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Adds a transaction to the finance tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactions.add(transaction);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Adds a frequent expense to the finance tracker."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void addFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenses.add(frequentExpense);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Replaces the given transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(editedTransaction);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactions.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Replaces the given frequent expense {@code target} in the list with {@code editedFrequentExpense}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code target} must exist in the frequent expense list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(editedFrequentExpense);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenses.setFrequentExpense(target, editedFrequentExpense);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * {@code key} must exist in the finance tracker."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void removeTransaction(Transaction key) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactions.remove(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code key} must exist in the finance tracker."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void removeFrequentExpense(FrequentExpense key) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenses.remove(key);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return transactions.asUnmodifiableObservableList().size() + \" transactions\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactions.forEach(t -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            if (t instanceof Expense) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                expenses.add((Expense) t);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return FXCollections.unmodifiableObservableList(expenses);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cIncome\u003e getIncomeList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ObservableList\u003cIncome\u003e incomes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactions.forEach(t -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            if (t instanceof Income) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                incomes.add((Income) t);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return FXCollections.unmodifiableObservableList(incomes);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ObservableList\u003cFrequentExpense\u003e getFrequentExpenseList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return frequentExpenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                || (other instanceof FinanceTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 transactions.equals(((FinanceTracker) other).transactions));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return transactions.hashCode();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 42,
      "zhaojj2209": 17,
      "yongping827": 43,
      "-": 73
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** {@code Predicate} that always evaluate to true. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d transaction -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** {@code Predicate} that evaluates to true if the transaction is an {@code Expense} */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d transaction -\u003e transaction instanceof Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** {@code Predicate} that evaluates to true if the transaction is an {@code Income} */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_INCOMES \u003d transaction -\u003e transaction instanceof Income;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    Predicate\u003cFrequentExpense\u003e PREDICATE_SHOW_ALL_FREQUENT_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Sets the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    void setFinanceTrackerFilePath(Path financeTrackerFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Replaces finance tracker data with the data in {@code financeTracker}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    void setFinanceTracker(ReadOnlyFinanceTracker financeTracker);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /** Returns the FinanceTracker */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    ReadOnlyFinanceTracker getFinanceTracker();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * The transaction must exist in the finance tracker."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Deletes the given frequent expense."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * The transaction must exist in the finance tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    void deleteFrequentExpense(FrequentExpense target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Adds the given income."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void addIncome(Income income);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Adds the given frequent expense."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    void addFrequentExpense(FrequentExpense frequentExpense);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code editedTransaction}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void setTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Replaces the given frequent expense {@code target} with {@code editedFrequentExpense}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** Returns an unmodifiable view of the filtered transaction list. */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list. */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /** Returns an unmodifiable view of the filtered income list. */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cIncome\u003e getFilteredIncomeList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /** Returns an unmodifiable view of the filtered frequent expense list. */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Updates the filter of the filtered income list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    void updateFilteredIncomeList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Updates the filter of the filtered frequent expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    void updateFilteredFrequentExpenseList(Predicate\u003cFrequentExpense\u003e predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 30,
      "zhaojj2209": 13,
      "yongping827": 47,
      "-": 52
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents the in-memory model of the finance tracker data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private final FinanceTracker financeTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredExpenses;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredIncomes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final FilteredList\u003cFrequentExpense\u003e filteredFrequentExpenses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Initializes a ModelManager with the given financeTracker and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public ModelManager(ReadOnlyFinanceTracker financeTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireAllNonNull(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        logger.fine(\"Initializing with finance tracker: \" + financeTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this.financeTracker \u003d new FinanceTracker(financeTracker);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.financeTracker.getTransactionList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.financeTracker.getTransactionList(), PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredIncomes \u003d new FilteredList\u003c\u003e(this.financeTracker.getTransactionList(), PREDICATE_SHOW_ALL_INCOMES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        filteredFrequentExpenses \u003d new FilteredList\u003c\u003e(this.financeTracker.getFrequentExpenseList(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                PREDICATE_SHOW_ALL_FREQUENT_EXPENSES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this(new FinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return userPrefs.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireNonNull(financeTrackerFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(financeTrackerFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setFinanceTracker(ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this.financeTracker.resetData(financeTracker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTracker.removeTransaction(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        financeTracker.addTransaction(expense);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        financeTracker.addTransaction(income);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        updateFilteredIncomeList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTracker.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Frequent Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void addFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        financeTracker.addFrequentExpense(frequentExpense);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void deleteFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        financeTracker.removeFrequentExpense(frequentExpense);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireAllNonNull(target, editedFrequentExpense);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        financeTracker.setFrequentExpense(target, editedFrequentExpense);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void updateFilteredFrequentExpenseList(Predicate\u003cFrequentExpense\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        filteredFrequentExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Transaction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Transaction} backed by the internal transaction list of"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * {@code versionedFinanceTracker}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal expense list of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * {@code versionedFinanceTracker}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ObservableList\u003cExpense\u003e newFilteredExpenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredExpenses.forEach(e -\u003e newFilteredExpenses.add((Expense) e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return FXCollections.unmodifiableObservableList(newFilteredExpenses);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Income} backed by the internal income list of"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * {@code versionedFinanceTracker}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ObservableList\u003cIncome\u003e newFilteredIncomes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredIncomes.forEach(i -\u003e newFilteredIncomes.add((Income) i));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return FXCollections.unmodifiableObservableList(newFilteredIncomes);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return filteredFrequentExpenses;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredExpenses.setPredicate(t -\u003e predicate.test(t) \u0026\u0026 PREDICATE_SHOW_ALL_EXPENSES.test(t));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void updateFilteredIncomeList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        filteredIncomes.setPredicate(t -\u003e predicate.test(t) \u0026\u0026 PREDICATE_SHOW_ALL_INCOMES.test(t));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTracker.equals(other.financeTracker)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 filteredIncomes.equals(other.filteredIncomes);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 35,
      "zhaojj2209": 27,
      "yongping827": 65,
      "-": 100,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/ReadOnlyFinanceTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Unmodifiable view of a finance tracker"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public interface ReadOnlyFinanceTracker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    ObservableList\u003cIncome\u003e getIncomeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Returns an unmodifiable view of the frequent expense list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    ObservableList\u003cFrequentExpense\u003e getFrequentExpenseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 6,
      "zhaojj2209": 4,
      "yongping827": 13,
      "-": 10
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private Path financeTrackerFilePath \u003d Paths.get(\"data\" , \"fine$$e.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        setFinanceTrackerFilePath(newUserPrefs.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireNonNull(financeTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this.financeTrackerFilePath \u003d financeTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                \u0026\u0026 financeTrackerFilePath.equals(o.financeTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return Objects.hash(guiSettings, financeTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + financeTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/category/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a Category in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \"Category names should contain at least one non-whitespace printable ASCII character.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Graph}\\\\p{Print}*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return \u0027[\u0027 + categoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "yongping827": 49,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/FrequentExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentExpense extends FrequentTransaction\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentExpense(Title title, Amount amount, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(title, amount, categories);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Expense convert(Date expenseDate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Title title \u003d getTitle();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Amount amount \u003d getAmount();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Set\u003cCategory\u003e categories \u003d getCategories();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new Expense(title, amount, expenseDate, categories);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!(other instanceof FrequentExpense)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense otherFrequentExpense \u003d (FrequentExpense) other;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return getTitle().equals(otherFrequentExpense.getTitle())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 getAmount().equals(otherFrequentExpense.getAmount())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 getCategories().equals(otherFrequentExpense.getCategories());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 41
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/FrequentExpenseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions.DuplicateFrequentExpenseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions.FrequentExpenseNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * A list of frequent expenses that does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * The removal of a transaction uses FrequentExpense#equals(Object) so as to ensure that the transaction with exactly"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentExpenseList implements Iterable\u003cFrequentExpense\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ObservableList\u003cFrequentExpense\u003e internalFrequentExpenseList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ObservableList\u003cFrequentExpense\u003e internalUnmodifiableFrequentExpenseList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalFrequentExpenseList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Adds a frequent expense to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void add(FrequentExpense toAdd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DuplicateFrequentExpenseException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        internalFrequentExpenseList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Returns true if the frequent expense list contains an equivalent frequent expense as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean contains(FrequentExpense toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return internalFrequentExpenseList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Replaces the frequent expense {@code target} in the list with {@code editedFrequentExpense}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * The frequent expense identity of {@code editedFrequentExpense} must not be the same as another existing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * frequent expense in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireAllNonNull(target, editedFrequentExpense);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int index \u003d internalFrequentExpenseList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new FrequentExpenseNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        internalFrequentExpenseList.set(index, editedFrequentExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Removes the equivalent frequent expense from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * The frequent expense must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void remove(FrequentExpense toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!(internalFrequentExpenseList.remove(toRemove))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new FrequentExpenseNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ObservableList\u003cFrequentExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return internalUnmodifiableFrequentExpenseList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Replaces the contents of this list with {@code frequentExpenses}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses(List\u003cFrequentExpense\u003e frequentExpenses) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireAllNonNull(frequentExpenses);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        internalFrequentExpenseList.setAll(frequentExpenses);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses(FrequentExpenseList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        internalFrequentExpenseList.setAll(replacement.internalFrequentExpenseList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                || (other instanceof FrequentExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 internalFrequentExpenseList.equals(((FrequentExpenseList) other).internalFrequentExpenseList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return internalFrequentExpenseList.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Iterator\u003cFrequentExpense\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return internalFrequentExpenseList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 110
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/FrequentTransaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a Frequent Transaction in the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public abstract class FrequentTransaction\u003cT extends Transaction\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    protected FrequentTransaction(Title title, Amount amount, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public abstract T convert(Date date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 51
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/exceptions/DuplicateFrequentExpenseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DuplicateFrequentExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DuplicateFrequentExpenseException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(\"Operation would result in duplicate frequent expense\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 7
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/exceptions/FrequentExpenseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Signals that the operation is unable to find the specified input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 6
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a Transaction\u0027s amount in the finance tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "            \"Amounts should only contain numbers, with an optional 2 decimal places or \u0027$\u0027 prefix\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\$?\\\\d+(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final BigDecimal value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Constructs a {@code Amount}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "        value \u003d new BigDecimal(amount.replaceFirst(\"^\\\\$\", \"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assert value.compareTo(BigDecimal.ZERO) \u003e\u003d 0; // amount should be non-negative"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * A valid amount must only contain numbers, with an optional 2 decimal places or \u0027$\u0027 prefix."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Returns a String representation of this Amount that can be used to construct an identical Amount."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return A String representation of this Amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(\"$%.2f\", value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "                \u0026\u0026 (value.compareTo(((Amount) other).value)) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 14,
      "zhaojj2209": 3,
      "yongping827": 10,
      "-": 34
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a Transaction\u0027s date in the finance tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String, Clock)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format dd/mm/yyyy \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "            + \"and cannot be later than the current date\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static final DateTimeFormatter VALIDATION_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "        value \u003d LocalDate.parse(date, VALIDATION_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Uses {@link #isValidDate(String, Clock)} with the current system time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * A valid date must be in dd/mm/yyyy format representing a correct date (all parts within range),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * and additionally can only be at or before the current date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return isValidDate(test, Clock.systemDefaultZone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Returns if a given string is a valid date. Allows for a custom Clock to be used for testing purposes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * A valid date must be in dd/mm/yyyy format representing a correct date (all parts within range),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * and additionally can only be at or before the current date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static boolean isValidDate(String test, Clock currentTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "            LocalDate value \u003d LocalDate.parse(test, VALIDATION_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "            LocalDate today \u003d LocalDate.now(currentTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return value.isEqual(today) || value.isBefore(today);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Returns a String representation of this Date that can be used to construct an identical Date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return A String representation of this Date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return VALIDATION_FORMAT.format(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public int compareTo(Date date) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return value.compareTo(date.value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 36,
      "zhaojj2209": 3,
      "yongping827": 14,
      "-": 31
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class Expense extends Transaction {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Expense(Title title, Amount amount, Date date, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(title, amount, date, categories);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return otherExpense.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 otherExpense.getCategories().equals(getCategories());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 10,
      "yongping827": 21,
      "ianyong": 3
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/Income.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class Income extends Transaction {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Income(Title title, Amount amount, Date date, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(title, amount, date, categories);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns true if both incomes have the same identity and data fields."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * This defines a stronger notion of equality between two incomes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!(other instanceof Income)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Income otherIncome \u003d (Income) other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return otherIncome.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 otherIncome.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 otherIncome.getDate().equals(getDate())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 otherIncome.getCategories().equals(getCategories());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 1,
      "zhaojj2209": 10,
      "yongping827": 21,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a Transaction\u0027s title in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class Title implements Comparable\u003cTitle\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \"Titles should contain at least one non-whitespace printable ASCII character.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Graph}\\\\p{Print}*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public int compareTo(Title title) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return fullTitle.compareTo(title.fullTitle);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "yongping827": 5,
      "ianyong": 52
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "yongping827": 1,
      "-": 22,
      "ianyong": 6
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/Transaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a Transaction in the finance tracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final Comparator\u003cTransaction\u003e TRANSACTION_COMPARATOR \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            Comparator.comparing((Transaction t) -\u003e t.date).thenComparing(t -\u003e t.title);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Transaction(Title title, Amount amount, Date date, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireAllNonNull(title, amount, date, categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Objects.hash(title, amount, date, categories);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 5,
      "yongping827": 67,
      "ianyong": 8
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/TransactionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction.TRANSACTION_COMPARATOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * A list of transactions that does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * The removal of a transaction uses Transaction#equals(Object) so as to ensure that the transaction with exactly the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class TransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Adds a transaction to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        sortTransactions();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Replaces the transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * The transaction identity of {@code editedTransaction} must not be the same as another existing transaction in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        sortTransactions();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        sortTransactions();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransactions(TransactionList replacement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        sortTransactions();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        sortTransactions();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Sorts the list based on {@code TRANSACTION_COMPARATOR}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void sortTransactions() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        internalList.sort(TRANSACTION_COMPARATOR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                || (other instanceof TransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                        \u0026\u0026 internalList.equals(((TransactionList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 9,
      "yongping827": 104
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "yongping827": 5
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Contains utility methods for populating {@code FinanceTracker} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SampleDataUtil.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Transaction[] getSampleTransactions() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Transaction[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Expense(new Title(\"Bubble Tea\"), new Amount(\"4.80\"), new Date(\"14/10/2020\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                getCategoriesSet(\"Food \u0026 Beverage\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Expense(new Title(\"Tuition Fees\"), new Amount(\"4221\"), new Date(\"22/09/2020\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                getCategoriesSet(\"NUS\", \"GIRO\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Expense(new Title(\"Artificial Intelligence: A Modern Approach\"), new Amount(\"139\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new Date(\"15/08/2020\"), getCategoriesSet(\"Textbook\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Income(new Title(\"Internship\"), new Amount(\"560\"), new Date(\"04/08/2020\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                getCategoriesSet(\"Work\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Income(new Title(\"Teaching Assistant\"), new Amount(\"1920\"), new Date(\"18/10/2020\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                getCategoriesSet(\"CS1101S\", \"CS2103T\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Income(new Title(\"Start-up Funding\"), new Amount(\"10000\"), new Date(\"01/10/2020\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                getCategoriesSet(\"NUS Enterprise\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static ReadOnlyFinanceTracker getSampleFinanceTracker() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        logger.info(\"Populating Fine$$e with sample data...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker sampleAb \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        for (Transaction sampleTransaction : getSampleTransactions()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            sampleAb.addTransaction(sampleTransaction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Set\u003cCategory\u003e getCategoriesSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 10,
      "yongping827": 7,
      "-": 23,
      "ianyong": 20
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/FinanceTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a storage for {@link FinanceTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public interface FinanceTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns FinanceTracker data as a {@link ReadOnlyFinanceTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @see #getFinanceTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Saves the given {@link ReadOnlyFinanceTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @param financeTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @see #saveFinanceTracker(ReadOnlyFinanceTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 46
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonAdaptedCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Converts a given {@code Category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "yongping827": 45
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonAdaptedExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongping827"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * JSON-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given transaction details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"title\") String title, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                                  @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                                  @JsonProperty(\"categories\") List\u003cJsonAdaptedCategory\u003e categories) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (categories !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            this.categories.addAll(categories);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        categories.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final List\u003cCategory\u003e transactionCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        for (JsonAdaptedCategory category : categories) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            transactionCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(transactionCategories);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Expense(modelTitle, modelAmount, modelDate, modelCategories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 2,
      "yongping827": 95
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonAdaptedFrequentExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * JSON-friendly version of {@link FrequentExpense}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class JsonAdaptedFrequentExpense {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FrequentExpense\u0027s %s is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Constructs a {@code JsonAdaptedFrequentExpense} with the given frequent expense details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public JsonAdaptedFrequentExpense(@JsonProperty(\"title\") String title, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                              @JsonProperty(\"categories\") List\u003cJsonAdaptedCategory\u003e categories) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (categories !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.categories.addAll(categories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public JsonAdaptedFrequentExpense(FrequentExpense source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code FrequentExpense} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted frequent expense."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentExpense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final List\u003cCategory\u003e transactionCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (JsonAdaptedCategory category : categories) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(transactionCategories);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new FrequentExpense(modelTitle, modelAmount, modelCategories);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 82
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonAdaptedIncome.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongping827"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * JSON-friendly version of {@link Income}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "class JsonAdaptedIncome {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Income\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Constructs a {@code JsonAdaptedIncome} with the given transaction details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonAdaptedIncome(@JsonProperty(\"title\") String title, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                                  @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                                  @JsonProperty(\"categories\") List\u003cJsonAdaptedCategory\u003e categories) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (categories !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            this.categories.addAll(categories);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Converts a given {@code Income} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonAdaptedIncome(Income source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        categories.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Converts this Jackson-friendly adapted transaction object into the model\u0027s {@code Income} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public Income toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final List\u003cCategory\u003e transactionCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        for (JsonAdaptedCategory category : categories) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            transactionCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(transactionCategories);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return new Income(modelTitle, modelAmount, modelDate, modelCategories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 2,
      "yongping827": 95
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonFinanceTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * A class to access FinanceTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class JsonFinanceTrackerStorage implements FinanceTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFinanceTrackerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public JsonFinanceTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return readFinanceTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Similar to {@link #readFinanceTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Optional\u003cJsonSerializableFinanceTracker\u003e jsonFinanceTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                filePath, JsonSerializableFinanceTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        if (!jsonFinanceTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            return Optional.of(jsonFinanceTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        saveFinanceTracker(financeTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Similar to {@link #saveFinanceTracker(ReadOnlyFinanceTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        requireNonNull(financeTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFinanceTracker(financeTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 26,
      "-": 54
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonSerializableFinanceTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * An Immutable FinanceTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "@JsonRootName(value \u003d \"fine$$e\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "class JsonSerializableFinanceTracker {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final List\u003cJsonAdaptedIncome\u003e incomes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final List\u003cJsonAdaptedFrequentExpense\u003e frequentExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Constructs a {@code JsonSerializableFinanceTracker} with the given transactions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public JsonSerializableFinanceTracker(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                                          @JsonProperty(\"incomes\") List\u003cJsonAdaptedIncome\u003e incomes,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                                          @JsonProperty(\"frequentExpenses\") List\u003cJsonAdaptedFrequentExpense\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                                                      frequentExpenses) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.incomes.addAll(incomes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.frequentExpenses.addAll(frequentExpenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Converts a given {@code ReadOnlyFinanceTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFinanceTracker}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public JsonSerializableFinanceTracker(ReadOnlyFinanceTracker source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        incomes.addAll(source.getIncomeList().stream().map(JsonAdaptedIncome::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenses.addAll(source.getFrequentExpenseList().stream().map(JsonAdaptedFrequentExpense::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Converts this finance tracker into the model\u0027s {@code FinanceTracker} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            financeTracker.addTransaction(expense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        for (JsonAdaptedIncome jsonAdaptedIncome : incomes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            Income income \u003d jsonAdaptedIncome.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            financeTracker.addTransaction(income);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (JsonAdaptedFrequentExpense jsonAdaptedFrequentExpense : frequentExpenses) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            FrequentExpense frequentExpense \u003d jsonAdaptedFrequentExpense.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            financeTracker.addFrequentExpense(frequentExpense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 12,
      "zhaojj2209": 15,
      "yongping827": 19,
      "-": 31
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public interface Storage extends FinanceTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Manages storage of FinanceTracker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private FinanceTrackerStorage financeTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code FinanceTrackerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public StorageManager(FinanceTrackerStorage financeTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this.financeTrackerStorage \u003d financeTrackerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTrackerStorage.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return readFinanceTracker(financeTrackerStorage.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTrackerStorage.readFinanceTracker(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        saveFinanceTracker(financeTracker, financeTrackerStorage.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTrackerStorage.saveFinanceTracker(financeTracker, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 23,
      "-": 57
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * Represents a storage for {@link ay2021s1_cs2103_w16_3.finesse.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Saves the given {@link ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.beans.binding.BooleanBinding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private HBox commandBoxContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label commandBoxLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Button commandBoxButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        commandBoxContainer.setSpacing(10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        BooleanBinding isUserInputEmpty \u003d new BooleanBinding() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                super.bind(commandTextField.textProperty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            protected boolean computeValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return commandTextField.getText().isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        commandBoxButton.disableProperty().bind(isUserInputEmpty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String userInput \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            commandExecutor.execute(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "         * @see ay2021s1_cs2103_w16_3.finesse.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 26,
      "zhaojj2209": 5,
      "-": 74
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.expense.ExpensePanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.frequent.FrequentExpensePanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.income.IncomePanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.SelectionModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to Fine$$e - your personal finance tracker.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"\\nPlease enter the command \\\"help\\\" to view the user guide on the various commands you can use.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w16-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL + \".\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"\\nPlease copy the url and paste it in your favourite browser to view all valid commands.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final UiState uiState;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private FrequentExpensePanel frequentExpensePanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private IncomePanel incomePanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ExpensePanel expensePanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private SavingsGoalPanel savingsGoalPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Button commandBoxButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private StackPane savingsGoalPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label panelLabel;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label rightPanelLabel;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Tab menuHelpTab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Tab menuOverviewTab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Tab menuIncomeTab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Tab menuExpenseTab;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Tab menuAnalyticsTab;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage}, {@code Logic} and {@code UiState}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, UiState uiState) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.uiState \u003d uiState;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void disableStageResizing() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        incomePanel \u003d new IncomePanel(logic.getFilteredIncomeList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(incomePanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expensePanel \u003d new ExpensePanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(expensePanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpensePanel \u003d new FrequentExpensePanel(logic.getFilteredFrequentExpenseList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        savingsGoalPlaceholder.getChildren().add(frequentExpensePanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        savingsGoalPanel \u003d new SavingsGoalPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        savingsGoalPlaceholder.getChildren().add(savingsGoalPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        resultDisplay.setFeedbackToUser(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        SelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        selectionModel.select(menuOverviewTab);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        onOverview();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Sets up all the action handlers for the tabs on the tab pane."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setActionHandlers() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuOverviewTab.setOnSelectionChanged(event -\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            handleOverview();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuHelpTab.setOnSelectionChanged(event -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            handleTabHelp();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuIncomeTab.setOnSelectionChanged(event -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            handleIncome();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuExpenseTab.setOnSelectionChanged(event -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            handleExpense();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuAnalyticsTab.setOnSelectionChanged(event -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            handleAnalytics();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void handleTabHelp() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (menuHelpTab.isSelected()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            resultDisplay.setFeedbackToUser(HELP_MESSAGE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML void handleCommandHelp() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        resultDisplay.setFeedbackToUser(HELP_MESSAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Opens the income window."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void handleIncome() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (menuIncomeTab.isSelected()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            panelLabel.setText(\"Income\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            savingsGoalPanel \u003d new SavingsGoalPanel();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            savingsGoalPlaceholder.getChildren().add(savingsGoalPanel.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            incomePanel \u003d new IncomePanel(logic.getFilteredIncomeList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanelPlaceholder.getChildren().add(incomePanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            incomePanel.getRoot().toFront();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        onIncome();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        uiState.setCurrentTab(UiState.Tab.INCOME);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Opens the overview window."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void handleOverview() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (menuOverviewTab.isSelected()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            panelLabel.setText(\"Overview\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            rightPanelLabel.setText(\"Savings Summary\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanel.getRoot().toFront();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            savingsGoalPanel \u003d new SavingsGoalPanel();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            savingsGoalPlaceholder.getChildren().add(savingsGoalPanel.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        onOverview();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        uiState.setCurrentTab(UiState.Tab.OVERVIEW);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Opens the analytics window."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void handleAnalytics() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (menuAnalyticsTab.isSelected()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            panelLabel.setText(\"Analytics\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanel.getRoot().toFront();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        onAnalytics();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        uiState.setCurrentTab(UiState.Tab.ANALYTICS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Opens the expense window."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void handleExpense() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (menuExpenseTab.isSelected()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            panelLabel.setText(\"Expense\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            rightPanelLabel.setText(\"Frequent Expenses\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            expensePanel \u003d new ExpensePanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            transactionListPanelPlaceholder.getChildren().add(expensePanel.getRoot());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            expensePanel.getRoot().toFront();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            frequentExpensePanel \u003d new FrequentExpensePanel((logic.getFilteredFrequentExpenseList()));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            savingsGoalPlaceholder.getChildren().add(frequentExpensePanel.getRoot());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        onExpense();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        uiState.setCurrentTab(UiState.Tab.EXPENSES);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionListPanel getTransactionListPanel() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return transactionListPanel;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see ay2021s1_cs2103_w16_3.finesse.logic.Logic#execute(String, UiState)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, uiState);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                handleCommandHelp();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Optional\u003cUiState.Tab\u003e tabToSwitchTo \u003d commandResult.getTabToSwitchTo();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            tabToSwitchTo.ifPresent(this::switchTabs);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Programmatically switches UI tab based on the specified tab."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param tab The tab to switch to."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException If the tab is {@code null}."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void switchTabs(UiState.Tab tab) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(tab);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        tabPane.getSelectionModel().select(tab.getTabIndex());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Changes the text color of the overview tab to white while the rest remains grey"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void onOverview() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuOverviewTab.setStyle(\"-tab-text-color: white\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuIncomeTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuExpenseTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuAnalyticsTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuHelpTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Changes the text color of the income tab to white while the rest remains grey."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void onIncome() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuOverviewTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuIncomeTab.setStyle(\"-tab-text-color: white\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuExpenseTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuAnalyticsTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuHelpTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Changes the text color of the expense tab to white while the rest remains grey."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void onExpense() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuOverviewTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuIncomeTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuExpenseTab.setStyle(\"-tab-text-color: white\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuAnalyticsTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuHelpTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Changes the text color of the analytics tab to white while the rest remains grey."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void onAnalytics() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuOverviewTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuIncomeTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuExpenseTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuAnalyticsTab.setStyle(\"-tab-text-color: white\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        menuHelpTab.setStyle(\"-tab-text-color: #888888\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 215,
      "zhaojj2209": 8,
      "yongping827": 4,
      "-": 119,
      "ianyong": 23
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/SavingsGoalPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class SavingsGoalPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String FXML \u003d \"SavingsGoalPanel.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String header \u003d \"Monthly Savings Goal: $200.00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String content \u003d \"You are so close to reaching your \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"monthly savings goal! $100.00 more \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"to go. You got this!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Image savingsPanelPicture \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            .getResourceAsStream(\"/images/SavingsImage.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ImageView savingsPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label savingsGoalHeader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label savingsGoalContent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Constructor of SavingsGoalPanel."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public SavingsGoalPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        savingsPicture.setImage(savingsPanelPicture);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        savingsGoalHeader.setText(header);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        savingsGoalContent.setText(content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 36
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/TransactionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final double PREFERRED_CARD_HEIGHT \u003d 80.00;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private GridPane transactionDetails;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Creates a {@code TransactionCard} with the given {@code Transaction} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        cardPane.setPrefHeight(PREFERRED_CARD_HEIGHT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        title.setText(transaction.getTitle().fullTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        title.setWrapText(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "        amount.setText(transaction.getAmount().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transaction.getCategories().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .forEach(category -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    Label newCategory \u003d new Label(category.categoryName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    newCategory.setStyle(\"-fx-font-family: Eczar\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    categories.getChildren().add(newCategory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories.setRowValignment(VPos.CENTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories.setColumnHalignment(HPos.CENTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 17,
      "wltan": 1,
      "zhaojj2209": 2,
      "yongping827": 14,
      "-": 49,
      "ianyong": 2
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/TransactionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Creates a {@code TransactionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setStyle(\"-fx-background-color: #2E2E36\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 1,
      "zhaojj2209": 3,
      "yongping827": 46
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private UiState uiState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public UiManager(Logic logic, UiState uiState) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.uiState \u003d uiState;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            loadCustomFonts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, uiState);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            mainWindow.disableStageResizing();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            mainWindow.setActionHandlers();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void loadCustomFonts() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Font.loadFont(getClass().getResourceAsStream(\"/fonts/RobotoCondensed-Regular.ttf\"), 16);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Font.loadFont(getClass().getResourceAsStream(\"/fonts/Eczar-Regular.ttf\"), 16);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "zhaojj2209": 5,
      "-": 78,
      "ianyong": 11
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/UiState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Represents the state of the current UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class UiState {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Tabs present in the UI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public enum Tab {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        OVERVIEW(1),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        INCOME(2),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EXPENSES(3),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ANALYTICS(4);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /** The index of the tab in the {@code TabPane}. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        private final int tabIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Constructs a new {@code Tab} enum with the specified tab index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param tabIndex The index of the tab in the {@code TabPane}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Tab(int tabIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            this.tabIndex \u003d tabIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Returns the index of the tab in the {@code TabPane}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return The index of the tab in the {@code TabPane}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public int getTabIndex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return tabIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Returns a string representation of this {@code Tab}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return A string representation of this {@code Tab}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The current selected tab."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Tab currentTab;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates a {@code UiState} with the currently selected tab set to the \u0027Overview\u0027 tab."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public UiState() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        currentTab \u003d Tab.OVERVIEW;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates a {@code UiState} with the specified currently selected tab."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param currentTab The currently selected tab."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public UiState(Tab currentTab) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(currentTab);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.currentTab \u003d currentTab;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the currently selected tab."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return The currently selected tab."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Tab getCurrentTab() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return currentTab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Updates the currently selected tab."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param currentTab The currently selected tab."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setCurrentTab(Tab currentTab) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        requireNonNull(currentTab);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.currentTab \u003d currentTab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 90
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/expense/ExpensePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.TransactionCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ExpensePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String FXML \u003d \"ExpensePanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpensePanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates a {@code ExpensePanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public ExpensePanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setStyle(\"-fx-background-color: #2E2E36\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setGraphic(new TransactionCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 45
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/frequent/FrequentExpensePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentExpensePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String FXML \u003d \"FrequentExpensePanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FrequentExpensePanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ListView\u003cFrequentExpense\u003e frequentExpenseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates a {@code FrequentExpensePanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentExpensePanel(ObservableList\u003cFrequentExpense\u003e frequentExpensesList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.setItems(frequentExpensesList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.setCellFactory(listView -\u003e new FrequentExpenseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    class FrequentExpenseListViewCell extends ListCell\u003cFrequentExpense\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        protected void updateItem(FrequentExpense frequentExpense, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            super.updateItem(frequentExpense, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (empty || frequentExpense \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setStyle(\"-fx-background-color: #2E2E36\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                FrequentTransactionCard frequentTransactionCard \u003d new FrequentTransactionCard\u003cExpense\u003e(frequentExpense,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                        getIndex() + 1, 13);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setGraphic((Node) frequentTransactionCard.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 49
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/frequent/FrequentTransactionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentTransaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentTransactionCard\u003cT extends Transaction\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final double PREFERRED_CARD_HEIGHT \u003d 60.00;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final double PREFERRED_CARD_WIDTH \u003d 100.00;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public final FrequentTransaction\u003cT\u003e frequentTransaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private GridPane transactionDetails;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates a {@code FrequentTransactionCard} with the given {@code FrequentTransaction} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * The font size of the content is set based on the given {@code fontSize}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentTransactionCard(FrequentTransaction\u003cT\u003e frequentTransaction, int displayedIndex, int fontSize) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.frequentTransaction \u003d frequentTransaction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String fontSizeParsedToString \u003d String.valueOf(fontSize);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String categoriesFontSizeParsedToString \u003d String.valueOf(fontSize - 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        cardPane.setPrefHeight(PREFERRED_CARD_HEIGHT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        cardPane.setPrefWidth(PREFERRED_CARD_WIDTH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        id.setStyle(String.format(\"-fx-font-size: %spx\", fontSizeParsedToString));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        title.setText(frequentTransaction.getTitle().fullTitle);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        title.setStyle(String.format(\"-fx-font-size: %spx\", fontSizeParsedToString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        amount.setText(frequentTransaction.getAmount().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        amount.setStyle(String.format(\"-fx-font-size: %spx\", fontSizeParsedToString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentTransaction.getCategories().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .forEach(category -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    Label newCategory \u003d new Label(category.categoryName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    newCategory.setStyle(\"-fx-font-family: Eczar\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    newCategory.setStyle(String.format(\"-fx-font-size: %spx\", categoriesFontSizeParsedToString));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    categories.getChildren().add(newCategory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories.setColumnHalignment(HPos.CENTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories.setRowValignment(VPos.CENTER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!(other instanceof FrequentTransactionCard)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentTransactionCard\u003c?\u003e card \u003d (FrequentTransactionCard\u003c?\u003e) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u0026\u0026 frequentTransaction.equals(card.frequentTransaction);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 89
    }
  },
  {
    "path": "src/main/java/ay2021s1_cs2103_w16_3/finesse/ui/income/IncomePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui.income;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.TransactionCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class IncomePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String FXML \u003d \"IncomePanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IncomePanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ListView\u003cIncome\u003e incomeListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates a {@code IncomePanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public IncomePanel(ObservableList\u003cIncome\u003e incomeList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        incomeListView.setItems(incomeList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        incomeListView.setCellFactory(listView -\u003e new IncomeListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    class IncomeListViewCell extends ListCell\u003cIncome\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        protected void updateItem(Income income, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            super.updateItem(income, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (empty || income \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setStyle(\"-fx-background-color: #2E2E36\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                setGraphic(new TransactionCard(income, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 45
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cHBox fx:id\u003d\"commandBoxContainer\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cLabel fx:id\u003d\"commandBoxLabel\" styleClass\u003d\"command-box-label\" text\u003d\"Enter Command: \" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefWidth\u003d\"330\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "               promptText\u003d\"Enter command here...\" styleClass\u003d\"command-box\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cButton fx:id\u003d\"commandBoxButton\" styleClass\u003d\"command-box-button\" prefWidth\u003d\"100\" text\u003d\"Enter\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            onAction\u003d\"#handleCommandEntered\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 12,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/ExpensePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" styleClass\u003d\"list-view\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 8
    }
  },
  {
    "path": "src/main/resources/view/FrequentExpensePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cListView fx:id\u003d\"frequentExpenseList\" styleClass\u003d\"list-view\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 8
    }
  },
  {
    "path": "src/main/resources/view/IncomePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cListView fx:id\u003d\"incomeListView\" styleClass\u003d\"list-view\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         title\u003d\"Fine$$e\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPane\" VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"tab-pane\" tabMinHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cTab fx:id\u003d\"menuHelpTab\" text\u003d\"Help\" closable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cTab fx:id\u003d\"menuOverviewTab\" text\u003d\"Overview\" closable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cTab fx:id\u003d\"menuIncomeTab\" text\u003d\"Income\" closable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cTab fx:id\u003d\"menuExpenseTab\" text\u003d\"Expenses\" closable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cTab fx:id\u003d\"menuAnalyticsTab\" text\u003d\"Analytics\" closable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cVBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cLabel fx:id\u003d\"panelLabel\" text\u003d\"Overview\" styleClass\u003d\"panel-label\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" maxWidth\u003d\"Infinity\" minWidth\u003d\"400\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                         HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cVBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cLabel fx:id\u003d\"rightPanelLabel\" text\u003d\"Savings Summary\" styleClass\u003d\"panel-label\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cStackPane fx:id\u003d\"savingsGoalPlaceholder\" maxWidth\u003d\"Infinity\" minWidth\u003d\"100\" prefWidth\u003d\"150\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                         HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                   styleClass\u003d\"pane-with-border\" minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"15\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cHBox styleClass\u003d\"command-pane\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"SOMETIMES\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 36,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"result-container\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" text\u003d\"How may I help you today?\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SavingsGoalPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "      styleClass\u003d\"right-panel\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cInsets left\u003d\"10\" top\u003d\"10\" bottom\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" top\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cLabel fx:id\u003d\"savingsGoalHeader\" styleClass\u003d\"right-panel-content\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cLabel fx:id\u003d\"savingsGoalContent\" wrapText\u003d\"true\" styleClass\u003d\"right-panel-content\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cImageView fx:id\u003d\"savingsPicture\" fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cLabel text\u003d\"\\$100.00\" styleClass\u003d\"right-panel-content\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 28
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cVBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "      \u003cGridPane fx:id\u003d\"transactionDetails\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"30\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cHBox GridPane.columnIndex\u003d\"0\" GridPane.halignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"20\" prefWidth\u003d\"160\" halignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cFlowPane fx:id\u003d\"categories\" styleClass\u003d\"cell_categories\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20\" prefWidth\u003d\"100\" halignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "          \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 15,
      "-": 22
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "  \u003cListView fx:id\u003d\"transactionListView\" styleClass\u003d\"list-view\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final Index fifthTransactionIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertTrue(fifthTransactionIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertTrue(fifthTransactionIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertTrue(fifthTransactionIndex.equals(fifthTransactionIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(fifthTransactionIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(fifthTransactionIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(fifthTransactionIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "yongping827": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.FinanceTrackerParser.ADD_COMMAND_COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.BUBBLE_TEA_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListIncomeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.FinanceTrackerParserTest.ExpensesUiStateStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private ExpensesUiStateStub expensesUiStateStub \u003d new ExpensesUiStateStub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                new JsonFinanceTrackerStorage(temporaryFolder.resolve(\"fine$$e.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        StorageManager storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String listIncomeCommand \u003d ListIncomeCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(listIncomeCommand, ListIncomeCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        // Setup LogicManager with JsonFinanceTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                new JsonFinanceTrackerIoExceptionThrowingStub("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionFinanceTracker.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        StorageManager storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // Execute add command - adds an Expense as assertCommandFailure uses the expensesUiStateStub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        String addCommand \u003d ADD_COMMAND_COMMAND_WORD + TITLE_DESC_BUBBLE_TEA"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + AMOUNT_DESC_BUBBLE_TEA + DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expectedExpense \u003d new TransactionBuilder(BUBBLE_TEA_2).withCategories().buildExpense();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wltan"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getFinanceTracker() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Since a FinanceTracker was not specified for \u0027model\u0027,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // the FinanceTracker returned is the default FinanceTracker."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new FinanceTracker(), logic.getFinanceTracker());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getFilteredIncomeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredIncomeList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // By default, the file path is set to \u0027data/fine$$e.json\u0027 in UserPrefs."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Paths.get(\"data\" , \"fine$$e.json\"), logic.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getGuiSettings() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Since a UserPrefs was not specified for \u0027model\u0027, the GuiSettings returned is the default GuiSettings."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new GuiSettings(), logic.getGuiSettings());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e logic.setGuiSettings(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(800, 1200, 100, 100);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(guiSettings, logic.getGuiSettings());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wltan"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, expensesUiStateStub);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, expensesUiStateStub));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private static class JsonFinanceTrackerIoExceptionThrowingStub extends JsonFinanceTrackerStorage {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        private JsonFinanceTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 7,
      "zhaojj2209": 29,
      "yongping827": 2,
      "-": 115,
      "ianyong": 55
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/AddExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExpenseCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_transactionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense validExpense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense bubbleTea \u003d new TransactionBuilder().withTitle(\"Bubble Tea\").buildExpense();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense tuitionFees \u003d new TransactionBuilder().withTitle(\"Tuition Fees\").buildExpense();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand addBubbleTeaCommand \u003d new AddExpenseCommand(bubbleTea);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand addTuitionFeesCommand \u003d new AddExpenseCommand(tuitionFees);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(addBubbleTeaCommand.equals(addBubbleTeaCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand addBubbleTeaCommandCopy \u003d new AddExpenseCommand(bubbleTea);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(addBubbleTeaCommand.equals(addBubbleTeaCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(addBubbleTeaCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(addBubbleTeaCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(addBubbleTeaCommand.equals(addTuitionFeesCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public void setFinanceTracker(ReadOnlyFinanceTracker newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void deleteFrequentExpense(FrequentExpense target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void updateFilteredIncomeList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void updateFilteredFrequentExpenseList(Predicate\u003cFrequentExpense\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            return new FinanceTracker();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 26,
      "zhaojj2209": 8,
      "yongping827": 38,
      "ianyong": 136
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/AddIncomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class AddIncomeCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddIncomeCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void execute_transactionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ModelStubAcceptingIncomeAdded modelStub \u003d new ModelStubAcceptingIncomeAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Income validIncome \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "        CommandResult commandResult \u003d new AddIncomeCommand(validIncome).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(String.format(AddIncomeCommand.MESSAGE_SUCCESS, validIncome), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(Arrays.asList(validIncome), modelStub.incomesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income internship \u003d new TransactionBuilder().withTitle(\"Internship\").buildIncome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income teachingAssistant \u003d new TransactionBuilder().withTitle(\"Teaching Assistant\").buildIncome();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand addInternshipCommand \u003d new AddIncomeCommand(internship);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand addTeachingAssistantCommand \u003d new AddIncomeCommand(teachingAssistant);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(addInternshipCommand.equals(addInternshipCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand addInternshipCommandCopy \u003d new AddIncomeCommand(internship);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(addInternshipCommand.equals(addInternshipCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(addInternshipCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(addInternshipCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(addInternshipCommand.equals(addTeachingAssistantCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public void setFinanceTracker(ReadOnlyFinanceTracker newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void deleteFrequentExpense(FrequentExpense target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wltan"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void updateFilteredIncomeList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void updateFilteredFrequentExpenseList(Predicate\u003cFrequentExpense\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private class ModelStubAcceptingIncomeAdded extends ModelStub {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        final ArrayList\u003cIncome\u003e incomesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            requireNonNull(income);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            incomesAdded.add(income);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            return new FinanceTracker();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 26,
      "wltan": 126,
      "zhaojj2209": 8,
      "yongping827": 38,
      "ianyong": 10
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void execute_emptyFinanceTracker_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void execute_nonEmptyFinanceTracker_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        expectedModel.setFinanceTracker(new FinanceTracker());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 12,
      "-": 20
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, null)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different tabToSwitchTo value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", Tab.ANALYTICS)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different tabToSwitchTo value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, Tab.INCOME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getters_returnSameValue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String feedback \u003d \"Hello world!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean showHelp \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean exit \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Tab tabToSwitchTo \u003d Tab.ANALYTICS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(feedback, showHelp, exit, tabToSwitchTo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(feedback, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(showHelp, commandResult.isShowHelp());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(exit, commandResult.isExit());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Optional.of(tabToSwitchTo), commandResult.getTabToSwitchTo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 52,
      "ianyong": 25
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditFrequentExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_TITLE_BUBBLE_TEA \u003d \"Bubble Tea\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_TITLE_INTERNSHIP \u003d \"Internship\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_TITLE_SPOTIFY_SUBSCRIPTION \u003d \"Spotify Subscription\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_TITLE_PHONE_BILL \u003d \"Phone Bill\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_AMOUNT_BUBBLE_TEA \u003d \"$4.80\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_AMOUNT_INTERNSHIP \u003d \"$560\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_AMOUNT_SPOTIFY_SUBSCRIPTION \u003d \"9.90\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_AMOUNT_PHONE_BILL \u003d \"60\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_DATE_BUBBLE_TEA \u003d \"14/10/2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_DATE_INTERNSHIP \u003d \"06/10/2020\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_DATE_SPOTIFY_SUBSCRIPTION \u003d \"08/10/2020\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_CATEGORY_FOOD_BEVERAGE \u003d \"Food \u0026 Beverage\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String VALID_CATEGORY_WORK \u003d \"Work\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_CATEGORY_UTILITIES \u003d \"Utilities\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String VALID_CATEGORY_MISCELLANEOUS \u003d \"Miscellaneous\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String TITLE_DESC_BUBBLE_TEA \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BUBBLE_TEA;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String TITLE_DESC_INTERNSHIP \u003d \" \" + PREFIX_TITLE + VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String TITLE_DESC_PHONE_BILL \u003d \" \" + PREFIX_TITLE + VALID_TITLE_PHONE_BILL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String TITLE_DESC_SPOTIFY_SUBSCRIPTION \u003d \" \" + PREFIX_TITLE + VALID_TITLE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String AMOUNT_DESC_BUBBLE_TEA \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BUBBLE_TEA;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String AMOUNT_DESC_INTERNSHIP \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String AMOUNT_DESC_PHONE_BILL \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_PHONE_BILL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String AMOUNT_DESC_SPOTIFY_SUBSCRIPTION \u003d \" \" + PREFIX_AMOUNT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + VALID_AMOUNT_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String DATE_DESC_BUBBLE_TEA \u003d \" \" + PREFIX_DATE + VALID_DATE_BUBBLE_TEA;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String DATE_DESC_INTERNSHIP \u003d \" \" + PREFIX_DATE + VALID_DATE_INTERNSHIP;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String DATE_DESC_SPOTIFY_SUBSCRIPTION \u003d \" \" + PREFIX_DATE + VALID_DATE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String CATEGORY_DESC_FOOD_BEVERAGE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String CATEGORY_DESC_WORK \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String CATEGORY_DESC_UTILITIES \u003d \" \" + PREFIX_CATEGORY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + VALID_CATEGORY_UTILITIES;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String CATEGORY_DESC_MISCELLANEOUS \u003d \" \" + PREFIX_CATEGORY"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + VALID_CATEGORY_MISCELLANEOUS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Movie\\u2416\"; // \u0027SYN\u0027 not allowed in titles"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"911a\"; // \u0027a\u0027 not allowed in amounts"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"bobby!zijian\"; // only numbers and \u0027/\u0027 allowed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"CS2103T\\u2416\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    // \u0027SYN\u0027 not allowed in categories"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final EditCommand.EditTransactionDescriptor DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final EditCommand.EditTransactionDescriptor DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final EditFrequentExpenseCommand.EditFrequentExpenseDescriptor DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final EditFrequentExpenseCommand.EditFrequentExpenseDescriptor DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DESC_BUBBLE_TEA \u003d new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_BUBBLE_TEA)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUBBLE_TEA).withDate(VALID_DATE_BUBBLE_TEA)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_FOOD_BEVERAGE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DESC_INTERNSHIP \u003d new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withAmount(VALID_AMOUNT_INTERNSHIP).withDate(VALID_DATE_INTERNSHIP)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK, VALID_CATEGORY_FOOD_BEVERAGE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DESC_SPOTIFY_SUBSCRIPTION \u003d new EditFrequentExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).withAmount(VALID_AMOUNT_SPOTIFY_SUBSCRIPTION)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_MISCELLANEOUS).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DESC_PHONE_BILL \u003d new EditFrequentExpenseDescriptorBuilder().withTitle(VALID_TITLE_PHONE_BILL)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withAmount(VALID_AMOUNT_PHONE_BILL).withCategories(VALID_CATEGORY_UTILITIES).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * - the finance tracker, filtered transaction list, filtered frequent expense list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * and selected transaction in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker expectedFinanceTracker \u003d new FinanceTracker(actualModel.getFinanceTracker());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        List\u003cTransaction\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cFrequentExpense\u003e expectedFilteredFrequentExpenseList \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ArrayList\u003c\u003e(actualModel.getFilteredFrequentExpenseList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedFinanceTracker, actualModel.getFinanceTracker());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedFilteredFrequentExpenseList, actualModel.getFilteredFrequentExpenseList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        final String[] splitTitle \u003d transaction.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredTransactionList(t -\u003e t \u003d\u003d transaction);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        final String[] splitTitle \u003d expense.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredExpenseList(e -\u003e e \u003d\u003d expense);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the frequent expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static void showFrequentExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFrequentExpenseList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpense \u003d model.getFilteredFrequentExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final String[] splitTitle \u003d frequentExpense.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        model.updateFilteredFrequentExpenseList(e -\u003e e \u003d\u003d frequentExpense);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(1, model.getFilteredFrequentExpenseList().size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the income at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static void showIncomeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredIncomeList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income income \u003d model.getFilteredIncomeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        final String[] splitTitle \u003d income.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredIncomeList(i -\u003e i \u003d\u003d income);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(1, model.getFilteredIncomeList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 46,
      "zhaojj2209": 14,
      "yongping827": 11,
      "-": 67,
      "ianyong": 57
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showNoTransactions(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ensures that outOfBoundIndex is still within the boundaries of the finance tracker\u0027s list of transactions."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getTransactionList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different transactions -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no transactions."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void showNoTransactions(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 12,
      "zhaojj2209": 14,
      "yongping827": 9,
      "-": 68,
      "ianyong": 8
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/DeleteExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.DeleteCommandStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * {@code DeleteExpenseCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DeleteExpenseCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.deleteTransaction(expenseToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(deleteExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.deleteTransaction(expenseToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showNoExpenses(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(deleteExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ensures that outOfBoundIndex is still within the boundaries of the finance tracker\u0027s list of expenses."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub firstSuperCommand \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand firstDeleteExpenseCommand \u003d new DeleteExpenseCommand(firstSuperCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand secondSuperCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand secondDeleteExpenseCommand \u003d new DeleteExpenseCommand(secondSuperCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeleteExpenseCommand.equals(firstDeleteExpenseCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub firstSuperCommandCopy \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteExpenseCommand firstDeleteExpenseCommandCopy \u003d new DeleteExpenseCommand(firstSuperCommandCopy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeleteExpenseCommand.equals(firstDeleteExpenseCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstDeleteExpenseCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstDeleteExpenseCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different expenses -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstDeleteExpenseCommand.equals(secondDeleteExpenseCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no expenses."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void showNoExpenses(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 12,
      "yongping827": 2,
      "ianyong": 103
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/DeleteIncomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_INCOME_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showIncomeAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.DeleteCommandStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * {@code DeleteIncomeCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DeleteIncomeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Income incomeToDelete \u003d model.getFilteredIncomeList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand deleteIncomeCommand \u003d new DeleteIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIncomeCommand.MESSAGE_DELETE_INCOME_SUCCESS, incomeToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.deleteTransaction(incomeToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(deleteIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIncomeList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand deleteIncomeCommand \u003d new DeleteIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(deleteIncomeCommand, model, MESSAGE_INVALID_INCOME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showIncomeAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Income incomeToDelete \u003d model.getFilteredIncomeList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand deleteIncomeCommand \u003d new DeleteIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIncomeCommand.MESSAGE_DELETE_INCOME_SUCCESS, incomeToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.deleteTransaction(incomeToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showNoIncomes(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(deleteIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showIncomeAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ensures that outOfBoundIndex is still within the boundaries of the finance tracker\u0027s list of incomes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getIncomeList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteCommandStub superCommand \u003d new DeleteCommandStub(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand deleteIncomeCommand \u003d new DeleteIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(deleteIncomeCommand, model, MESSAGE_INVALID_INCOME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub firstSuperCommand \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand firstDeleteIncomeCommand \u003d new DeleteIncomeCommand(firstSuperCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand secondSuperCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand secondDeleteIncomeCommand \u003d new DeleteIncomeCommand(secondSuperCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeleteIncomeCommand.equals(firstDeleteIncomeCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommandStub firstSuperCommandCopy \u003d new DeleteCommandStub(INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteIncomeCommand firstDeleteIncomeCommandCopy \u003d new DeleteIncomeCommand(firstSuperCommandCopy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeleteIncomeCommand.equals(firstDeleteIncomeCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstDeleteIncomeCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstDeleteIncomeCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different incomes -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstDeleteIncomeCommand.equals(secondDeleteIncomeCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no incomes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void showNoIncomes(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model.updateFilteredIncomeList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(model.getFilteredIncomeList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 12,
      "yongping827": 3,
      "ianyong": 102
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction transactionToEdit \u003d model.getFilteredTransactionList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        TransactionBuilder editedTransactionBuilder \u003d new TransactionBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction editedTransaction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (transactionToEdit instanceof Expense) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            editedTransaction \u003d editedTransactionBuilder.buildExpense();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            assertTrue(transactionToEdit instanceof Income);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            editedTransaction \u003d editedTransactionBuilder.buildIncome();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new EditTransactionDescriptorBuilder(editedTransaction).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        TransactionBuilder editedTransactionBuilder \u003d new TransactionBuilder(lastTransaction)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction editedTransaction;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (lastTransaction instanceof Expense) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            editedTransaction \u003d editedTransactionBuilder.buildExpense();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            assertTrue(lastTransaction instanceof Income);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            editedTransaction \u003d editedTransactionBuilder.buildIncome();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTransaction, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(lastTransaction, editedTransaction);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditTransactionDescriptor());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Transaction editedTransaction \u003d model.getFilteredTransactionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction transactionInFilteredList \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        TransactionBuilder editedTransactionBuilder \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(transactionInFilteredList).withTitle(VALID_TITLE_INTERNSHIP);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Transaction editedTransaction;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (transactionInFilteredList instanceof Expense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            editedTransaction \u003d editedTransactionBuilder.buildExpense();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            assertTrue(transactionInFilteredList instanceof Income);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            editedTransaction \u003d editedTransactionBuilder.buildIncome();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(transactionInFilteredList, editedTransaction);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void execute_invalidTransactionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * but smaller than size of finance tracker"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void execute_invalidTransactionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ensures that outOfBoundIndex is still within the boundaries of the finance tracker\u0027s list of transactions."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getTransactionList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor copyDescriptor \u003d new EditTransactionDescriptor(DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_BUBBLE_TEA)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_INTERNSHIP)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 14,
      "zhaojj2209": 27,
      "yongping827": 43,
      "-": 82,
      "ianyong": 18
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.EditCommandStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * for EditExpenseCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EditExpenseCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense editedExpense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TransactionBuilder expenseInList \u003d new TransactionBuilder(lastExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withTitle(VALID_TITLE_INTERNSHIP).withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).buildExpense();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST, new EditTransactionDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenseList()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense editedExpense \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(expenseInFilteredList).withTitle(VALID_TITLE_INTERNSHIP).buildExpense();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * but smaller than size of finance tracker"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ensures that outOfBoundIndex is still within the boundaries of the finance tracker\u0027s list of expenses."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(outOfBoundIndex,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST, DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        final EditExpenseCommand standardCommand \u003d new EditExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor copyDescriptor \u003d new EditTransactionDescriptor(DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommandWithSameValues \u003d new EditCommandStub(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditExpenseCommand commandWithSameValues \u003d new EditExpenseCommand(superCommandWithSameValues);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommandStub(INDEX_SECOND, DESC_BUBBLE_TEA)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommandStub(INDEX_FIRST, DESC_INTERNSHIP)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 14,
      "yongping827": 3,
      "ianyong": 149
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditIncomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_INCOME_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showIncomeAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.EditCommandStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * for EditIncomeCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EditIncomeCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income editedIncome \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder(editedIncome).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand editIncomeCommand \u003d new EditIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncomeCommand.MESSAGE_EDIT_INCOME_SUCCESS, editedIncome);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredIncomeList().get(0), editedIncome);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Index indexLastIncome \u003d Index.fromOneBased(model.getFilteredIncomeList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income lastIncome \u003d model.getFilteredIncomeList().get(indexLastIncome.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TransactionBuilder incomeInList \u003d new TransactionBuilder(lastIncome);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income editedIncome \u003d incomeInList.withTitle(VALID_TITLE_INTERNSHIP).withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).buildIncome();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(indexLastIncome, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand editIncomeCommand \u003d new EditIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncomeCommand.MESSAGE_EDIT_INCOME_SUCCESS, editedIncome);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(lastIncome, editedIncome);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST, new EditTransactionDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand editIncomeCommand \u003d new EditIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Income editedIncome \u003d model.getFilteredIncomeList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncomeCommand.MESSAGE_EDIT_INCOME_SUCCESS, editedIncome);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showIncomeAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Income incomeInFilteredList \u003d model.getFilteredIncomeList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income editedIncome \u003d new TransactionBuilder(incomeInFilteredList)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).buildIncome();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand editIncomeCommand \u003d new EditIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncomeCommand.MESSAGE_EDIT_INCOME_SUCCESS, editedIncome);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredIncomeList().get(0), editedIncome);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(editIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIncomeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIncomeList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommandStub superCommand \u003d new EditCommandStub(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand editIncomeCommand \u003d new EditIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(editIncomeCommand, model, MESSAGE_INVALID_INCOME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * but smaller than size of finance tracker"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIncomeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showIncomeAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ensures that outOfBoundIndex is still within the boundaries of the finance tracker\u0027s list of incomes."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getIncomeList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand editIncomeCommand \u003d new EditIncomeCommand(new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new EditTransactionDescriptorBuilder().withTitle(VALID_TITLE_INTERNSHIP).build()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(editIncomeCommand, model, MESSAGE_INVALID_INCOME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final EditCommandStub superCommand \u003d new EditCommandStub(INDEX_FIRST, DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        final EditIncomeCommand standardCommand \u003d new EditIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor copyDescriptor \u003d new EditTransactionDescriptor(DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditCommandStub superCommandWithSameValues \u003d new EditCommandStub(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditIncomeCommand commandWithSameValues \u003d new EditIncomeCommand(superCommandWithSameValues);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommandStub(INDEX_SECOND, DESC_BUBBLE_TEA)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommandStub(INDEX_FIRST, DESC_INTERNSHIP)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 14,
      "yongping827": 3,
      "ianyong": 148
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/EditTransactionDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_INTERNSHIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class EditTransactionDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptorWithSameValues \u003d new EditCommand.EditTransactionDescriptor(DESC_BUBBLE_TEA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(DESC_BUBBLE_TEA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(DESC_BUBBLE_TEA.equals(DESC_BUBBLE_TEA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(DESC_INTERNSHIP));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand.EditTransactionDescriptor editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_BUBBLE_TEA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_BUBBLE_TEA).withAmount(VALID_AMOUNT_INTERNSHIP).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_BUBBLE_TEA).withDate(VALID_DATE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_BUBBLE_TEA).withCategories(VALID_CATEGORY_WORK).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(DESC_BUBBLE_TEA.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 4,
      "yongping827": 4,
      "-": 24,
      "ianyong": 22
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.AIMA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.CARLS_JR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.GST_VOUCHER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.PEN_REFILLS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TEACHING_ASSISTANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different predicates -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_zeroKeywords_noTransactionsFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void execute_multipleKeywords_multipleTransactionsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 6);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"gst carl\u0027s artificial internship pen teaching\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ordered by date, then by title."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(Arrays.asList("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(TEACHING_ASSISTANT).buildIncome(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(AIMA).buildExpense(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(CARLS_JR).buildExpense(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(GST_VOUCHER).buildIncome(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(INTERNSHIP).buildIncome(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(PEN_REFILLS).buildExpense()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 9,
      "yongping827": 8,
      "-": 52,
      "ianyong": 26
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.AIMA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.CARLS_JR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.PEN_REFILLS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.FindCommandStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindExpenseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class FindExpenseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub firstSuperCommand \u003d new FindCommandStub(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindExpenseCommand firstFindExpenseCommand \u003d new FindExpenseCommand(firstSuperCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub secondSuperCommand \u003d new FindCommandStub(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindExpenseCommand secondFindExpenseCommand \u003d new FindExpenseCommand(secondSuperCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstFindExpenseCommand.equals(firstFindExpenseCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub firstSuperCommandCopy \u003d new FindCommandStub(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindExpenseCommand firstFindExpenseCommandCopy \u003d new FindExpenseCommand(firstSuperCommandCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstFindExpenseCommand.equals(firstFindExpenseCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindExpenseCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindExpenseCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different predicates -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindExpenseCommand.equals(secondFindExpenseCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_zeroKeywords_noExpensesFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub superCommand \u003d new FindCommandStub(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindExpenseCommand findExpenseCommand \u003d new FindExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(findExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"carl\u0027s artificial pen\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub superCommand \u003d new FindCommandStub(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindExpenseCommand findExpenseCommand \u003d new FindExpenseCommand(superCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(findExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ordered by date, then by title."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Arrays.asList(AIMA, CARLS_JR, PEN_REFILLS), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 90
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindIncomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INCOMES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.GST_VOUCHER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.INTERNSHIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TEACHING_ASSISTANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.FindCommandStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindIncomeCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class FindIncomeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub firstSuperCommand \u003d new FindCommandStub(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindIncomeCommand firstFindIncomeCommand \u003d new FindIncomeCommand(firstSuperCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub secondSuperCommand \u003d new FindCommandStub(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindIncomeCommand secondFindIncomeCommand \u003d new FindIncomeCommand(secondSuperCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstFindIncomeCommand.equals(firstFindIncomeCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub firstSuperCommandCopy \u003d new FindCommandStub(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindIncomeCommand firstFindIncomeCommandCopy \u003d new FindIncomeCommand(firstSuperCommandCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstFindIncomeCommand.equals(firstFindIncomeCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindIncomeCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindIncomeCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different predicates -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindIncomeCommand.equals(secondFindIncomeCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_zeroKeywords_noIncomesFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INCOMES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub superCommand \u003d new FindCommandStub(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindIncomeCommand findIncomeCommand \u003d new FindIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredIncomeList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(findIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredIncomeList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_multipleKeywords_multipleIncomesFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INCOMES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"gst internship teaching\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub superCommand \u003d new FindCommandStub(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindIncomeCommand findIncomeCommand \u003d new FindIncomeCommand(superCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredIncomeList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(findIncomeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Ordered by date, then by title."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Arrays.asList(TEACHING_ASSISTANT, GST_VOUCHER, INTERNSHIP), model.getFilteredIncomeList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 90
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/FindTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.AIMA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.CARLS_JR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.GST_VOUCHER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.PEN_REFILLS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TEACHING_ASSISTANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs.FindCommandStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindTransactionCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class FindTransactionCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub firstSuperCommand \u003d new FindCommandStub(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindTransactionCommand firstFindTransactionCommand \u003d new FindTransactionCommand(firstSuperCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub secondSuperCommand \u003d new FindCommandStub(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindTransactionCommand secondFindTransactionCommand \u003d new FindTransactionCommand(secondSuperCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstFindTransactionCommand.equals(firstFindTransactionCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub firstSuperCommandCopy \u003d new FindCommandStub(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindTransactionCommand firstFindTransactionCommandCopy \u003d new FindTransactionCommand(firstSuperCommandCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstFindTransactionCommand.equals(firstFindTransactionCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindTransactionCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindTransactionCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different predicates -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstFindTransactionCommand.equals(secondFindTransactionCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_zeroKeywords_noTransactionsFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub superCommand \u003d new FindCommandStub(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindTransactionCommand findTransactionCommand \u003d new FindTransactionCommand(superCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(findTransactionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_multipleKeywords_multipleTransactionsFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 6);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"gst carl\u0027s artificial internship pen teaching\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommandStub superCommand \u003d new FindCommandStub(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindTransactionCommand findTransactionCommand \u003d new FindTransactionCommand(superCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(findTransactionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(Arrays.asList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(TEACHING_ASSISTANT).buildIncome(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(AIMA).buildExpense(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(CARLS_JR).buildExpense(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(GST_VOUCHER).buildIncome(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(INTERNSHIP).buildIncome(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TransactionBuilder(PEN_REFILLS).buildExpense()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        ), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongping827": 4,
      "ianyong": 96
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "zhaojj2209": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalExpenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListExpenseCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ListExpenseCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void execute_showsAllExpenses() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        expectedModel.updateFilteredExpenseList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new ListExpenseCommand(), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new CommandResult(ListExpenseCommand.MESSAGE_SUCCESS, Tab.EXPENSES), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(getTypicalExpenses().size(), model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 8,
      "ianyong": 31
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListIncomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalIncomes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListIncomeCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class ListIncomeCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void execute_showAllIncomes() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        expectedModel.updateFilteredIncomeList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new ListIncomeCommand(), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new CommandResult(ListIncomeCommand.MESSAGE_SUCCESS, Tab.INCOME), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(getTypicalIncomes().size(), model.getFilteredIncomeList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 28,
      "zhaojj2209": 8,
      "ianyong": 3
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/ListTransactionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListTransactionCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ListTransactionCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_showsAllTransactions() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new CommandResult(ListTransactionCommand.MESSAGE_SUCCESS, Tab.OVERVIEW), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(getTypicalFinanceTracker().getTransactionList().size(), model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_hasSomeIncome() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.addIncome(new TransactionBuilder().buildIncome());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredTransactionList(transaction -\u003e true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new CommandResult(ListTransactionCommand.MESSAGE_SUCCESS, Tab.OVERVIEW), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(getTypicalFinanceTracker().getTransactionList().size() + 1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_hasSomeExpense() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        model.addExpense(new TransactionBuilder().buildExpense());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel.updateFilteredTransactionList(transaction -\u003e true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new ListTransactionCommand(), model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new CommandResult(ListTransactionCommand.MESSAGE_SUCCESS, Tab.OVERVIEW), expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(getTypicalFinanceTracker().getTransactionList().size() + 1,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongping827": 7,
      "ianyong": 54
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/TabCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.TabCommand.MESSAGE_SWITCH_TABS_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TabCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_switchToOverviewTab_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String formattedSuccessMessage \u003d String.format(MESSAGE_SWITCH_TABS_SUCCESS, Tab.OVERVIEW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(formattedSuccessMessage, Tab.OVERVIEW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new TabCommand(Index.fromOneBased(1)), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_switchToIncomeTab_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String formattedSuccessMessage \u003d String.format(MESSAGE_SWITCH_TABS_SUCCESS, Tab.INCOME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(formattedSuccessMessage, Tab.INCOME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new TabCommand(Index.fromOneBased(2)), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_switchToExpensesTab_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String formattedSuccessMessage \u003d String.format(MESSAGE_SWITCH_TABS_SUCCESS, Tab.EXPENSES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(formattedSuccessMessage, Tab.EXPENSES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new TabCommand(Index.fromOneBased(3)), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_switchToAnalyticsTab_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String formattedSuccessMessage \u003d String.format(MESSAGE_SWITCH_TABS_SUCCESS, Tab.ANALYTICS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(formattedSuccessMessage, Tab.ANALYTICS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandSuccess(new TabCommand(Index.fromOneBased(4)), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertCommandFailure(new TabCommand(Index.fromOneBased(5)), model, TabCommand.MESSAGE_TAB_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 60
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequentcommands/AddFrequentExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.AddFrequentExpenseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.FrequentTransactionBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class AddFrequentExpenseCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void constructor_nullFrequentExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFrequentExpenseCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_frequentExpenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ModelStubAcceptingFrequentExpenseAdded modelStub \u003d new ModelStubAcceptingFrequentExpenseAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense validFrequentExpense \u003d new FrequentTransactionBuilder().buildFrequentExpense();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        CommandResult commandResult \u003d new AddFrequentExpenseCommand(validFrequentExpense).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(String.format(AddFrequentExpenseCommand.MESSAGE_SUCCESS, validFrequentExpense),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(Arrays.asList(validFrequentExpense), modelStub.frequentExpensesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense bubbleTea \u003d new FrequentTransactionBuilder().withTitle(\"Bubble Tea\").buildFrequentExpense();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense tuitionFees \u003d new FrequentTransactionBuilder().withTitle(\"Tuition Fees\").buildFrequentExpense();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        AddFrequentExpenseCommand addBubbleTeaCommand \u003d new AddFrequentExpenseCommand(bubbleTea);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        AddFrequentExpenseCommand addTuitionFeesCommand \u003d new AddFrequentExpenseCommand(tuitionFees);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(addBubbleTeaCommand.equals(addBubbleTeaCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        AddFrequentExpenseCommand addBubbleTeaCommandCopy \u003d new AddFrequentExpenseCommand(bubbleTea);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(addBubbleTeaCommand.equals(addBubbleTeaCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(addBubbleTeaCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(addBubbleTeaCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(addBubbleTeaCommand.equals(addTuitionFeesCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setFinanceTracker(ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void deleteFrequentExpense(FrequentExpense target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void setFrequentExpense(FrequentExpense target, FrequentExpense editedFrequentExpense) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ObservableList\u003cFrequentExpense\u003e getFilteredFrequentExpenseList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void updateFilteredIncomeList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void updateFilteredFrequentExpenseList(Predicate\u003cFrequentExpense\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * A Model stub that always accept the frequent expense being added."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private class ModelStubAcceptingFrequentExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final ArrayList\u003cFrequentExpense\u003e frequentExpensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addFrequentExpense(FrequentExpense expense) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            frequentExpensesAdded.add(expense);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new FinanceTracker();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * A Model stub that already contains one frequent expense."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private class ModelStubWithFrequentExpense extends ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final ArrayList\u003cFrequentExpense\u003e frequentExpensesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ModelStubWithFrequentExpense(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            requireNonNull(frequentExpense);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.frequentExpensesList.add(frequentExpense);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void addFrequentExpense(FrequentExpense expense) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            frequentExpensesList.add(expense);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 229
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequentcommands/ConvertFrequentExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showFrequentExpenseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.ConvertFrequentExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ConvertFrequentExpenseCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToBeConverted \u003d model.getFinanceTracker().getFrequentExpenseList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date dateOfConvertedExpense \u003d new Date(VALID_DATE_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand convertFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(INDEX_FIRST, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Expense convertedExpense \u003d frequentExpenseToBeConverted.convert(dateOfConvertedExpense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedModel.addExpense(convertedExpense);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(ConvertFrequentExpenseCommand.MESSAGE_CONVERT_FREQUENT_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                convertedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandSuccess(convertFrequentExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFrequentExpenseList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date dateOfConvertedExpense \u003d new Date(VALID_DATE_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand convertFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(outOfBoundIndex, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandFailure(convertFrequentExpenseCommand, model, MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showFrequentExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date dateOfConvertedExpense \u003d new Date(VALID_DATE_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToBeConverted \u003d model.getFilteredFrequentExpenseList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand convertFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(INDEX_FIRST, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Expense convertedExpense \u003d frequentExpenseToBeConverted.convert(dateOfConvertedExpense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedModel.addExpense(convertedExpense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(ConvertFrequentExpenseCommand.MESSAGE_CONVERT_FREQUENT_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                convertedExpense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandSuccess(convertFrequentExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showFrequentExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date dateOfConvertedExpense \u003d new Date(VALID_DATE_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of frequent expense list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getFrequentExpenseList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand convertFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(outOfBoundIndex, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandFailure(convertFrequentExpenseCommand, model, MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date dateOfConvertedExpense \u003d new Date(VALID_DATE_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand convertFirstFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(INDEX_FIRST, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand convertSecondFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(INDEX_SECOND, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(convertFirstFrequentExpenseCommand.equals(convertFirstFrequentExpenseCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand deleteFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(INDEX_FIRST, dateOfConvertedExpense);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(convertFirstFrequentExpenseCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(convertFirstFrequentExpenseCommand.equals(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(convertFirstFrequentExpenseCommand.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(convertFirstFrequentExpenseCommand.equals(convertSecondFrequentExpenseCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 120
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequentcommands/DeleteFrequentExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showFrequentExpenseAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.DeleteFrequentExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeleteFrequentExpenseCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToDelete \u003d model.getFilteredFrequentExpenseList()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new DeleteFrequentExpenseCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFrequentExpenseCommand.MESSAGE_DELETE_FREQUENT_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                frequentExpenseToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedModel.deleteFrequentExpense(frequentExpenseToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandSuccess(deleteFrequentExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFrequentExpenseList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteFrequentExpenseCommand \u003d new DeleteFrequentExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandFailure(deleteFrequentExpenseCommand, model, MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showFrequentExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseToDelete \u003d model.getFilteredFrequentExpenseList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new DeleteFrequentExpenseCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFrequentExpenseCommand.MESSAGE_DELETE_FREQUENT_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                frequentExpenseToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedModel.deleteFrequentExpense(frequentExpenseToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showNoFrequentExpenses(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandSuccess(deleteFrequentExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showFrequentExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of frequent expense list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getFrequentExpenseList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteFrequentExpenseCommand \u003d new DeleteFrequentExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandFailure(deleteFrequentExpenseCommand, model, MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteFirstCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new DeleteFrequentExpenseCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteSecondCommand \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new DeleteFrequentExpenseCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteFrequentExpenseCommand deleteFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new DeleteFrequentExpenseCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no frequent expenses."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void showNoFrequentExpenses(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        model.updateFilteredFrequentExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(model.getFilteredFrequentExpenseList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 114
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequentcommands/EditFrequentExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_MISCELLANEOUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.showFrequentExpenseAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand.EditFrequentExpenseDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditFrequentExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.FrequentTransactionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EditFrequentExpenseCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense editedFrequentExpense \u003d new FrequentTransactionBuilder().buildFrequentExpense();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseDescriptorBuilder(editedFrequentExpense).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand editFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(EditFrequentExpenseCommand.MESSAGE_EDIT_FREQUENT_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                editedFrequentExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedModel.setFrequentExpense(model.getFilteredFrequentExpenseList().get(0), editedFrequentExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandSuccess(editFrequentExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredFrequentExpenseList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense lastExpense \u003d model.getFilteredFrequentExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentTransactionBuilder expenseInList \u003d new FrequentTransactionBuilder(lastExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense editedExpense \u003d expenseInList.withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withAmount(VALID_AMOUNT_SPOTIFY_SUBSCRIPTION)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_MISCELLANEOUS).buildFrequentExpense();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor descriptor \u003d new EditFrequentExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).withAmount(VALID_AMOUNT_SPOTIFY_SUBSCRIPTION)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_MISCELLANEOUS).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand editFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(EditFrequentExpenseCommand.MESSAGE_EDIT_FREQUENT_EXPENSE_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedModel.setFrequentExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandSuccess(editFrequentExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_invalidFrequentExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFrequentExpenseList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor descriptor \u003d new EditFrequentExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand editExpenseCommand \u003d new EditFrequentExpenseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void execute_invalidFrequentExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        showFrequentExpenseAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of frequent expense list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getFrequentExpenseList().size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand editFrequentExpenseCommand \u003d new EditFrequentExpenseCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseDescriptorBuilder().withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertCommandFailure(editFrequentExpenseCommand, model, MESSAGE_INVALID_FREQUENT_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        final EditFrequentExpenseCommand standardCommand \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseCommand(INDEX_FIRST, DESC_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor copyDescriptor \u003d new EditFrequentExpenseDescriptor(DESC_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .equals(new EditFrequentExpenseCommand(INDEX_SECOND, DESC_SPOTIFY_SUBSCRIPTION)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(standardCommand"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .equals(new EditFrequentExpenseCommand(INDEX_FIRST, DESC_PHONE_BILL)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 131
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/frequentcommands/EditFrequentExpenseDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.frequentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand.EditFrequentExpenseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditFrequentExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EditFrequentExpenseDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor descriptorWithSameValues \u003d new EditFrequentExpenseDescriptor(DESC_PHONE_BILL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(DESC_PHONE_BILL.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(DESC_PHONE_BILL.equals(DESC_PHONE_BILL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(DESC_PHONE_BILL.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(DESC_PHONE_BILL.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(DESC_PHONE_BILL.equals(DESC_SPOTIFY_SUBSCRIPTION));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseDescriptor editedFrequentExpense \u003d new EditFrequentExpenseDescriptorBuilder(DESC_PHONE_BILL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(DESC_PHONE_BILL.equals(editedFrequentExpense));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        editedFrequentExpense \u003d new EditFrequentExpenseDescriptorBuilder(DESC_PHONE_BILL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withAmount(VALID_AMOUNT_SPOTIFY_SUBSCRIPTION).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(DESC_PHONE_BILL.equals(editedFrequentExpense));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        editedFrequentExpense \u003d new EditFrequentExpenseDescriptorBuilder(DESC_PHONE_BILL)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(DESC_PHONE_BILL.equals(editedFrequentExpense));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 51
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/stubs/DeleteCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A {@code DeleteCommand} stub that takes in an {@code Index} and returns the same"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * {@code Index} when its {@code getTargetIndex} method is called. All of its other"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * methods fail when called."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DeleteCommandStub extends DeleteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code DeleteCommandStub} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param targetIndex The target index in the displayed list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public DeleteCommandStub(Index targetIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Index getTargetIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 40
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/stubs/EditCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * An {@code EditCommand} stub that takes in an {@code Index} and returns the same"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * {@code Index} when its {@code getTargetIndex} method is called. All of its other"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * methods fail when called."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EditCommandStub extends EditCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs an {@code EditCommandStub} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param targetIndex The target index in the displayed list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public EditCommandStub(Index targetIndex, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(targetIndex, editTransactionDescriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.editTransactionDescriptor \u003d editTransactionDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Index getTargetIndex() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected EditTransactionDescriptor getEditTransactionDescriptor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return editTransactionDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 47
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/commands/stubs/FindCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A {@code FindCommand} stub that takes in a {@code TitleContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * and returns the same {@code TitleContainsKeywordsPredicate} when its {@code getPredicate}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * method is called. All of its other methods fail when called."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class FindCommandStub extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final TitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code DeleteCommandStub} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param predicate The predicate to filter the displayed list by."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public FindCommandStub(TitleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected TitleContainsKeywordsPredicate getPredicate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 40
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/AddExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_INTERNSHIP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.BUBBLE_TEA_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.INTERNSHIP_2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expectedExpense \u003d new TransactionBuilder(INTERNSHIP_2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_FOOD_BEVERAGE).buildExpense();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BUBBLE_TEA + TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_BUBBLE_TEA + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_BUBBLE_TEA"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expectedExpenseMultipleCategories \u003d new TransactionBuilder(INTERNSHIP_2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_FOOD_BEVERAGE, VALID_CATEGORY_WORK).buildExpense();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new AddExpenseCommand(expectedExpenseMultipleCategories));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expectedExpense \u003d new TransactionBuilder(BUBBLE_TEA_2).withCategories().buildExpense();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BUBBLE_TEA + AMOUNT_DESC_BUBBLE_TEA + DATE_DESC_BUBBLE_TEA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + VALID_AMOUNT_INTERNSHIP + DATE_DESC_INTERNSHIP,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + VALID_DATE_INTERNSHIP,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_INTERNSHIP + VALID_AMOUNT_INTERNSHIP + VALID_DATE_INTERNSHIP,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + INVALID_AMOUNT_DESC + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + INVALID_CATEGORY_DESC + VALID_CATEGORY_FOOD_BEVERAGE, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + AMOUNT_DESC_INTERNSHIP + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 126
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/AddIncomeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_INTERNSHIP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.BUBBLE_TEA_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.INTERNSHIP_2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class AddIncomeCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private AddIncomeCommandParser parser \u003d new AddIncomeCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income expectedIncome \u003d new TransactionBuilder(INTERNSHIP_2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_FOOD_BEVERAGE).buildIncome();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddIncomeCommand(expectedIncome));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BUBBLE_TEA + TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddIncomeCommand(expectedIncome));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_BUBBLE_TEA + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddIncomeCommand(expectedIncome));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_BUBBLE_TEA"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_FOOD_BEVERAGE, new AddIncomeCommand(expectedIncome));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income expectedIncomeMultipleCategories \u003d new TransactionBuilder(INTERNSHIP_2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_FOOD_BEVERAGE, VALID_CATEGORY_WORK).buildIncome();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new AddIncomeCommand(expectedIncomeMultipleCategories));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income expectedIncome \u003d new TransactionBuilder(BUBBLE_TEA_2).withCategories().buildIncome();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BUBBLE_TEA + AMOUNT_DESC_BUBBLE_TEA + DATE_DESC_BUBBLE_TEA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wltan"
        },
        "content": "                new AddIncomeCommand(expectedIncome));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wltan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIncomeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + VALID_AMOUNT_INTERNSHIP + DATE_DESC_INTERNSHIP,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + VALID_DATE_INTERNSHIP,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_INTERNSHIP + VALID_AMOUNT_INTERNSHIP + VALID_DATE_INTERNSHIP,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + INVALID_AMOUNT_DESC + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + INVALID_CATEGORY_DESC + VALID_CATEGORY_FOOD_BEVERAGE, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + AMOUNT_DESC_INTERNSHIP + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_INTERNSHIP + AMOUNT_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_INTERNSHIP + CATEGORY_DESC_WORK + CATEGORY_DESC_FOOD_BEVERAGE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wltan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIncomeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 69,
      "ianyong": 57
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "zhaojj2209": 5,
      "-": 25
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_BUBBLE_TEA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_BUBBLE_TEA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_INTERNSHIP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_BUBBLE_TEA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BUBBLE_TEA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_BUBBLE_TEA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_BUBBLE_TEA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid title"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // invalid amount followed by valid date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + DATE_DESC_BUBBLE_TEA, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_INTERNSHIP + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Transaction} being"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // edited, parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FOOD_BEVERAGE + CATEGORY_DESC_WORK + CATEGORY_EMPTY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FOOD_BEVERAGE + CATEGORY_EMPTY + CATEGORY_DESC_WORK,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_FOOD_BEVERAGE + CATEGORY_DESC_WORK,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + INVALID_DATE_DESC + VALID_AMOUNT_BUBBLE_TEA,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_INTERNSHIP + CATEGORY_DESC_WORK"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + DATE_DESC_BUBBLE_TEA + TITLE_DESC_BUBBLE_TEA + CATEGORY_DESC_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_BUBBLE_TEA).withAmount(VALID_AMOUNT_INTERNSHIP).withDate(VALID_DATE_BUBBLE_TEA)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK, VALID_CATEGORY_FOOD_BEVERAGE).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_INTERNSHIP + DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withAmount(VALID_AMOUNT_INTERNSHIP).withDate(VALID_DATE_BUBBLE_TEA).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTitle(VALID_TITLE_BUBBLE_TEA).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // amounts"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withAmount(VALID_AMOUNT_BUBBLE_TEA).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // dates"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_BUBBLE_TEA;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withDate(VALID_DATE_BUBBLE_TEA).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withCategories(VALID_CATEGORY_FOOD_BEVERAGE).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUBBLE_TEA + DATE_DESC_BUBBLE_TEA"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_FOOD_BEVERAGE + AMOUNT_DESC_BUBBLE_TEA + DATE_DESC_BUBBLE_TEA"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_FOOD_BEVERAGE + AMOUNT_DESC_INTERNSHIP + DATE_DESC_INTERNSHIP"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + CATEGORY_DESC_WORK;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withAmount(VALID_AMOUNT_INTERNSHIP).withDate(VALID_DATE_INTERNSHIP)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withCategories(VALID_CATEGORY_FOOD_BEVERAGE, VALID_CATEGORY_WORK).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withAmount(VALID_AMOUNT_INTERNSHIP).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_INTERNSHIP + INVALID_AMOUNT_DESC + AMOUNT_DESC_INTERNSHIP;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withAmount(VALID_AMOUNT_INTERNSHIP)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withDate(VALID_DATE_INTERNSHIP).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parse_resetCategories_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_EMPTY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 9,
      "zhaojj2209": 15,
      "yongping827": 19,
      "-": 103,
      "ianyong": 57
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/FinanceTrackerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListIncomeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.ListTransactionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FinanceTrackerParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private final FinanceTrackerParser parser \u003d new FinanceTrackerParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final OverviewUiStateStub overviewUiStateStub \u003d new OverviewUiStateStub();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final IncomeUiStateStub incomeUiStateStub \u003d new IncomeUiStateStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final ExpensesUiStateStub expensesUiStateStub \u003d new ExpensesUiStateStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final AnalyticsUiStateStub analyticsUiStateStub \u003d new AnalyticsUiStateStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parseCommand_addWhenOverviewTab() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                TransactionUtil.getAddCommand(expense), overviewUiStateStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Income income \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "        AddIncomeCommand command \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wltan"
        },
        "content": "                (AddIncomeCommand) parser.parseCommand(TransactionUtil.getAddCommand(income), incomeUiStateStub);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(new AddIncomeCommand(income), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wltan"
        },
        "content": "        AddExpenseCommand command \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wltan"
        },
        "content": "                (AddExpenseCommand) parser.parseCommand(TransactionUtil.getAddCommand(expense), expensesUiStateStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(new AddExpenseCommand(expense), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parseCommand_addWhenAnalyticsTab() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                TransactionUtil.getAddCommand(expense), analyticsUiStateStub));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addExpenseWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand command \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            (AddExpenseCommand) parser.parseCommand(TransactionUtil.getAddExpenseCommand(expense),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            overviewUiStateStub);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddExpenseCommand(expense), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addExpenseWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand command \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddExpenseCommand) parser.parseCommand(TransactionUtil.getAddExpenseCommand(expense),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        incomeUiStateStub);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddExpenseCommand(expense), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addExpenseWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand command \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddExpenseCommand) parser.parseCommand(TransactionUtil.getAddExpenseCommand(expense),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        expensesUiStateStub);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddExpenseCommand(expense), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addExpenseWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddExpenseCommand command \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddExpenseCommand) parser.parseCommand(TransactionUtil.getAddExpenseCommand(expense),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        analyticsUiStateStub);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddExpenseCommand(expense), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addIncomeWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Income income \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand command \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddIncomeCommand) parser.parseCommand(TransactionUtil.getAddIncomeCommand(income),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(new AddIncomeCommand(income), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addIncomeWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income income \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand command \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddIncomeCommand) parser.parseCommand(TransactionUtil.getAddIncomeCommand(income),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        incomeUiStateStub);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddIncomeCommand(income), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addIncomeWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income income \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand command \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddIncomeCommand) parser.parseCommand(TransactionUtil.getAddIncomeCommand(income),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        expensesUiStateStub);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddIncomeCommand(income), command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_addIncomeWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income income \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        AddIncomeCommand command \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                (AddIncomeCommand) parser.parseCommand(TransactionUtil.getAddIncomeCommand(income),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        analyticsUiStateStub);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new AddIncomeCommand(income), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_clearWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, overviewUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_clearWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, incomeUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_clearWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, expensesUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_clearWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, analyticsUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                analyticsUiStateStub) instanceof ClearCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parseCommand_deleteWhenOverviewTab() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(), overviewUiStateStub));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_deleteWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(), incomeUiStateStub);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_deleteWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(), expensesUiStateStub);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void parseCommand_deleteWhenAnalyticsTab() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(), analyticsUiStateStub));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_editWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + TransactionUtil.getEditTransactionDescriptorDetails(descriptor), overviewUiStateStub));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_editWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income income \u003d new TransactionBuilder().buildIncome();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(income).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + TransactionUtil.getEditTransactionDescriptorDetails(descriptor), incomeUiStateStub);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_editWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + TransactionUtil.getEditTransactionDescriptorDetails(descriptor), expensesUiStateStub);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_editWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expense \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        EditCommand.EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                + TransactionUtil.getEditTransactionDescriptorDetails(descriptor), analyticsUiStateStub));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_exitWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, overviewUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_exitWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, incomeUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_exitWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, expensesUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_exitWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, analyticsUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                analyticsUiStateStub) instanceof ExitCommand);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_findWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        .collect(Collectors.joining(\" \")), overviewUiStateStub);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new FindCommand(new TitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_findWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        .collect(Collectors.joining(\" \")), incomeUiStateStub);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new FindCommand(new TitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_findWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        .collect(Collectors.joining(\" \")), expensesUiStateStub);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new FindCommand(new TitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_findWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        .collect(Collectors.joining(\" \")), analyticsUiStateStub));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_helpWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, overviewUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_helpWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, incomeUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_helpWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, expensesUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_helpWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, analyticsUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                analyticsUiStateStub) instanceof HelpCommand);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, overviewUiStateStub)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, incomeUiStateStub)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, expensesUiStateStub)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ListCommand.COMMAND_WORD, analyticsUiStateStub));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listTransactionWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD, overviewUiStateStub)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listTransactionWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD, incomeUiStateStub)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listTransactionWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD, expensesUiStateStub)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listTransactionWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD, analyticsUiStateStub)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListTransactionCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                analyticsUiStateStub) instanceof ListTransactionCommand);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listExpenseWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD, overviewUiStateStub)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listExpenseWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD, incomeUiStateStub)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listExpenseWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD, expensesUiStateStub)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listExpenseWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD, analyticsUiStateStub)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListExpenseCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                analyticsUiStateStub) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listIncomeWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD, overviewUiStateStub)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                overviewUiStateStub) instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listIncomeWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD, incomeUiStateStub)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                incomeUiStateStub) instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listIncomeWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD, expensesUiStateStub)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                expensesUiStateStub) instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_listIncomeWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD, analyticsUiStateStub)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(parser.parseCommand(ListIncomeCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                analyticsUiStateStub) instanceof ListIncomeCommand);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_tabWhenOverviewTab() throws Exception {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TabCommand command \u003d (TabCommand) parser.parseCommand("
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                TabCommand.COMMAND_WORD + \" 1\", overviewUiStateStub);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new TabCommand(Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_tabWhenIncomeTab() throws Exception {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TabCommand command \u003d (TabCommand) parser.parseCommand("
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                TabCommand.COMMAND_WORD + \" 1\", incomeUiStateStub);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new TabCommand(Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_tabWhenExpensesTab() throws Exception {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TabCommand command \u003d (TabCommand) parser.parseCommand("
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                TabCommand.COMMAND_WORD + \" 1\", expensesUiStateStub);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new TabCommand(Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_tabWhenAnalyticsTab() throws Exception {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TabCommand command \u003d (TabCommand) parser.parseCommand("
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                TabCommand.COMMAND_WORD + \" 1\", analyticsUiStateStub);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(new TabCommand(Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unrecognisedInputWhenOverviewTab_throwsParseException() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"\", overviewUiStateStub));"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unrecognisedInputWhenIncomeTab_throwsParseException() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"\", incomeUiStateStub));"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unrecognisedInputWhenExpensesTab_throwsParseException() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"\", expensesUiStateStub));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unrecognisedInputWhenAnalyticsTab_throwsParseException() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"\", analyticsUiStateStub));"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unknownCommandWhenOverviewTab_throwsParseException() {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", overviewUiStateStub));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unknownCommandWhenIncomeTab_throwsParseException() {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", incomeUiStateStub));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unknownCommandWhenExpensesTab_throwsParseException() {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", expensesUiStateStub));"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseCommand_unknownCommandWhenAnalyticsTab_throwsParseException() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", analyticsUiStateStub));"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A default {@code UiState} stub that has all of the methods failing."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static class UiStateStub extends UiState {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public Tab getCurrentTab() {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void setCurrentTab(Tab currentTab) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A {@code UiState} stub that always returns the \u0027Overview\u0027 tab as the current tab."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static class OverviewUiStateStub extends UiStateStub {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public Tab getCurrentTab() {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return Tab.OVERVIEW;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A {@code UiState} stub that always returns the \u0027Income\u0027 tab as the current tab."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static class IncomeUiStateStub extends UiStateStub {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public Tab getCurrentTab() {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return Tab.INCOME;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A {@code UiState} stub that always returns the \u0027Expenses\u0027 tab as the current tab."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static class ExpensesUiStateStub extends UiStateStub {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public Tab getCurrentTab() {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return Tab.EXPENSES;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * A {@code UiState} stub that always returns the \u0027Analytics\u0027 tab as the current tab."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static class AnalyticsUiStateStub extends UiStateStub {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public Tab getCurrentTab() {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return Tab.ANALYTICS;"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 13,
      "wltan": 27,
      "zhaojj2209": 22,
      "-": 46,
      "ianyong": 479
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new FindCommand(new TitleContainsKeywordsPredicate(Arrays.asList(\"Damith\", \"Seth\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, \"Damith Seth\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, \" \\n Damith \\n \\t Seth  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 5,
      "-": 25,
      "ianyong": 4
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R\\u2416chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String INVALID_DATE \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\\u2416friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static final String VALID_DATE \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategories(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategories("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                Arrays.asList(VALID_CATEGORY_1, INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e(Arrays.asList(new Category(VALID_CATEGORY_1),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 3,
      "wltan": 1,
      "zhaojj2209": 7,
      "yongping827": 50,
      "-": 96,
      "ianyong": 15
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/TabCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TabCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private TabCommandParser parser \u003d new TabCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parse_validArgs_returnsTabCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, \"1\", new TabCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, \"2\", new TabCommand(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, \"3\", new TabCommand(Index.fromOneBased(3)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseSuccess(parser, \"4\", new TabCommand(Index.fromOneBased(4)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"-5\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertParseFailure(parser, \"2 hello\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 31
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequent/AddFrequentExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_UTILITIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_PHONE_BILL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_UTILITIES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_PHONE_BILL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.PHONE_BILL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.AddFrequentExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.AddFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.FrequentTransactionBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class AddFrequentExpenseCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private AddFrequentExpenseCommandParser parser \u003d new AddFrequentExpenseCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense expectedFrequentExpense \u003d new FrequentTransactionBuilder(PHONE_BILL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_UTILITIES).buildFrequentExpense();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_PHONE_BILL + AMOUNT_DESC_PHONE_BILL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + CATEGORY_DESC_UTILITIES, new AddFrequentExpenseCommand(expectedFrequentExpense));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_SPOTIFY_SUBSCRIPTION + TITLE_DESC_PHONE_BILL"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                        + AMOUNT_DESC_PHONE_BILL + CATEGORY_DESC_UTILITIES,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new AddFrequentExpenseCommand(expectedFrequentExpense));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PHONE_BILL + AMOUNT_DESC_SPOTIFY_SUBSCRIPTION"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + AMOUNT_DESC_PHONE_BILL + CATEGORY_DESC_UTILITIES,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new AddFrequentExpenseCommand(expectedFrequentExpense));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense expectedExpenseMultipleCategories \u003d new FrequentTransactionBuilder(PHONE_BILL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_UTILITIES, VALID_CATEGORY_WORK).buildFrequentExpense();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PHONE_BILL + AMOUNT_DESC_PHONE_BILL"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                        + CATEGORY_DESC_UTILITIES + CATEGORY_DESC_WORK,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new AddFrequentExpenseCommand(expectedExpenseMultipleCategories));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense expectedFrequentExpense \u003d new FrequentTransactionBuilder(PHONE_BILL).withCategories()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .buildFrequentExpense();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PHONE_BILL + AMOUNT_DESC_PHONE_BILL,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new AddFrequentExpenseCommand(expectedFrequentExpense));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFrequentExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PHONE_BILL + AMOUNT_DESC_PHONE_BILL, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PHONE_BILL + VALID_AMOUNT_PHONE_BILL, expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PHONE_BILL + VALID_AMOUNT_PHONE_BILL, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + AMOUNT_DESC_PHONE_BILL"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + CATEGORY_DESC_UTILITIES + CATEGORY_DESC_WORK, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PHONE_BILL + INVALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + CATEGORY_DESC_UTILITIES + CATEGORY_DESC_WORK, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PHONE_BILL + AMOUNT_DESC_PHONE_BILL"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + INVALID_CATEGORY_DESC + CATEGORY_DESC_UTILITIES, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + AMOUNT_DESC_PHONE_BILL + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_PHONE_BILL"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                        + CATEGORY_DESC_UTILITIES + CATEGORY_DESC_WORK,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFrequentExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 111
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequent/ConvertFrequentExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.DATE_DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.ConvertFrequentExpenseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.ConvertFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ConvertFrequentExpenseCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertFrequentExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ConvertFrequentExpenseCommandParser parser \u003d new ConvertFrequentExpenseCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_SPOTIFY_SUBSCRIPTION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DATE_DESC_SPOTIFY_SUBSCRIPTION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"0\" + DATE_DESC_SPOTIFY_SUBSCRIPTION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Date convertedDate \u003d new Date(VALID_DATE_SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ConvertFrequentExpenseCommand expectedConvertFrequentExpenseCommand \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new ConvertFrequentExpenseCommand(targetIndex, convertedDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedConvertFrequentExpenseCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 69
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequent/DeleteFrequentExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.DeleteFrequentExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.DeleteFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeleteFrequentExpenseCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private DeleteFrequentExpenseCommandParser parser \u003d new DeleteFrequentExpenseCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteFrequentExpenseCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DeleteFrequentExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 33
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/logic/parser/frequent/EditFrequentExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.logic.parser.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.AMOUNT_DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_MISCELLANEOUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_UTILITIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.CATEGORY_DESC_WORK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.TITLE_DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_PHONE_BILL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_MISCELLANEOUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_UTILITIES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_PHONE_BILL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.parser.frequentparsers.EditFrequentExpenseCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.EditFrequentExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EditFrequentExpenseCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditFrequentExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private EditFrequentExpenseCommandParser parser \u003d new EditFrequentExpenseCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PHONE_BILL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\", EditFrequentExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_PHONE_BILL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_PHONE_BILL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid title"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // invalid amount followed by valid category"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + CATEGORY_DESC_UTILITIES,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_PHONE_BILL + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code FrequentExpense} being"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // edited, parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FOOD_BEVERAGE + CATEGORY_DESC_WORK + CATEGORY_EMPTY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FOOD_BEVERAGE + CATEGORY_EMPTY + CATEGORY_DESC_WORK,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_FOOD_BEVERAGE + CATEGORY_DESC_WORK,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + INVALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + CATEGORY_DESC_UTILITIES, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_PHONE_BILL + CATEGORY_DESC_UTILITIES"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + TITLE_DESC_SPOTIFY_SUBSCRIPTION + CATEGORY_DESC_MISCELLANEOUS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand.EditFrequentExpenseDescriptor descriptor \u003d new EditFrequentExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).withAmount(VALID_AMOUNT_PHONE_BILL)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_UTILITIES, VALID_CATEGORY_MISCELLANEOUS).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand expectedCommand \u003d new EditFrequentExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand.EditFrequentExpenseDescriptor descriptor \u003d new EditFrequentExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withAmount(VALID_AMOUNT_PHONE_BILL).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand expectedCommand \u003d new EditFrequentExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand.EditFrequentExpenseDescriptor descriptor \u003d new EditFrequentExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand expectedCommand \u003d new EditFrequentExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // amounts"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_PHONE_BILL;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor \u003d new EditFrequentExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_PHONE_BILL).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedCommand \u003d new EditFrequentExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_UTILITIES;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor \u003d new EditFrequentExpenseDescriptorBuilder().withCategories(VALID_CATEGORY_UTILITIES).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedCommand \u003d new EditFrequentExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void parse_resetCategories_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_EMPTY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand.EditFrequentExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                new EditFrequentExpenseDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        EditFrequentExpenseCommand expectedCommand \u003d new EditFrequentExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 158
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/FinanceTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalTransactions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FinanceTrackerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private final FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(Collections.emptyList(), financeTracker.getTransactionList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e financeTracker.resetData(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void resetData_withValidReadOnlyFinanceTracker_replacesData() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker newData \u003d getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTracker.resetData(newData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(newData, financeTracker);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e financeTracker.getTransactionList().remove(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e financeTracker.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getIncomeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e financeTracker.getIncomeList().remove(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_distinctFinanceTrackersWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FinanceTracker firstFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FinanceTracker secondFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        firstFinanceTracker.setTransactions(getTypicalTransactions());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        secondFinanceTracker.setTransactions(getTypicalTransactions());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstFinanceTracker, secondFinanceTracker);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstFinanceTracker, secondFinanceTracker);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void hashCode_distinctFinanceTrackersWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FinanceTracker firstFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FinanceTracker secondFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        firstFinanceTracker.setTransactions(getTypicalTransactions());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        secondFinanceTracker.setTransactions(getTypicalTransactions());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstFinanceTracker, secondFinanceTracker);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstFinanceTracker.hashCode(), secondFinanceTracker.hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 12,
      "yongping827": 10,
      "-": 24,
      "ianyong": 26
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.BUBBLE_TEA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TUITION_FEES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.FinanceTrackerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(new FinanceTracker(), new FinanceTracker(modelManager.getFinanceTracker()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"finance/tracker/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"new/finance/tracker/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setFinanceTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFinanceTrackerFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setFinanceTrackerFilePath_validPath_setsFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Path path \u003d Paths.get(\"finance/tracker/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        modelManager.setFinanceTrackerFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(path, modelManager.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void getFilteredIncomeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredIncomeList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FinanceTracker financeTracker \u003d new FinanceTrackerBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withTransaction(BUBBLE_TEA).withTransaction(TUITION_FEES)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withExpense(new TransactionBuilder(BUBBLE_TEA).buildExpense())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withExpense(new TransactionBuilder(TUITION_FEES).buildExpense())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withIncome(new TransactionBuilder(BUBBLE_TEA).buildIncome())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .withIncome(new TransactionBuilder(TUITION_FEES).buildIncome()).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker differentFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        modelManager \u003d new ModelManager(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        // different financeTracker -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFinanceTracker, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String[] keywords \u003d BUBBLE_TEA.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // different filteredTransactionList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        modelManager.updateFilteredTransactionList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // different filteredExpenseList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        modelManager.updateFilteredExpenseList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, userPrefs)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // different filteredIncomeList -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        modelManager.updateFilteredIncomeList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, userPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        modelManager.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        differentUserPrefs.setFinanceTrackerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, differentUserPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 22,
      "yongping827": 24,
      "-": 84,
      "ianyong": 11
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final GuiSettings guiSettings \u003d new GuiSettings(1200, 800, 100, 100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setFinanceTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFinanceTrackerFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_sameUserPrefs_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1200, 800, 100, 100);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(userPrefs, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_compareUserPrefsWithNull_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotEquals(userPrefs, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_distinctUserPrefsWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UserPrefs firstUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UserPrefs secondUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        firstUserPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        secondUserPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstUserPrefs, secondUserPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstUserPrefs, secondUserPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void hashCode_distinctUserPrefsWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UserPrefs firstUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UserPrefs secondUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        firstUserPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        secondUserPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstUserPrefs, secondUserPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstUserPrefs.hashCode(), secondUserPrefs.hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 4,
      "-": 17,
      "ianyong": 44
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/category/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid category name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(Category.isValidCategoryName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(Category.isValidCategoryName(\"   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(Category.isValidCategoryName(\"\\u0000world\")); // non-graphical character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // valid category name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"David Roger Jackson Ray Jr 2nd\")); // long category name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Category.isValidCategoryName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 2,
      "yongping827": 24,
      "ianyong": 16
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/FrequentExpenseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_UTILITIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.PHONE_BILL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions.DuplicateFrequentExpenseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.exceptions.FrequentExpenseNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.FrequentTransactionBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentExpenseListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final FrequentExpenseList frequentExpenseList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void add_nullFrequentExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e frequentExpenseList.add(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void add_duplicateFrequentExpense_throwsDuplicateFrequentExpenseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpense \u003d new FrequentTransactionBuilder(PHONE_BILL)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_UTILITIES).buildFrequentExpense();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(frequentExpense);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpenseCopy \u003d new FrequentTransactionBuilder(frequentExpense).buildFrequentExpense();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(DuplicateFrequentExpenseException.class, () -\u003e frequentExpenseList.add(frequentExpenseCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense_nullTargetFrequentExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            -\u003e frequentExpenseList.setFrequentExpense(null, PHONE_BILL));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense_nullEditedTFrequentExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            -\u003e frequentExpenseList.setFrequentExpense(PHONE_BILL, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense_targetFrequentExpenseNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(FrequentExpenseNotFoundException.class, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            -\u003e frequentExpenseList.setFrequentExpense(PHONE_BILL, PHONE_BILL));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense_editedFrequentExpenseIsSameFrequentExpense_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.setFrequentExpense(PHONE_BILL, PHONE_BILL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpenseList expectedTransactionList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedTransactionList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTransactionList, frequentExpenseList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense_editedFrequentExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense editedPhone \u003d new FrequentTransactionBuilder(PHONE_BILL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withCategories(VALID_CATEGORY_UTILITIES).buildFrequentExpense();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.setFrequentExpense(PHONE_BILL, editedPhone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpenseList expectedTransactionList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedTransactionList.add(editedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTransactionList, frequentExpenseList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpense_editedFrequentExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.setFrequentExpense(PHONE_BILL, SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpenseList expectedTransactionList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedTransactionList.add(SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTransactionList, frequentExpenseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void remove_nullFrequentExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e frequentExpenseList.remove(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void remove_frequentExpenseDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(FrequentExpenseNotFoundException.class, () -\u003e frequentExpenseList.remove(PHONE_BILL));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void remove_existingFrequentExpense_removesFrequentExpense() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.remove(PHONE_BILL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpenseList expectedTransactionList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTransactionList, frequentExpenseList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses_nullFrequentExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            -\u003e frequentExpenseList.setFrequentExpenses((FrequentExpenseList) null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses_frequentExpenseList_replacesOwnListWithProvidedFrequentExpenseList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpenseList expectedTransactionList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedTransactionList.add(SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.setFrequentExpenses(expectedTransactionList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTransactionList, frequentExpenseList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            -\u003e frequentExpenseList.setFrequentExpenses((List\u003cFrequentExpense\u003e) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setFrequentExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        frequentExpenseList.add(PHONE_BILL);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cFrequentExpense\u003e transactionList \u003d Collections.singletonList(SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.frequentExpenseList.setFrequentExpenses(transactionList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpenseList expectedTransactionList \u003d new FrequentExpenseList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        expectedTransactionList.add(SPOTIFY_SUBSCRIPTION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTransactionList, this.frequentExpenseList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            -\u003e frequentExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 139
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/frequent/FrequentExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.frequent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.PHONE_BILL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.SPOTIFY_SUBSCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.FrequentTransactionBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense frequentExpense \u003d new FrequentTransactionBuilder(PHONE_BILL).buildFrequentExpense();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(PHONE_BILL.equals(frequentExpense));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertTrue(PHONE_BILL.equals(PHONE_BILL));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(PHONE_BILL.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(PHONE_BILL.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different frequent expense -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(PHONE_BILL.equals(SPOTIFY_SUBSCRIPTION));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FrequentExpense editedPhoneBill \u003d new FrequentTransactionBuilder(PHONE_BILL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .withTitle(VALID_TITLE_SPOTIFY_SUBSCRIPTION).buildFrequentExpense();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(PHONE_BILL.equals(editedPhoneBill));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different amounts -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        editedPhoneBill \u003d new FrequentTransactionBuilder(PHONE_BILL).withAmount(VALID_AMOUNT_SPOTIFY_SUBSCRIPTION)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .buildFrequentExpense();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(PHONE_BILL.equals(editedPhoneBill));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        editedPhoneBill \u003d new FrequentTransactionBuilder(PHONE_BILL).withCategories(VALID_CATEGORY_FOOD_BEVERAGE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                .buildFrequentExpense();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertFalse(PHONE_BILL.equals(editedPhoneBill));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 49
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(\"40.404\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"40.\")); // no numbers after decimal"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"40.4\")); // 1 decimal place"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"40.404\")); // 3 decimal places"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"€3\")); // wrong currency prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // valid amounts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"$1\")); // $ prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"4.20\")); // 2 decimal places"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"$3.50\")); // $ prefix, 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"91\")); // numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"911\")); // numbers"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"93121534\")); // long numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"124293842033123\")); // long numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_distinctAmountsWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount firstAmount \u003d new Amount(\"3.78\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount secondAmount \u003d new Amount(\"3.78\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstAmount, secondAmount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstAmount, secondAmount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void hashCode_distinctAmountsWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount firstAmount \u003d new Amount(\"3.78\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Amount secondAmount \u003d new Amount(\"3.78\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstAmount, secondAmount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstAmount.hashCode(), secondAmount.hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 12,
      "zhaojj2209": 2,
      "yongping827": 34,
      "ianyong": 18
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"04/11\")); // missing year"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"06102020\")); // missing separators"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"01/02/03/04\")); // more than 3 parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"ab/cd/efgh\")); // not numeric"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"01/Jan/1970\")); // not numeric"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"6/10/2020\")); // leading zeroes are required"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"06/10/20\")); // year must be 4 digits"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"32/09/2020\")); // day is not valid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"03/13/2020\")); // month is not valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"01/01/0000\")); // year is not valid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // date from the future is not allowed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "        LocalDate pastDate \u003d LocalDate.of(2020, 10, 16);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertFalse(Date.isValidDate(\"17/10/2020\", Clock.fixed("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "                pastDate.atStartOfDay(ZoneId.systemDefault()).toInstant(), ZoneId.systemDefault())));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertTrue(Date.isValidDate(\"06/10/2020\")); // 6 October 2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_distinctDatesWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date firstDate \u003d new Date(\"22/09/2000\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date secondDate \u003d new Date(\"22/09/2000\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstDate, secondDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstDate, secondDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void hashCode_distinctDatesWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date firstDate \u003d new Date(\"22/09/2000\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Date secondDate \u003d new Date(\"22/09/2000\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstDate, secondDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstDate.hashCode(), secondDate.hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 20,
      "zhaojj2209": 2,
      "yongping827": 35,
      "ianyong": 18
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/TitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Damith\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTitle(\"Damith Seth\").buildExpense()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Damith\", \"Seth\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTitle(\"Damith Seth\").buildExpense()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Seth\", \"Aaron\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTitle(\"Damith Aaron\").buildExpense()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"dAMiTh\", \"SEtH\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTitle(\"Damith Seth\").buildExpense()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTitle(\"Damith\").buildExpense()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Aaron\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTitle(\"Damith Seth\").buildExpense()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Keywords match amount and date, but does not match title"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Arrays.asList(\"12345\", \"damith@comp.nus.edu.sg\", \"COM2\", \"31/12/2019\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTitle(\"Damith\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                .withDate(\"31/12/2019\").buildExpense()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 7,
      "ianyong": 71
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(Title.isValidTitle(\"   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\\u0000world\")); // non-graphical character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long title"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 41
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/transaction/TransactionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction.TRANSACTION_COMPARATOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.BUBBLE_TEA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.INTERNSHIP_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalTransactions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class TransactionListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private final TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void add_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.add(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransaction_nullTargetTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransaction(null, BUBBLE_TEA));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransaction_nullEditedTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransaction(BUBBLE_TEA, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransaction_targetTransactionNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList.setTransaction(BUBBLE_TEA, BUBBLE_TEA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransaction_editedTransactionIsSameTransaction_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.setTransaction(BUBBLE_TEA, BUBBLE_TEA);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedTransactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransaction_editedTransactionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Expense editedBubbleTea \u003d new TransactionBuilder(BUBBLE_TEA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                .withCategories(VALID_CATEGORY_WORK).buildExpense();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.setTransaction(BUBBLE_TEA, editedBubbleTea);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedTransactionList.add(editedBubbleTea);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransaction_editedTransactionHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.setTransaction(BUBBLE_TEA, INTERNSHIP_2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedTransactionList.add(INTERNSHIP_2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void remove_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.remove(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void remove_transactionDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList.remove(BUBBLE_TEA));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void remove_existingTransaction_removesTransaction() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.remove(BUBBLE_TEA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransactions_nullTransactionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            -\u003e transactionList.setTransactions((TransactionList) null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransactions_transactionList_replacesOwnListWithProvidedTransactionList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedTransactionList.add(INTERNSHIP_2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        transactionList.setTransactions(expectedTransactionList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransactions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransactions((List\u003cTransaction\u003e) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void setTransactions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.add(BUBBLE_TEA);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d Collections.singletonList(INTERNSHIP_2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this.transactionList.setTransactions(transactionList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        expectedTransactionList.add(INTERNSHIP_2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(expectedTransactionList, this.transactionList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            -\u003e transactionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void iterator_iteratesTransactionsInOrder_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d getTypicalTransactions();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactions.sort(TRANSACTION_COMPARATOR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactionList.setTransactions(transactions);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Iterator\u003cTransaction\u003e iterator \u003d transactionList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        transactions.stream().forEach(transaction -\u003e assertEquals(transaction, iterator.next()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void equals_distinctTransactionListsWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d getTypicalTransactions();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TransactionList firstTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TransactionList secondTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        firstTransactionList.setTransactions(transactions);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        secondTransactionList.setTransactions(transactions);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstTransactionList, secondTransactionList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstTransactionList, secondTransactionList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void hashCode_distinctTransactionListsWithSameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d getTypicalTransactions();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TransactionList firstTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        TransactionList secondTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        firstTransactionList.setTransactions(transactions);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        secondTransactionList.setTransactions(transactions);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertNotSame(firstTransactionList, secondTransactionList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(firstTransactionList.hashCode(), secondTransactionList.hashCode());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 100,
      "ianyong": 62
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/model/util/SampleDataUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getSampleFinanceTracker_countTransactions_correctNumberOfTransactions() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ReadOnlyFinanceTracker financeTracker \u003d SampleDataUtil.getSampleFinanceTracker();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(6, financeTracker.getTransactionList().size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(3, financeTracker.getExpenseList().size());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(3, financeTracker.getIncomeList().size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 17
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonAdaptedExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongping827"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TUITION_FEES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R\\u2416chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String INVALID_DATE \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\\u2416friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_TITLE \u003d TUITION_FEES.getTitle().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_AMOUNT \u003d TUITION_FEES.getAmount().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_DATE \u003d TUITION_FEES.getDate().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d TUITION_FEES.getCategories().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Expense expenseBenson \u003d new TransactionBuilder(TUITION_FEES).buildExpense();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(expenseBenson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(expenseBenson, expense.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedExpense(INVALID_TITLE, VALID_AMOUNT, VALID_DATE, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(null, VALID_AMOUNT, VALID_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                VALID_CATEGORIES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedExpense(VALID_TITLE, INVALID_AMOUNT, VALID_DATE, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_TITLE, null, VALID_DATE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                VALID_CATEGORIES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedExpense(VALID_TITLE, VALID_AMOUNT, INVALID_DATE, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_TITLE, VALID_AMOUNT, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                VALID_CATEGORIES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidCategories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedExpense(VALID_TITLE, VALID_AMOUNT, VALID_DATE, invalidCategories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongping827": 90,
      "ianyong": 8
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonAdaptedIncomeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongping827"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.storage.JsonAdaptedIncome.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TUITION_FEES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class JsonAdaptedIncomeTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R\\u2416chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private static final String INVALID_DATE \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\\u2416friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_TITLE \u003d TUITION_FEES.getTitle().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_AMOUNT \u003d TUITION_FEES.getAmount().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final String VALID_DATE \u003d TUITION_FEES.getDate().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d TUITION_FEES.getCategories().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_validIncomeDetails_returnsIncome() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Income bensonIncome \u003d new TransactionBuilder(TUITION_FEES).buildIncome();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d new JsonAdaptedIncome(bensonIncome);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertEquals(bensonIncome, income.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedIncome(INVALID_TITLE, VALID_AMOUNT, VALID_DATE, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d new JsonAdaptedIncome(null, VALID_AMOUNT, VALID_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                VALID_CATEGORIES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedIncome(VALID_TITLE, INVALID_AMOUNT, VALID_DATE, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d new JsonAdaptedIncome(VALID_TITLE, null, VALID_DATE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                VALID_CATEGORIES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedIncome(VALID_TITLE, VALID_AMOUNT, INVALID_DATE, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d new JsonAdaptedIncome(VALID_TITLE, VALID_AMOUNT, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                VALID_CATEGORIES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public void toModelType_invalidCategories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                new JsonAdaptedIncome(VALID_TITLE, VALID_AMOUNT, VALID_DATE, invalidCategories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        assertThrows(IllegalValueException.class, income::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongping827": 90,
      "ianyong": 8
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonFinanceTrackerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.BUBBLE_TEA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TEACHING_ASSISTANT_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.TUITION_FEES_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class JsonFinanceTrackerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFinanceTrackerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void readFinanceTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFinanceTracker(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return new JsonFinanceTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                .readFinanceTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertFalse(readFinanceTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFinanceTracker(\"notJsonFormatFinanceTracker.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void readFinanceTracker_invalidTransactionFinanceTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFinanceTracker(\"invalidTransactionsFinanceTracker.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void readFinanceTracker_invalidAndValidTransactionFinanceTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFinanceTracker("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \"invalidAndValidTransactionsFinanceTracker.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void readAndSaveFinanceTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFinanceTracker.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker original \u003d getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonFinanceTrackerStorage jsonFinanceTrackerStorage \u003d new JsonFinanceTrackerStorage(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        ReadOnlyFinanceTracker readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        original.addTransaction(new TransactionBuilder(TUITION_FEES_2).buildExpense());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        original.removeTransaction(new TransactionBuilder(BUBBLE_TEA).buildExpense());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker(filePath).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        original.addTransaction(new TransactionBuilder(TEACHING_ASSISTANT_2).buildIncome());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void saveFinanceTracker_nullFinanceTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Saves {@code financeTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, String filePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            new JsonFinanceTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                    .saveFinanceTracker(financeTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void saveFinanceTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceTracker(new FinanceTracker(), null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 104,
      "yongping827": 1,
      "ianyong": 8
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonSerializableFinanceTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class JsonSerializableFinanceTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFinanceTrackerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalTransactionsFinanceTracker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Path INVALID_TRANSACTION_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidTransactionsFinanceTracker.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void toModelType_typicalTransactionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker financeTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker typicalTransactionsFinanceTracker \u003d TypicalTransactions.getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(financeTrackerFromFile, typicalTransactionsFinanceTracker);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void toModelType_invalidTransactionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 36,
      "ianyong": 4
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"fine$$e.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.TypicalTransactions.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d new JsonFinanceTrackerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        storageManager \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void financeTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "         * {@link JsonFinanceTrackerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFinanceTrackerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker original \u003d getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        storageManager.saveFinanceTracker(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        ReadOnlyFinanceTracker retrieved \u003d storageManager.readFinanceTracker().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertEquals(original, new FinanceTracker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public void getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        assertNotNull(storageManager.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/EditFrequentExpenseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.frequent.EditFrequentExpenseCommand.EditFrequentExpenseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * A utility class to help with building EditFrequentExpenseDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EditFrequentExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private EditFrequentExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor \u003d new EditFrequentExpenseDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptorBuilder(EditFrequentExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.descriptor \u003d new EditFrequentExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Returns an {@code EditFrequentExpenseDescriptorBuilder} with fields containing {@code transaction}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptorBuilder(FrequentExpense frequentExpense) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor \u003d new EditFrequentExpenseDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor.setTitle(frequentExpense.getTitle());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor.setAmount(frequentExpense.getAmount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor.setCategories(frequentExpense.getCategories());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Sets the {@code Title} of the {@code EditFrequentExpenseDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditFrequentExpenseDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * {@code EditFrequentExpenseDescriptorBuilder} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptorBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Set\u003cCategory\u003e categorySet \u003d Stream.of(categories).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        descriptor.setCategories(categorySet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public EditFrequentExpenseDescriptor build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 67
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/EditTransactionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * A utility class to help with building EditTransactionDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class EditTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private EditCommand.EditTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor \u003d new EditCommand.EditTransactionDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditTransactionDescriptorBuilder(EditCommand.EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.descriptor \u003d new EditTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns an {@code EditTransactionDescriptor} with fields containing {@code transaction}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditTransactionDescriptorBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor.setTitle(transaction.getTitle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor.setAmount(transaction.getAmount());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor.setDate(transaction.getDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor.setCategories(transaction.getCategories());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Sets the {@code Title} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public EditTransactionDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditTransactionDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Sets the {@code Date} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditTransactionDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditTransactionDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditTransactionDescriptorBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        Set\u003cCategory\u003e categorySet \u003d Stream.of(categories).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        descriptor.setCategories(categorySet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public EditCommand.EditTransactionDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 7,
      "yongping827": 66,
      "ianyong": 5
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/FinanceTrackerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " * A utility class to help with building FinanceTracker objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "public class FinanceTrackerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    private FinanceTracker financeTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTrackerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTrackerBuilder(FinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        this.financeTracker \u003d financeTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Adds a new {@code Transaction} to the {@code FinanceTracker} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTrackerBuilder withTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        financeTracker.addTransaction(transaction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Adds a new {@code Transaction} to the {@code FinanceTracker} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public FinanceTrackerBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        financeTracker.addTransaction(expense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Adds a new {@code Transaction} to the {@code FinanceTracker} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public FinanceTrackerBuilder withIncome(Income income) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        financeTracker.addTransaction(income);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public FinanceTracker build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 32,
      "yongping827": 18
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/FrequentTransactionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentTransaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * A utility class to help with building FrequentExpense objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FrequentTransactionBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Phone Bill\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"$60.00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates a {@code FrequentTransactionBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentTransactionBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Initializes the FrequentTransactionBuilder with the data of {@code frequentExpenseToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentTransactionBuilder(FrequentTransaction\u003cExpense\u003e frequentExpenseToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        title \u003d frequentExpenseToCopy.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        amount \u003d frequentExpenseToCopy.getAmount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(frequentExpenseToCopy.getCategories());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Sets the {@code Title} of the {@code FrequentExpense} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentTransactionBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code FrequentExpense} that we are"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentTransactionBuilder withCategories(String ... categories) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategoriesSet(categories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Sets the {@code Amount} of the {@code FrequentExpesnse} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentTransactionBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FrequentExpense buildFrequentExpense() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new FrequentExpense(title, amount, categories);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 73
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns the middle index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns the last index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns the transaction in the {@code model}\u0027s transaction list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static Transaction getTransaction(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return model.getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 4,
      "yongping827": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/TransactionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Bubble Tea\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"$4.80\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"14/10/2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Creates a {@code TransactionBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        title \u003d transactionToCopy.getTitle();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        amount \u003d transactionToCopy.getAmount();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(transactionToCopy.getCategories());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Sets the {@code Title} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public TransactionBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Transaction} that we are"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionBuilder withCategories(String ... categories) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategoriesSet(categories);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Sets the {@code Amount} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Sets the {@code Date} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public TransactionBuilder withDate(String date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public Income buildIncome() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Income(title, amount, date, categories);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Expense buildExpense() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Expense(title, amount, date, categories);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 4,
      "zhaojj2209": 6,
      "yongping827": 64,
      "ianyong": 16
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/TransactionUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.parser.FinanceTrackerParser.ADD_COMMAND_COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * A utility class for Transaction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class TransactionUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an add command string for adding the {@code Transaction}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static String getAddCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return ADD_COMMAND_COMMAND_WORD + \" \" + getTransactionDetails(transaction);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an add expense command string for adding the {@code Expense}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static String getAddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getTransactionDetails(expense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an add income command string for adding the {@code Income}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static String getAddIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return AddIncomeCommand.COMMAND_WORD + \" \" + getTransactionDetails(income);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the part of command string for the given {@code Transaction}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static String getTransactionDetails(Transaction transaction) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        sb.append(PREFIX_TITLE + transaction.getTitle().fullTitle + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "        sb.append(PREFIX_AMOUNT + transaction.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "        sb.append(PREFIX_DATE + transaction.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        transaction.getCategories().stream().forEach("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.categoryName + \" \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     * Returns the part of command string for the given {@code EditTransactionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static String getEditTransactionDescriptorDetails(EditCommand.EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.fullTitle).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wltan"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.toString()).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wltan"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            Set\u003cCategory\u003e categories \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                sb.append(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongping827"
        },
        "content": "                categories.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongping827"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 12,
      "zhaojj2209": 9,
      "yongping827": 41,
      "ianyong": 15
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 3,
      "zhaojj2209": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/testutil/TypicalTransactions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_BUBBLE_TEA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_AMOUNT_INTERNSHIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD_BEVERAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_CATEGORY_WORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_BUBBLE_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_DATE_INTERNSHIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_BUBBLE_TEA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.logic.commands.CommandTestUtil.VALID_TITLE_INTERNSHIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.FinanceTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.frequent.FrequentExpense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongping827"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Income;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongping827"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongping827"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongping827"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongping827"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    // Expenses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense BUBBLE_TEA \u003d new TransactionBuilder().withTitle(\"Bubble Tea\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"14/10/2020\").withAmount(\"$4.80\").withCategories(\"Food \u0026 Beverage\").buildExpense();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense TUITION_FEES \u003d new TransactionBuilder().withTitle(\"Tuition Fees\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"05/10/2020\").withAmount(\"4221\").withCategories(\"NUS\", \"GIRO\").buildExpense();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense CARLS_JR \u003d new TransactionBuilder().withTitle(\"Carl\u0027s Jr.\").withAmount(\"11.60\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").withCategories(\"Food \u0026 Beverage\").buildExpense();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense EZLINK_TOPUP \u003d new TransactionBuilder().withTitle(\"EZ-Link Top-up\").withAmount(\"20\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").withCategories(\"Transport\").buildExpense();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense AIMA \u003d new TransactionBuilder().withTitle(\"Artificial Intelligence: A Modern Approach\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withAmount(\"139.00\").withDate(\"06/10/2020\").buildExpense();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense PEN_REFILLS \u003d new TransactionBuilder().withTitle(\"Pen Refills\").withAmount(\"6\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").buildExpense();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Expense MOVIE \u003d new TransactionBuilder().withTitle(\"Movie\").withAmount(\"9\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").buildExpense();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    // Incomes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income INTERNSHIP \u003d new TransactionBuilder().withTitle(\"Internship\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").withAmount(\"$560\").withCategories(\"Work\").buildIncome();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income TEACHING_ASSISTANT \u003d new TransactionBuilder().withTitle(\"Teaching Assistant\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"05/10/2020\").withAmount(\"1920\").withCategories(\"NUS\", \"GIRO\").buildIncome();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income STARTUP_FUNDING \u003d new TransactionBuilder().withTitle(\"Start-up Funding\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"20/09/2020\").withAmount(\"10000.00\").withCategories(\"NUS Enterprise\").buildIncome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income ALLOWANCE \u003d new TransactionBuilder().withTitle(\"Allowance\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").withAmount(\"$100.00\").buildIncome();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income ANG_PAO \u003d new TransactionBuilder().withTitle(\"Ang Pao\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").withAmount(\"88\").buildIncome();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income GST_VOUCHER \u003d new TransactionBuilder().withTitle(\"GST Voucher\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"06/10/2020\").withAmount(\"300\").buildIncome();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static final Income HACKATHON_WINNINGS \u003d new TransactionBuilder().withTitle(\"Hackathon Winnings\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withDate(\"22/09/2020\").withAmount(\"1000\").buildIncome();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    // Frequent Expenses"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final FrequentExpense PHONE_BILL \u003d new FrequentTransactionBuilder().withTitle(\"Phone Bill\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            .withAmount(\"60\").buildFrequentExpense();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final FrequentExpense SPOTIFY_SUBSCRIPTION \u003d new FrequentTransactionBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            .withTitle(\"Spotify Subscription\").withAmount(\"9.90\").buildFrequentExpense();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final FrequentExpense NETFLIX_SUBSCRIPTION \u003d new FrequentTransactionBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            .withTitle(\"Netflix Subscription\").withAmount(\"20\").buildFrequentExpense();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final FrequentExpense TIMES_MAGAZINE_SUBSCRIPTION \u003d new FrequentTransactionBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            .withTitle(\"Times Magazine Subscription\").withAmount(\"12\").buildFrequentExpense();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final Expense TUITION_FEES_2 \u003d new TransactionBuilder().withTitle(\"Tuition Fees\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            .withDate(\"05/10/2020\").withAmount(\"4221\").withCategories(\"NUS\", \"GIRO\").buildExpense();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final Income TEACHING_ASSISTANT_2 \u003d new TransactionBuilder().withTitle(\"Teaching Assistant\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            .withDate(\"05/10/2020\").withAmount(\"1920\").withCategories(\"NUS\", \"GIRO\").buildIncome();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    // Manually added - Transaction\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final Expense BUBBLE_TEA_2 \u003d new TransactionBuilder().withTitle(VALID_TITLE_BUBBLE_TEA)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withAmount(VALID_AMOUNT_BUBBLE_TEA).withDate(VALID_DATE_BUBBLE_TEA)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            .withCategories(VALID_CATEGORY_FOOD_BEVERAGE).buildExpense();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static final Income INTERNSHIP_2 \u003d new TransactionBuilder().withTitle(VALID_TITLE_INTERNSHIP)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            .withAmount(VALID_AMOUNT_INTERNSHIP).withDate(VALID_DATE_INTERNSHIP)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "            .withCategories(VALID_CATEGORY_WORK, VALID_CATEGORY_FOOD_BEVERAGE).buildIncome();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    private TypicalTransactions() {} // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "     * Returns an {@code FinanceTracker} with all the typical transactions."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongping827"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "    public static FinanceTracker getTypicalFinanceTracker() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        FinanceTracker ft \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        getTypicalExpenses().forEach(ft::addTransaction);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongping827"
        },
        "content": "        getTypicalIncomes().forEach(ft::addTransaction);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        getTypicalFrequentExpenses().forEach(ft::addFrequentExpense);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "        return ft;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static List\u003cTransaction\u003e getTypicalTransactions() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Stream.concat(getTypicalExpenses().stream(), getTypicalIncomes().stream())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUBBLE_TEA, TUITION_FEES, CARLS_JR,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                EZLINK_TOPUP, AIMA, PEN_REFILLS, MOVIE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongping827"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    public static List\u003cIncome\u003e getTypicalIncomes() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(INTERNSHIP, TEACHING_ASSISTANT, STARTUP_FUNDING,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ALLOWANCE, ANG_PAO, GST_VOUCHER, HACKATHON_WINNINGS));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongping827"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static List\u003cFrequentExpense\u003e getTypicalFrequentExpenses() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PHONE_BILL, SPOTIFY_SUBSCRIPTION, NETFLIX_SUBSCRIPTION,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                TIMES_MAGAZINE_SUBSCRIPTION));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongping827"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 17,
      "zhaojj2209": 15,
      "yongping827": 37,
      "ianyong": 48
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/java/ay2021s1_cs2103_w16_3/finesse/ui/UiStateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package ay2021s1_cs2103_w16_3.finesse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static ay2021s1_cs2103_w16_3.finesse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import ay2021s1_cs2103_w16_3.finesse.ui.UiState.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class UiStateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void getTabEnumIndex_returnsCorrectIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(1, Tab.OVERVIEW.getTabIndex());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(2, Tab.INCOME.getTabIndex());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(3, Tab.EXPENSES.getTabIndex());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(4, Tab.ANALYTICS.getTabIndex());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void constructor_nullCurrentTab_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UiState((Tab) null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setCurrentTab_nullCurrentTab_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UiState uiState \u003d new UiState();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uiState.setCurrentTab((Tab) null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setCurrentTab_validTab_setsCurrentTab() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        UiState uiState \u003d new UiState();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        uiState.setCurrentTab(Tab.EXPENSES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertEquals(Tab.EXPENSES, uiState.getCurrentTab());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 36
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "\u003c?import ay2021s1_cs2103_w16_3.finesse.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaojj2209"
        },
        "content": "\u003cfx:root type\u003d\"ay2021s1_cs2103_w16_3.finesse.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhaojj2209": 1,
      "-": 5
    }
  }
]
