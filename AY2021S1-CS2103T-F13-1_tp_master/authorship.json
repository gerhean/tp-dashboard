[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "Inventoryinator is built for dedicated and experienced gamers of MMORPGs who want"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "fast inventory management with CLI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "Most games lack robust inventory management. This project simplifies management"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "and tracking of inventories for hardcore gamers. It allows users to keep track"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "of their inventory through quick commands that support many types of shortcuts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "Users can also save recipes and check if they have sufficient materials in"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "their inventory to utilise a recipe."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* Java 11"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "**Getting Started**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* Load the application from the .jar file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "java -jar InvInator.jar"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* Use the `help` command to access the user guide, or go there [_directly_](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "This project is based on the AddressBook-Level3 project created by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "aqcd": 22,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    archiveName \u003d \u0027inventoryinator.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "-": 71
    }
  },
  {
    "path": "build/resources/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "justacasul": 9
    }
  },
  {
    "path": "build/resources/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 39
    }
  },
  {
    "path": "build/resources/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 60
    }
  },
  {
    "path": "build/resources/main/view/PersonListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 36
    }
  },
  {
    "path": "build/resources/main/view/PersonListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 8
    }
  },
  {
    "path": "build/resources/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 9
    }
  },
  {
    "path": "build/resources/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 12
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "title: Inventoryinator"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "**Inventoryinator is a desktop application for managing your game inventory and crafting.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* If you are interested in using Inventoryinator, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* If you are interested about developing Inventoryinator, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "aqcd": 8,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/InventoryMainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.ItemListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonLocationListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonRecipeListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.LocationListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.RecipeListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.ui.InventoryUiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryMainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InventoryMainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Inventory ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemListStorage itemListStorage \u003d new JsonItemListStorage(userPrefs.getItemListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LocationListStorage locationListStorage \u003d new JsonLocationListStorage(userPrefs.getLocationListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipeListStorage recipeListStorage \u003d new JsonRecipeListStorage(userPrefs.getRecipeListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage \u003d new StorageManager(itemListStorage, locationListStorage, recipeListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui \u003d new InventoryUiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s item list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The data from the sample item list will be used instead if {@code storage}\u0027s item list is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * or an empty item list will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyItemList initialItemList \u003d initItemList(storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyLocationList initialLocationList \u003d initLocationList(storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyRecipeList initialRecipeList \u003d initRecipeList(storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new ModelManager(initialItemList, initialLocationList, initialRecipeList, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ReadOnlyItemList initItemList(Storage storage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cReadOnlyItemList\u003e itemListOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyItemList initialItemList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            itemListOptional \u003d storage.readItemList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (itemListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ItemList\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialItemList \u003d itemListOptional.orElseGet(SampleDataUtil::getSampleItemList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ItemList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ItemList\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return initialItemList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ReadOnlyLocationList initLocationList(Storage storage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cReadOnlyLocationList\u003e locationListOptional;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyLocationList initialLocationList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationListOptional \u003d storage.readLocationList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (locationListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.info(\"Data file not found. Will be starting with a sample LocationList\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        initialLocationList \u003d locationListOptional.orElseGet(SampleDataUtil::getSampleLocationList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return initialLocationList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ReadOnlyRecipeList initRecipeList(Storage storage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Optional\u003cReadOnlyRecipeList\u003e recipeListOptional;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyRecipeList initialRecipeList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeListOptional \u003d storage.readRecipeList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (recipeListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RecipeList\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialRecipeList \u003d recipeListOptional.orElseGet(SampleDataUtil::getSampleRecipeList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RecipeList\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialRecipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeList\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialRecipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return initialRecipeList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with empty user prefs\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.info(\"Starting ItemList \" + InventoryMainApp.VERSION);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Inventoryinator ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 159,
      "Rahul0506": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Application.launch(InventoryMainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4,
      "Rahul0506": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the ItemList */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyItemList getItemList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 item list file path. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the LocationList */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyLocationList getLocationList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of locations */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cLocation\u003e getFilteredLocationList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 location list file path. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the RecipeList */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ReadOnlyRecipeList getRecipeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 recipe list file path. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 19,
      "Rahul0506": 17,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.InventoryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final InventoryParser inventoryParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        inventoryParser \u003d new InventoryParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Command command \u003d inventoryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            // TODO: different saves"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            storage.saveModel(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Person"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Item"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return model.getItemList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return model.getFilteredItemList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return model.getItemListFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Location"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyLocationList getLocationList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getLocationList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getFilteredLocationList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getLocationListFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Recipe"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getRecipeList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getRecipeListFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // GUI"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 29,
      "Rahul0506": 39,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Adds a item to the item list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class AddItemCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addi\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a item to the item list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + \"LOCATION\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + \"banana \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + \"44 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + \"edible banana \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + \"Bob’s banana farm \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New item added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the item list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ItemPrecursor itemPre;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddItemCommand(ItemPrecursor itemPrecursor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(itemPrecursor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemPre \u003d itemPrecursor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Item itemToAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemToAdd \u003d model.processPrecursor(itemPre);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (model.hasItem(itemToAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.addItem(itemToAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, itemToAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof AddItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 itemPre.equals(((AddItemCommand) other).itemPre));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 59,
      "Rahul0506": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Adds a item to the item list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addr\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + \"PRODUCT NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_INGREDIENTS + \"ITEM NAME[QUANTITY] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + \"PRODUCT QUANTITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + \"banana cake \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_INGREDIENTS + \"banana[2], flour[2], water[1] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"Banana cake \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_FOUND \u003d \"Item specified in recipe not found in item list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final RecipePrecursor recipePre;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddRecipeCommand(RecipePrecursor recipePre) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipePre);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipePre \u003d recipePre;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Recipe recipeToAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeToAdd \u003d model.processPrecursor(recipePre);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (ItemNotFoundException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_FOUND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (model.hasRecipe(recipeToAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        model.addRecipe(recipeToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof AddRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 recipePre.equals(((AddRecipeCommand) other).recipePre));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Clears the item list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ClearItemCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleari\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.setItemList(new ItemList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Lists all items in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ListItemCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listi\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all items\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Parses input arguments and creates a new AddItemCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class AddItemCommandParser implements Parser\u003cAddItemCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItemCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * and returns an AddItemCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public AddItemCommand parse(String args) throws ParseException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM_NAME, PREFIX_ITEM_QUANTITY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        PREFIX_ITEM_DESCRIPTION, PREFIX_ITEM_LOCATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM_NAME, PREFIX_ITEM_QUANTITY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                PREFIX_ITEM_DESCRIPTION, PREFIX_ITEM_LOCATION)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String name \u003d ItemParserUtil.parseName(argMultimap.getValue(PREFIX_ITEM_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Quantity quantity \u003d ItemParserUtil.parseQuantity(argMultimap.getValue(PREFIX_ITEM_QUANTITY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String description \u003d ItemParserUtil.parseDescription(argMultimap.getValue(PREFIX_ITEM_DESCRIPTION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Set\u003cString\u003e locationList \u003d ItemParserUtil.parseLocations(argMultimap.getAllValues(PREFIX_ITEM_LOCATION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ItemPrecursor itemPrecursor \u003d new ItemPrecursor(Item.getIdCounter() + 1, name, quantity, description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                locationList, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new AddItemCommand(itemPrecursor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 53,
      "Rahul0506": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Parses input arguments and creates a new AddRecipeCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class AddRecipeCommandParser implements Parser\u003cAddRecipeCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRecipeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * and returns an AddRecipeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPE_PRODUCT_NAME, PREFIX_RECIPE_INGREDIENTS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        PREFIX_RECIPE_PRODUCT_QUANTITY, PREFIX_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECIPE_PRODUCT_NAME, PREFIX_RECIPE_INGREDIENTS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                PREFIX_RECIPE_PRODUCT_QUANTITY, PREFIX_RECIPE_DESCRIPTION)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String productName \u003d RecipeParserUtil.parseProductName(argMultimap.getValue(PREFIX_RECIPE_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientPrecursors \u003d RecipeParserUtil"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .parseIngredients(argMultimap.getValue(PREFIX_RECIPE_INGREDIENTS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ProductQuantity productQuantity \u003d RecipeParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .parseProductQuantity(argMultimap.getValue(PREFIX_RECIPE_PRODUCT_QUANTITY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String description \u003d RecipeParserUtil.parseDescription(argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipePrecursor recipePre \u003d new RecipePrecursor(Recipe.getIdCounter() + 1, ingredientPrecursors,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                productName, productQuantity, description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new AddRecipeCommand(recipePre);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // items start here"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_NAME \u003d new Prefix(\"-n \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_QUANTITY \u003d new Prefix(\"-q \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_DESCRIPTION \u003d new Prefix(\"-d \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_LOCATION \u003d new Prefix(\"-l \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // recipes start here"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_PRODUCT_NAME \u003d new Prefix(\"-n \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_INGREDIENTS \u003d new Prefix(\"-items \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_PRODUCT_QUANTITY \u003d new Prefix(\"-pc \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_DESCRIPTION \u003d new Prefix(\"-d \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6,
      "Rahul0506": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventoryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.ClearItemCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.ListItemCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case AddItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new AddItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case ClearItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ClearItemCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case ListItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ListItemCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case AddRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new AddRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ItemListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.ClearItemCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.ListItemCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemListParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case AddItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new AddItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case ClearItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new ClearItemCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case ListItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new ListItemCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ItemParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ItemParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses a {@code String name} into a {@code String}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static String parseName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses a {@code String description} into a {@code String}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static String parseDescription(String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e locations} into a {@code Set\u003cString\u003e}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static Set\u003cString\u003e parseLocations(Collection\u003cString\u003e locations) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(locations);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new HashSet\u003c\u003e(locations);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "justacasul": 73,
      "Rahul0506": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    T parse(String userInput) throws ParseException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecipeParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipeParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Pattern SPLIT_INGREDIENT_FORMAT \u003d Pattern.compile(\"[^\\\\[]+\\\\[\\\\d+\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String MESSAGE_INGREDIENT_FORMAT \u003d \"Ingredients should be listed as itemName[qty], ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static String parseProductName(String productName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(productName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productName.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static List\u003cIngredientPrecursor\u003e parseIngredients(String ingredients) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] splitIngredients \u003d ingredients.split(\"],|]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (splitIngredients.length \u003c 1 || !RecipeParserUtil.checkIngredients(splitIngredients)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(MESSAGE_INGREDIENT_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientPrecursors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] splitParts;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String ingredient : splitIngredients) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            splitParts \u003d ingredient.trim().split(\"\\\\[\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ingredientPrecursors.add(new IngredientPrecursor(splitParts[0], Integer.parseInt(splitParts[1])));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientPrecursors;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static boolean checkIngredients(String[] splitIngredients) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String ingredient : splitIngredients) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Matcher matcher \u003d SPLIT_INGREDIENT_FORMAT.matcher(ingredient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static ProductQuantity parseProductQuantity(String productQuantity) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(productQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String trimmedQuantity \u003d productQuantity.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!ProductQuantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(ProductQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new ProductQuantity(trimmedQuantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static String parseDescription(String description) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Wraps all data at the item-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemList implements ReadOnlyItemList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final UniqueItemList items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates an ItemList using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemList(ReadOnlyItemList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Resets the existing data of this {@code ItemList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void resetData(ReadOnlyItemList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setItems(newData.getItemList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// item-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if a item with the same identity as {@code item} exists in the item list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a item to the item list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item must not already exist in the item list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addItem(Item p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the given item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the item list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.setItem(target, editedItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes {@code key} from this {@code ItemList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code key} must exist in the item list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void removeItem(Item key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int findItemIdByName(String itemName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return items.findItemId(itemName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipeIdToItem(int itemId, int recipeId) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        items.addRecipeIdToItem(itemId, recipeId);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof ItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 items.equals(((ItemList) other).items));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 120,
      "Rahul0506": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.UniqueLocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Wraps all data at the location-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Duplicates are not allowed (by .isSameLocation comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class LocationList implements ReadOnlyLocationList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final UniqueLocationList locations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public LocationList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates an LocationList using the Locations in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public LocationList(ReadOnlyLocationList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of the location list with {@code locations}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.locations.setLocations(locations);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Resets the existing data of this {@code LocationList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void resetData(ReadOnlyLocationList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setLocations(newData.getLocationList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// location-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the location list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.contains(location);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns location ID of location to be found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int findLocationID(Location location) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.findLocationID(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a location to the location list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location must not already exist in the location list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addLocation(Location p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the given location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the location list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * same as another existing location in the location list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(editedLocation);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.setLocation(target, editedLocation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes {@code key} from this {@code LocationList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code key} must exist in the location list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void removeLocation(Location key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.asUnmodifiableObservableList().size() + \" locations\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof LocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 locations.equals(((LocationList) other).locations));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the user prefs\u0027 item list file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the user prefs\u0027 location list file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the user prefs\u0027 recipe list file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Sets the user prefs\u0027 item list file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void setItemListFilePath(Path itemListFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Sets the user prefs\u0027 recipe list file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void setRecipeListFilePath(Path recipeListFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces item list data with the data in {@code itemList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void setItemList(ReadOnlyItemList itemList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces recipe list data with the data in {@code recipeList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void setRecipeList(ReadOnlyRecipeList recipeList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the ItemList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyItemList getItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the LocationList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyLocationList getLocationList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the RecipeList"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ReadOnlyRecipeList getRecipeList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if an item with the same identity as {@code item} exists in the item list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    boolean hasItem(Item item);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the location list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    boolean hasLocation(Location location);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Deletes the given item."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The item must exist in the item list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void deleteItem(Item target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must exist in the recipe list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds the given item."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code item} must not already exist in the item list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void addItem(Item item);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds the given location."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code location} must not already exist in the location list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void addLocation(Location location);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code recipe} must not already exist in the recipe list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the given item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the item list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void setItem(Item target, Item editedItem);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the recipe list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the filtered item list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the filtered location list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cLocation\u003e getFilteredLocationList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the filtered recipe list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Updates the filter of the filtered item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void updateFilteredItemList(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Updates the filter of the filtered location list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the ID of the given location to find."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    int findLocationID(Location toFind);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Recipe processPrecursor(RecipePrecursor recipePrecursor);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Item processPrecursor(ItemPrecursor itemPrecursor);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 44,
      "Rahul0506": 127,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ItemList itemList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final LocationList locationList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final FilteredList\u003cLocation\u003e filteredLocations;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final RecipeList recipeList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemList \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        filteredItems \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationList \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        filteredLocations \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeList \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredRecipes \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Initializes a ModelManager with the given itemList, locationList, recipeList and userPrefs."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ModelManager(ReadOnlyItemList itemList, ReadOnlyLocationList locationList,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        ReadOnlyRecipeList recipeList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(userPrefs, itemList, locationList, recipeList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.fine(\"Initializing with item list: \" + itemList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                + \" location list: \" + locationList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                + \" recipe list: \" + recipeList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        addressBook \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredPersons \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemList \u003d new ItemList(itemList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationList \u003d new LocationList(locationList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredLocations \u003d new FilteredList\u003c\u003e(this.locationList.getLocationList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeList \u003d new RecipeList(recipeList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeList.getRecipeList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return userPrefs.getItemListFilePath();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return userPrefs.getLocationListFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return userPrefs.getRecipeListFilePath();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItemListFilePath(Path itemListFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(itemListFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        userPrefs.setItemListFilePath(itemListFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipeListFilePath(Path recipeListFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipeListFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        userPrefs.setRecipeListFilePath(recipeListFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item and Location List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItemList(ReadOnlyItemList itemList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.itemList.resetData(itemList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipeList(ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeList.resetData(recipeList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyLocationList getLocationList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemList.hasItem(item);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList.hasLocation(location);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeList.hasRecipe(recipe);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemList.removeItem(target);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeList.removeRecipe(target);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemList.addItem(item);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addLocation(Location location) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationList.addLocation(location);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeList.addRecipe(recipe);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemList.addRecipeIdToItem(recipe.getProductId(), recipe.getId());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemList.setItem(target, editedItem);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeList.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item and Location List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return filteredItems;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return filteredLocations;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        filteredLocations.setPredicate(predicate);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int findLocationID(Location toFind) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList.findLocationID(toFind);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private int findItemIdByName(String itemName) throws ItemNotFoundException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int id \u003d itemList.findItemIdByName(itemName);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (id \u003d\u003d -1) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe processPrecursor(RecipePrecursor recipePrecursor) throws ItemNotFoundException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int productId \u003d findItemIdByName(recipePrecursor.getProductName());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientPrecursors \u003d recipePrecursor.getIngredientPrecursors();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        IngredientList ingredients \u003d new IngredientList();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (IngredientPrecursor precursor : ingredientPrecursors) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            int ingredientId \u003d findItemIdByName(precursor.getKey());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ingredients.add(precursor.toIngredient(ingredientId));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipePrecursor.toRecipe(productId, ingredients);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Item processPrecursor(ItemPrecursor itemPrecursor) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Set\u003cInteger\u003e locationIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String locationName : itemPrecursor.getLocationNames()) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            locationIds.add(findLocationIdByName(locationName));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return itemPrecursor.toItem(locationIds, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private int findLocationIdByName(String location) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Location toAdd \u003d new Location(trimmedLocation);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (hasLocation(toAdd)) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Location.decrementIdCounter();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return findLocationID(toAdd);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        addLocation(toAdd);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return toAdd.getId();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 106,
      "Rahul0506": 139,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Unmodifiable view of an item list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface ReadOnlyItemList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an unmodifiable view of the items list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cItem\u003e getItemList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 16,
      "Rahul0506": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Unmodifiable view of a location list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface ReadOnlyLocationList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an unmodifiable view of the locations list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This list will not contain any duplicate locations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cLocation\u003e getLocationList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 16,
      "Rahul0506": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Unmodifiable view of a recipe list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public interface ReadOnlyRecipeList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the recipe list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "Rahul0506": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Wraps all data at the recipe-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipeList implements ReadOnlyRecipeList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipeList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates an RecipeList using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipeList(ReadOnlyRecipeList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Resets the existing data of this {@code RecipeList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void resetData(ReadOnlyRecipeList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds a recipe to the recipe list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must not already exist in the recipe list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipe(Recipe p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the recipe list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Removes {@code key} from this {@code RecipeList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code key} must exist in the recipe list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof RecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 recipes.equals(((RecipeList) other).recipes));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path itemListFilePath \u003d Paths.get(\"data\", \"itemlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path locationListFilePath \u003d Paths.get(\"data\", \"locationlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Path recipeListFilePath \u003d Paths.get(\"data\", \"recipelist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setItemListFilePath(newUserPrefs.getItemListFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setRecipeListFilePath(newUserPrefs.getRecipeListFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return itemListFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeListFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItemListFilePath(Path itemListFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(itemListFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.itemListFilePath \u003d itemListFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipeListFilePath(Path recipeListFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipeListFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeListFilePath \u003d recipeListFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 itemListFilePath.equals(o.itemListFilePath)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 locationListFilePath.equals(o.locationListFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 recipeListFilePath.equals(o.recipeListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, itemListFilePath,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                locationListFilePath, recipeListFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        sb.append(\"\\nLocal item data file location : \" + itemListFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        sb.append(\"\\nLocal location data file location : \" + locationListFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        sb.append(\"\\nLocal recipe data file location : \" + recipeListFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 16,
      "Rahul0506": 26,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents an Item in the Inventoryinator."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e locationIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e recipeIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final boolean isDeleted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Item(int id, String name, Quantity quantity, String description, Set\u003cInteger\u003e locationIds,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                Set\u003cInteger\u003e recipeIds, Set\u003cTag\u003e tags, boolean isDeleted) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(id, name, quantity, description, locationIds, recipeIds, tags, isDeleted);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationIds.addAll(locationIds);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeIds.addAll(recipeIds);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.isDeleted \u003d isDeleted;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        idCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static int getIdCounter() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public List\u003cInteger\u003e getLocationIds() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationIds;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public List\u003cInteger\u003e getRecipeIds() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return recipeIds;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean isDeleted() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return isDeleted;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipeId(int recipeId) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeIds.add(recipeId);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if both items have the same name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getQuantity().equals((getQuantity()))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getLocationIds().equals(getLocationIds())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getRecipeIds().equals(getRecipeIds())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.isDeleted() \u003d\u003d isDeleted();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Objects.hash(id, name, quantity, description, locationIds, recipeIds, tags, isDeleted);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 132,
      "Rahul0506": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ItemPrecursor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ItemPrecursor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cString\u003e locationNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ItemPrecursor(int id, String name, Quantity quantity, String description,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                         Set\u003cString\u003e locationNames, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationNames.addAll(locationNames);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cString\u003e getLocationNames() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return locationNames;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Item toItem(Set\u003cInteger\u003e locationIds, Set\u003cInteger\u003e recipeIds) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Item(id, name, quantity, description, locationIds, recipeIds, tags, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof ItemPrecursor)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ItemPrecursor otherItem \u003d (ItemPrecursor) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return otherItem.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getLocationNames().equals(getLocationNames())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getName(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents a Item\u0027s quantity number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \"Quantity should only contain numbers, and it should be at least 1 digit long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param quantity A valid quantity number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        value \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if a given string is a valid quantity number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * @see Item#isSameItem(Item)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class UniqueItemList implements Iterable\u003cItem\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean contains(Item toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItem);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a item to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void add(Item toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void remove(Item toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItems(UniqueItemList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int findItemId(String itemName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Item item : internalList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (item.getName().equals(itemName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return item.getId();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipeIdToItem(int itemId, int recipeId) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Item item : internalList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (item.getId() \u003d\u003d itemId) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                item.addRecipeId(recipeId);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Iterator\u003cItem\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private boolean itemsAreUnique(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                if (items.get(i).isSameItem(items.get(j))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 138,
      "Rahul0506": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(\"Operation would result in duplicate item\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents an Location in the Inventoryinator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Location(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d getIdCounter() + 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        idCounter++;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void decrementIdCounter() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        idCounter--;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static int getIdCounter() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns true if both locations have the same name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean isSameLocation(Location otherLocation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (otherLocation \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherLocation !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherLocation.getName().equals(getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns true if both locations have the same identity fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * This defines a stronger notion of equality between two locations."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!(other instanceof Location)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Location otherLocation \u003d (Location) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherLocation.getName().equals(getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Objects.hash(id, name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return id + \": \" + name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 82,
      "khenghun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/UniqueLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A list of locations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A location is considered unique by comparing using {@code Location#isSameLocation(Location)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * locations uses Location#isSameLocation(Location) for equality so as to ensure that the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * location being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * unique in terms of identity in the UniqueLocationList. However, the removal of a location uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Location#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * as to ensure that the location with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * @see Location#isSameLocation(Location)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class UniqueLocationList implements Iterable\u003cLocation\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if the list contains an equivalent location as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean contains(Location toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLocation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns location ID of given location"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int findLocationID(Location toFind) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.stream().filter(toFind::isSameLocation).findFirst().get().getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a location to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void add(Location toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the same as another existing location in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(target, editedLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!target.isSameLocation(editedLocation) \u0026\u0026 contains(editedLocation)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.set(index, editedLocation);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes the equivalent location from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void remove(Location toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocations(UniqueLocationList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of this list with {@code locations}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(locations);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!locationsAreUnique(locations)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(locations);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Iterator\u003cLocation\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof UniqueLocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLocationList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if {@code locations} contains only unique locations."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private boolean locationsAreUnique(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c locations.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            for (int j \u003d i + 1; j \u003c locations.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                if (locations.get(i).isSameLocation(locations.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/DuplicateLocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class DuplicateLocationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public DuplicateLocationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(\"Operation would result in duplicate item\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/LocationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class LocationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Convenience class to define a {@code Pair\u003cInteger, Integer\u003e}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Ingredient extends Pair\u003cInteger, Integer\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a new ingredient"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param key   The key for this pair"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param value The value to use for this pair"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ingredient(Integer key, Integer value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(key, value);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/IngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A list of ingredients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class IngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e ingredientList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e ingredientUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FXCollections.unmodifiableObservableList(ingredientList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if the list contains an equivalent ingredient as the given ingredient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds an ingredient to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The ingredient must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (contains((toAdd))) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Removes the equivalent ingredient from the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The ingredient must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!ingredientList.remove(toRemove)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setItems(IngredientList replacement) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.setAll(replacement.ingredientList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the contents of this list with {@code ingredients}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setItems(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!itemsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.setAll(ingredients);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientUnmodifiableList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientList.iterator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof IngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 ingredientList.equals(((IngredientList) other).ingredientList));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientList.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if {@code ingredients} contains only unique ingredients."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private boolean itemsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (ingredients.get(i).equals(ingredients.get(j))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/IngredientPrecursor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class IngredientPrecursor extends Pair\u003cString, Integer\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public IngredientPrecursor(String key, Integer value) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(key, value);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ingredient toIngredient(int ingredientId) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Ingredient(ingredientId, getValue());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ProductQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Represents a Recipe\u0027s product\u0027s quantity number in the inventory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ProductQuantity extends Quantity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param quantity A valid quantity number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ProductQuantity(String quantity) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(quantity);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Represents an Recipe in the Inventoryinator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final IngredientList ingredients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int productId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ProductQuantity productQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final boolean isDeleted;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe(int id, IngredientList ingredients, int productId, String productName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                  ProductQuantity productQuantity, String description, boolean isDeleted) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(id, ingredients, productId, productQuantity, description, isDeleted);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.isDeleted \u003d isDeleted;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        idCounter++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static int getIdCounter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an {@code IngredientList}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public IngredientList getIngredients() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getProductId() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getProductName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ProductQuantity getProductQuantity() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productQuantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean isDeleted() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return isDeleted;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if both recipes have the same id."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return otherRecipe.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductId() \u003d\u003d getProductId()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductName().equals(getProductName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductQuantity().equals(getProductQuantity())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.description.equals(getDescription())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.isDeleted() \u003d\u003d isDeleted();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return Objects.hash(id, ingredients, productId, productQuantity, description, isDeleted);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"Recipe for: %s. %s\", productName, description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipePrecursor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipePrecursor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cIngredientPrecursor\u003e ingredientPrecursors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ProductQuantity productQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipePrecursor(int id, List\u003cIngredientPrecursor\u003e ingredientPrecursors, String productName,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                           ProductQuantity productQuantity, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(id, ingredientPrecursors, productName, productQuantity, description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.ingredientPrecursors \u003d ingredientPrecursors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cIngredientPrecursor\u003e getIngredientPrecursors() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientPrecursors;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getProductName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ProductQuantity getProductQuantity() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productQuantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe toRecipe(int productId, IngredientList ingredients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Recipe(id, ingredients, productId, productName, productQuantity, description, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof RecipePrecursor)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipePrecursor otherRecipe \u003d (RecipePrecursor) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return otherRecipe.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredientPrecursors().equals(getIngredientPrecursors())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductName().equals(getProductName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductQuantity().equals(getProductQuantity())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(\"Operation would result in duplicate ingredient\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(\"Operation would result in duplicate recipe\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Item[] getSampleItems() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item[] {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Item(0, \"Apple\", new Quantity(\"99\"), \"Delicious\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(0)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                new HashSet\u003c\u003e(), getTagSet(\"Consummable\"), false),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new Item(1, \"Banana\", new Quantity(\"99\"), \"Delicious\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(0)),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    new HashSet\u003c\u003e(), getTagSet(\"Consummable\"), false),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new Item(2, \"Fruit basket\", new Quantity(\"99\"), \"Delicious\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(0)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(0)), getTagSet(\"Consummable\"), false)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static ReadOnlyItemList getSampleItemList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList sampleIl \u003d new ItemList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (Item sampleItem : getSampleItems()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            sampleIl.addItem(sampleItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return sampleIl;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Location[] getSampleLocations() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Location[] {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Location(\"Town\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static ReadOnlyLocationList getSampleLocationList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LocationList sampleLl \u003d new LocationList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (Location sampleLocation : getSampleLocations()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            sampleLl.addLocation(sampleLocation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return sampleLl;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.add(new Ingredient(0, 2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.add(new Ingredient(1, 3));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        IngredientList ingredients \u003d new IngredientList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredients.setItems(ingredientList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new Recipe(0, ingredients, 2, \"Fruit basket\", new ProductQuantity(\"1\"), \"Recipe 1\", false)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static ReadOnlyRecipeList getSampleRecipeList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipeList sampleRl \u003d new RecipeList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            sampleRl.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return sampleRl;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 30,
      "Rahul0506": 41,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ItemList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface ItemListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns ItemList data as a {@link ReadOnlyItemList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #getItemListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003e readItemList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves the given {@link ReadOnlyItemList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveItemList(ReadOnlyItemList addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #saveItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveItemList(ReadOnlyItemList addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves the given {@link ReadOnlyLocationList} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList addressBook) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #saveLocationList(ReadOnlyLocationList)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Integer itemId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Integer itemQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * given {@code itemId} and {@code itemQuantity}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"itemId\") int itemId,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                                 @JsonProperty(\"itemQuantity\") int itemQuantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemId \u003d itemId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemQuantity \u003d itemQuantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemId \u003d source.getKey();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemQuantity \u003d source.getValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ingredient toModelType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        //TODO: check if exception needed here"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Ingredient(itemId, itemQuantity);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Jackson-friendly version of {@link Item}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonAdaptedItem {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e locationIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e recipeIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final boolean isDeleted;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"locationIds\") List\u003cInteger\u003e locationIds,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"recipeIds\") List\u003cInteger\u003e recipeIds,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"isDeleted\") boolean isDeleted) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.isDeleted \u003d isDeleted;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (locationIds !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.locationIds.addAll(locationIds);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (recipeIds !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.recipeIds.addAll(recipeIds);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code Item} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        quantity \u003d source.getQuantity().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        isDeleted \u003d source.isDeleted();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationIds.addAll(new ArrayList\u003c\u003e(source.getLocationIds()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipeIds.addAll(new ArrayList\u003c\u003e(source.getRecipeIds()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final List\u003cTag\u003e itemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            itemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(itemTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Set\u003cInteger\u003e modelLocationIds \u003d new HashSet\u003c\u003e(locationIds);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Set\u003cInteger\u003e modelRecipeIds \u003d new HashSet\u003c\u003e(recipeIds);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item(id, name, modelQuantity, description, modelLocationIds,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                modelRecipeIds, modelTags, isDeleted);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Jackson-friendly version of {@link Location}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonAdaptedLocation {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Location\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonAdaptedLocation} with the given item details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedLocation(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                               @JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code Location} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedLocation(Location source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Location} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Location toModelType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Location(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int productId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final boolean isDeleted;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"productId\") int productId,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"productName\") String productName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"productQuantity\") String productQuantity,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"isDeleted\") boolean isDeleted) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.isDeleted \u003d isDeleted;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        productId \u003d source.getProductId();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        productName \u003d source.getProductName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        productQuantity \u003d source.getProductQuantity().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        isDeleted \u003d source.isDeleted();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d source.getIngredients().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredients.addAll(ingredientList.stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final List\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (JsonAdaptedIngredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ingredientList.add(ingredient.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        IngredientList modelIngredients \u003d new IngredientList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        modelIngredients.setItems(ingredientList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (productQuantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!ProductQuantity.isValidQuantity(productQuantity)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new IllegalValueException(ProductQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final ProductQuantity modelQuantity \u003d new ProductQuantity(productQuantity);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Recipe(id, modelIngredients, productId, productName, modelQuantity, description, isDeleted);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A class to access ItemList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class JsonItemListStorage implements ItemListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonItemListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return readItemList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #readItemList()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cJsonSerializableItemList\u003e jsonItemList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                filePath, JsonSerializableItemList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (jsonItemList.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.of(jsonItemList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #saveItemList(ReadOnlyItemList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(itemList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItemList(itemList), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList, Path filePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 83,
      "Rahul0506": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLocationListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A class to access Location data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class JsonLocationListStorage implements LocationListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLocationListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonLocationListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return readLocationList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #readLocationList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cJsonSerializableLocationList\u003e jsonLocation \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                filePath, JsonSerializableLocationList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (jsonLocation.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.of(jsonLocation.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        saveLocationList(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #saveLocationList(ReadOnlyLocationList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLocationList(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRecipeListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A class to access RecipeList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class JsonRecipeListStorage implements RecipeListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonRecipeListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return readRecipeList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Similar to {@link #readRecipeList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Optional\u003cJsonSerializableRecipeList\u003e jsonRecipeList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                filePath, JsonSerializableRecipeList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (jsonRecipeList.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return Optional.of(jsonRecipeList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveRecipeList(recipeList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Similar to {@link #saveRecipeList(ReadOnlyRecipeList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipeList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeList(recipeList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An Immutable ItemList that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "@JsonRootName(value \u003d \"itemlist\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonSerializableItemList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate item(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cJsonAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonSerializableItemList} with the given items."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableItemList(@JsonProperty(\"items\") List\u003cJsonAdaptedItem\u003e items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.items.addAll(items);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code ReadOnlyItemList} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItemList}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableItemList(ReadOnlyItemList source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.addAll(source.getItemList().stream().map(JsonAdaptedItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this item list into the model\u0027s {@code ItemList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList itemList \u003d new ItemList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (JsonAdaptedItem jsonAdaptedItem : items) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Item item \u003d jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (itemList.hasItem(item)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            itemList.addItem(item);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 60,
      "Rahul0506": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An Immutable LocationList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "@JsonRootName(value \u003d \"locationlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonSerializableLocationList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Locations list contains duplicate location(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cJsonAdaptedLocation\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonSerializableLocationList} with the given locations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableLocationList(@JsonProperty(\"locations\") List\u003cJsonAdaptedLocation\u003e locations) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.locations.addAll(locations);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code ReadOnlyLocationList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLocationList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableLocationList(ReadOnlyLocationList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.addAll(source.getLocationList().stream().map(JsonAdaptedLocation::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this location list into the model\u0027s {@code LocationList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public LocationList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LocationList locationList \u003d new LocationList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (JsonAdaptedLocation jsonAdaptedLocation : locations) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Location location \u003d jsonAdaptedLocation.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (locationList.hasLocation(location)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            locationList.addLocation(location);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * An Immutable RecipeList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "@JsonRootName(value \u003d \"recipelist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "class JsonSerializableRecipeList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipes list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeList} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonSerializableRecipeList(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonSerializableRecipeList(ReadOnlyRecipeList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts this recipe list into the model\u0027s {@code RecipeList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipeList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipeList recipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (recipeList.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeList.addRecipe(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LocationListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents a storage for {@link seedu.address.model.LocationList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface LocationListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns LocationList data as a {@link ReadOnlyLocationList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyLocationList\u003e readLocationList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #getLocationListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyLocationList\u003e readLocationList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves the given {@link ReadOnlyLocationList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param locationList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList locationList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #saveLocationList(ReadOnlyLocationList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList locationList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RecipeListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RecipeList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public interface RecipeListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns RecipeList data as a {@link ReadOnlyRecipeList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @see #getRecipeListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Optional\u003cReadOnlyRecipeList\u003e readRecipeList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param recipeList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @see #saveRecipeList(ReadOnlyRecipeList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveRecipeList(ReadOnlyRecipeList recipeList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ItemListStorage, RecipeListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveItemList(ReadOnlyItemList itemList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyLocationList\u003e readLocationList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveModel(Model model) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6,
      "Rahul0506": 14,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private ItemListStorage itemListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private LocationListStorage locationListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private RecipeListStorage recipeListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ItemListStorage}, {@code LocationListStorage},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code RecipeListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public StorageManager(ItemListStorage itemListStorage, LocationListStorage locationListStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                          RecipeListStorage recipeListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemListStorage \u003d itemListStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationListStorage \u003d locationListStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeListStorage \u003d recipeListStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItemList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return readItemList(itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemListStorage.readItemList(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        saveItemList(itemList, itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemListStorage.saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LocationList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        saveLocationList(locationList, locationListStorage.getLocationListFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationListStorage.saveLocationList(locationList, filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeListStorage.getRecipeListFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return readRecipeList(recipeListStorage.getRecipeListFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeListStorage.readRecipeList(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveRecipeList(recipeList, recipeListStorage.getRecipeListFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeListStorage.saveRecipeList(recipeList, filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveModel(Model model) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveItemList(model.getItemList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveRecipeList(model.getRecipeList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveLocationList(model.getLocationList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 46,
      "Rahul0506": 56,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String FXML \u003d \"InventoryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code ItemCode} with the given {@code Item} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name.setText(item.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        quantity.setText(\"Quantity: \" + item.getQuantity());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        description.setText(\"Description: \" + item.getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof InventoryCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        InventoryCard card \u003d (InventoryCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return item.equals(card.item);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 58,
      "Rahul0506": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String FXML \u003d \"InventoryListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InventoryListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a {@code InventoryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code InventoryCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                setGraphic(new InventoryCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 44,
      "Rahul0506": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryMainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryMainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String FXML \u003d \"InventoryMainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private InventoryListPanel inventoryListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private StackPane itemListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryMainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * TO DO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        inventoryListPanel \u003d new InventoryListPanel(logic.getFilteredItemList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemListPanelPlaceholder.getChildren().add(inventoryListPanel.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getItemListFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryListPanel getItemListPanel() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return inventoryListPanel;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 190,
      "Rahul0506": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryUiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryUiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InventoryUiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private InventoryMainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryUiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            mainWindow \u003d new InventoryMainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 84,
      "Rahul0506": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 3,
      "-": 194
    }
  },
  {
    "path": "src/main/resources/view/InventoryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 28
    }
  },
  {
    "path": "src/main/resources/view/InventoryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 8
    }
  },
  {
    "path": "src/main/resources/view/InventoryMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cVBox fx:id\u003d\"itemList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"itemListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * tests for successful add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(Collections.singletonList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * tests for duplicate persons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * tests for equals"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void setItemListFilePath(Path itemListFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public void setRecipeListFilePath(Path recipeListFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void addLocation(Location location) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void setItemList(ReadOnlyItemList itemList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public void setRecipeList(ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public ReadOnlyLocationList getLocationList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public int findLocationID(Location toFind) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public Recipe processPrecursor(RecipePrecursor recipePrecursor) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        public Item processPrecursor(ItemPrecursor itemPrecursor) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 94,
      "Rahul0506": 68,
      "-": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Persons"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // items"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_NAME_APPLE \u003d \"Apple\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_QUANTITY_APPLE \u003d \"9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_QUANTITY_BANANA \u003d \"99\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_DESCRIPTION_APPLE \u003d \"Recovers 10 hp\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_DESCRIPTION_BANANA \u003d \"Used as bait\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_LOCATION_PEACH_ORCHARD \u003d \"Bob\u0027s peach orchard\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_LOCATION_SPINACH_GARDEN \u003d \"Bob\u0027s spinach garden\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_NAME_DESC_APPLE \u003d \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_NAME_DESC_BANANA \u003d \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_QUANTITY_DESC_APPLE \u003d \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + VALID_ITEM_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_QUANTITY_DESC_BANANA \u003d \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_DESCRIPTION_DESC_APPLE \u003d \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + VALID_ITEM_DESCRIPTION_APPLE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_DESCRIPTION_DESC_BANANA \u003d \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_LOCATION_DESC_PEACH_ORCHARD \u003d \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + VALID_ITEM_LOCATION_PEACH_ORCHARD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_LOCATION_DESC_SPINACH_GARDEN \u003d \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + VALID_ITEM_LOCATION_SPINACH_GARDEN;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_ITEM_QUANTITY + \"9a\"; // \u0027a\u0027 not allowed in quantity"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Collections.singletonList(splitName[0])));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 37,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (ParseException | IOException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (ParseException | IOException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InvParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class InvParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseIndex_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            Index index \u003d InvParserUtil.parseIndex(\" 12 \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertEquals(12, index.getOneBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseIndex_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e InvParserUtil.parseIndex(\"x\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"test\", InvParserUtil.parseName(\" test \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseQuantity_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            Quantity qty \u003d InvParserUtil.parseQuantity(\" 123 \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertEquals(\"123\", qty.value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseQuantity_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e InvParserUtil.parseQuantity(\"10.2\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"test\", InvParserUtil.parseDescription(\" test \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertEquals(1, InvParserUtil.parseLocation(\"school\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parseLocations() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            ArrayList\u003cString\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            arr.add(\"test\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertTrue(InvParserUtil.parseLocations(arr).contains(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * test for unsupported operation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e item.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * test for same item"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(APPLE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.isSameItem(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different quantity and description -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same name, same quantity -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same name, same description -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * equals test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item aliceCopy \u003d new ItemBuilder(APPLE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * test for valid quantity for only non-negative integers"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"123\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"1 2\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-2\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"1.2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(new Quantity(\"1\"), new Quantity(\"1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertNotEquals(new Quantity(\"1\"), new Quantity(\"2\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/UniqueItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(APPLE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.contains(BANANA));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(1, uList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.setItem(APPLE, BANANA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(BANANA));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.contains(APPLE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * setItem when item is not found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItem_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uList.setItem(BANANA, APPLE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * setItem with duplicate item as input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItem_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(BANANA);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uList.setItem(BANANA, APPLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.remove(APPLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.contains(APPLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * remove item which does not exist"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void remove_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(ItemNotFoundException.class, ()-\u003e uList.remove(BANANA));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * replacing a UniqueItemList with another"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItems() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList2 \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList2.add(APPLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.setItems(uList2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(APPLE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * replacing a UniqueItemList with a list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItems_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cItem\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        arr.add(APPLE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.setItems(arr);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(APPLE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItems_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cItem\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        arr.add(APPLE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        arr.add(APPLE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uList.setItems(arr));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.equals(uList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same internal lists"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList2 \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList2.add(APPLE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.equals(uList2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different internal lists"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList3 \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList3.add(BANANA);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.equals(uList3));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonItemListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class JsonItemListStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonItemListStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readItemList(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private java.util.Optional\u003cReadOnlyItemList\u003e readItemList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new JsonItemListStorage(Paths.get(filePath)).readItemList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(readItemList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItemList(\"notJsonFormatItemList.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readItemList_invalidItemItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItemList(\"invalidItemItemList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readItemList_invalidAndValidItemItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItemList(\"invalidAndValidItemItemList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * tests reading and saving"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readAndSaveItemList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempItemList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList original \u003d getTypicalItemList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        JsonItemListStorage jsonItemListStorage \u003d new JsonItemListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ReadOnlyItemList readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(original, new ItemList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList_nullItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveItemList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves {@code itemList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void saveItemList(ReadOnlyItemList itemList, String filePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new JsonItemListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    .saveItemList(itemList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveItemList(new ItemList(), null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Bob\u0027s Iridescent Grape\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"25\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Rare drop from bob\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code ItemBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        quantity \u003d itemToCopy.getQuantity();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        description \u003d itemToCopy.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the {@code Name} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the {@code Description} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * builds an item"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @return an Item"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item(0, name, quantity, description,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                new HashSet\u003c\u003e(Collections.singletonList(1)), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Item APPLE \u003d new ItemBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withDescription(\"Recovers 10 hp\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withQuantity(\"9\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Item BANANA \u003d new ItemBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withDescription(\"Used as bait\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withQuantity(\"99\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private TypicalItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an {@code ItemList} with all the typical items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static ItemList getTypicalItemList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList ab \u003d new ItemList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            ab.addItem(item);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 40
    }
  }
]
